
grapes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  08009d20  08009d20  0000ad20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a684  0800a684  0000c024  2**0
                  CONTENTS
  4 .ARM          00000008  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a68c  0800a68c  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a68c  0800a68c  0000b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a690  0800a690  0000b690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800a694  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c024  2**0
                  CONTENTS
 10 .bss          0001c18c  20000024  20000024  0000c024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001c1b0  2001c1b0  0000c024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162c4  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000369b  00000000  00000000  00022318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  000259b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa0  00000000  00000000  00026e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259a0  00000000  00000000  00027db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9f8  00000000  00000000  0004d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d506d  00000000  00000000  00069148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e1b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000548c  00000000  00000000  0013e1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00143684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d08 	.word	0x08009d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08009d08 	.word	0x08009d08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2110      	movs	r1, #16
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <SELECT+0x18>)
 80004c2:	f004 f9f7 	bl	80048b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f001 ffc6 	bl	8002458 <HAL_Delay>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40020000 	.word	0x40020000

080004d4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2110      	movs	r1, #16
 80004dc:	4803      	ldr	r0, [pc, #12]	@ (80004ec <DESELECT+0x18>)
 80004de:	f004 f9e9 	bl	80048b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 ffb8 	bl	8002458 <HAL_Delay>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40020000 	.word	0x40020000

080004f0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004fa:	bf00      	nop
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <SPI_TxByte+0x30>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b02      	cmp	r3, #2
 8000508:	d1f8      	bne.n	80004fc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800050a:	1df9      	adds	r1, r7, #7
 800050c:	2364      	movs	r3, #100	@ 0x64
 800050e:	2201      	movs	r2, #1
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <SPI_TxByte+0x30>)
 8000512:	f005 fc52 	bl	8005dba <HAL_SPI_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200001c0 	.word	0x200001c0

08000524 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000530:	bf00      	nop
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <SPI_TxBuffer+0x30>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b02      	cmp	r3, #2
 800053e:	d1f8      	bne.n	8000532 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000540:	887a      	ldrh	r2, [r7, #2]
 8000542:	2364      	movs	r3, #100	@ 0x64
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	4803      	ldr	r0, [pc, #12]	@ (8000554 <SPI_TxBuffer+0x30>)
 8000548:	f005 fc37 	bl	8005dba <HAL_SPI_Transmit>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200001c0 	.word	0x200001c0

08000558 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800055e:	23ff      	movs	r3, #255	@ 0xff
 8000560:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000562:	bf00      	nop
 8000564:	4b09      	ldr	r3, [pc, #36]	@ (800058c <SPI_RxByte+0x34>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b02      	cmp	r3, #2
 8000570:	d1f8      	bne.n	8000564 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000572:	1dba      	adds	r2, r7, #6
 8000574:	1df9      	adds	r1, r7, #7
 8000576:	2364      	movs	r3, #100	@ 0x64
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <SPI_RxByte+0x34>)
 800057e:	f005 fd5f 	bl	8006040 <HAL_SPI_TransmitReceive>

	return data;
 8000582:	79bb      	ldrb	r3, [r7, #6]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200001c0 	.word	0x200001c0

08000590 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000598:	f7ff ffde 	bl	8000558 <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <SD_ReadyWait+0x30>)
 80005b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005b8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005ba:	f7ff ffcd 	bl	8000558 <SPI_RxByte>
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2bff      	cmp	r3, #255	@ 0xff
 80005c6:	d003      	beq.n	80005d0 <SD_ReadyWait+0x24>
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <SD_ReadyWait+0x30>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f4      	bne.n	80005ba <SD_ReadyWait+0xe>

	return res;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000042 	.word	0x20000042

080005e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005e6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005ea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005ec:	f7ff ff72 	bl	80004d4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	e005      	b.n	8000602 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005f6:	20ff      	movs	r0, #255	@ 0xff
 80005f8:	f7ff ff7a 	bl	80004f0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	3301      	adds	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b09      	cmp	r3, #9
 8000606:	ddf6      	ble.n	80005f6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000608:	f7ff ff56 	bl	80004b8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800060c:	2340      	movs	r3, #64	@ 0x40
 800060e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000620:	2395      	movs	r3, #149	@ 0x95
 8000622:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000624:	463b      	mov	r3, r7
 8000626:	2106      	movs	r1, #6
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff7b 	bl	8000524 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800062e:	e002      	b.n	8000636 <SD_PowerOn+0x56>
	{
		cnt--;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3b01      	subs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000636:	f7ff ff8f 	bl	8000558 <SPI_RxByte>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d002      	beq.n	8000646 <SD_PowerOn+0x66>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f4      	bne.n	8000630 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000646:	f7ff ff45 	bl	80004d4 <DESELECT>
	SPI_TxByte(0XFF);
 800064a:	20ff      	movs	r0, #255	@ 0xff
 800064c:	f7ff ff50 	bl	80004f0 <SPI_TxByte>

	PowerFlag = 1;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <SD_PowerOn+0x80>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000045 	.word	0x20000045

08000664 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <SD_PowerOff+0x14>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000045 	.word	0x20000045

0800067c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <SD_CheckPower+0x14>)
 8000682:	781b      	ldrb	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000045 	.word	0x20000045

08000694 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800069e:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <SD_RxDataBlock+0x58>)
 80006a0:	22c8      	movs	r2, #200	@ 0xc8
 80006a2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006a4:	f7ff ff58 	bl	8000558 <SPI_RxByte>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bff      	cmp	r3, #255	@ 0xff
 80006b0:	d103      	bne.n	80006ba <SD_RxDataBlock+0x26>
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <SD_RxDataBlock+0x58>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f4      	bne.n	80006a4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80006be:	d001      	beq.n	80006c4 <SD_RxDataBlock+0x30>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e00f      	b.n	80006e4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff60 	bl	8000590 <SPI_RxBytePtr>
	} while(len--);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	603a      	str	r2, [r7, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f4      	bne.n	80006c4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006da:	f7ff ff3d 	bl	8000558 <SPI_RxByte>
	SPI_RxByte();
 80006de:	f7ff ff3b 	bl	8000558 <SPI_RxByte>

	return TRUE;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000040 	.word	0x20000040

080006f0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000700:	f7ff ff54 	bl	80005ac <SD_ReadyWait>
 8000704:	4603      	mov	r3, r0
 8000706:	2bff      	cmp	r3, #255	@ 0xff
 8000708:	d001      	beq.n	800070e <SD_TxDataBlock+0x1e>
 800070a:	2300      	movs	r3, #0
 800070c:	e02f      	b.n	800076e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feed 	bl	80004f0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2bfd      	cmp	r3, #253	@ 0xfd
 800071a:	d020      	beq.n	800075e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff feff 	bl	8000524 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000726:	f7ff ff17 	bl	8000558 <SPI_RxByte>
		SPI_RxByte();
 800072a:	f7ff ff15 	bl	8000558 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800072e:	e00b      	b.n	8000748 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000730:	f7ff ff12 	bl	8000558 <SPI_RxByte>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	2b05      	cmp	r3, #5
 8000740:	d006      	beq.n	8000750 <SD_TxDataBlock+0x60>
			i++;
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	3301      	adds	r3, #1
 8000746:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	2b40      	cmp	r3, #64	@ 0x40
 800074c:	d9f0      	bls.n	8000730 <SD_TxDataBlock+0x40>
 800074e:	e000      	b.n	8000752 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000750:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000752:	bf00      	nop
 8000754:	f7ff ff00 	bl	8000558 <SPI_RxByte>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0fa      	beq.n	8000754 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	2b05      	cmp	r3, #5
 8000766:	d101      	bne.n	800076c <SD_TxDataBlock+0x7c>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x7e>

	return FALSE;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	6039      	str	r1, [r7, #0]
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000782:	f7ff ff13 	bl	80005ac <SD_ReadyWait>
 8000786:	4603      	mov	r3, r0
 8000788:	2bff      	cmp	r3, #255	@ 0xff
 800078a:	d001      	beq.n	8000790 <SD_SendCmd+0x1a>
 800078c:	23ff      	movs	r3, #255	@ 0xff
 800078e:	e042      	b.n	8000816 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff feac 	bl	80004f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	0e1b      	lsrs	r3, r3, #24
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fea6 	bl	80004f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fea0 	bl	80004f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe9a 	bl	80004f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe95 	bl	80004f0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b40      	cmp	r3, #64	@ 0x40
 80007ca:	d102      	bne.n	80007d2 <SD_SendCmd+0x5c>
 80007cc:	2395      	movs	r3, #149	@ 0x95
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e007      	b.n	80007e2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b48      	cmp	r3, #72	@ 0x48
 80007d6:	d102      	bne.n	80007de <SD_SendCmd+0x68>
 80007d8:	2387      	movs	r3, #135	@ 0x87
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e001      	b.n	80007e2 <SD_SendCmd+0x6c>
	else crc = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fe83 	bl	80004f0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b4c      	cmp	r3, #76	@ 0x4c
 80007ee:	d101      	bne.n	80007f4 <SD_SendCmd+0x7e>
 80007f0:	f7ff feb2 	bl	8000558 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007f4:	230a      	movs	r3, #10
 80007f6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007f8:	f7ff feae 	bl	8000558 <SPI_RxByte>
 80007fc:	4603      	mov	r3, r0
 80007fe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000800:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000804:	2b00      	cmp	r3, #0
 8000806:	da05      	bge.n	8000814 <SD_SendCmd+0x9e>
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	3b01      	subs	r3, #1
 800080c:	73bb      	strb	r3, [r7, #14]
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f1      	bne.n	80007f8 <SD_SendCmd+0x82>

	return res;
 8000814:	7b7b      	ldrb	r3, [r7, #13]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SD_disk_initialize+0x14>
 8000830:	2301      	movs	r3, #1
 8000832:	e0d1      	b.n	80009d8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000834:	4b6a      	ldr	r3, [pc, #424]	@ (80009e0 <SD_disk_initialize+0x1c0>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <SD_disk_initialize+0x2a>
 8000842:	4b67      	ldr	r3, [pc, #412]	@ (80009e0 <SD_disk_initialize+0x1c0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	e0c6      	b.n	80009d8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800084a:	f7ff fec9 	bl	80005e0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800084e:	f7ff fe33 	bl	80004b8 <SELECT>

	/* check disk type */
	type = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000856:	2100      	movs	r1, #0
 8000858:	2040      	movs	r0, #64	@ 0x40
 800085a:	f7ff ff8c 	bl	8000776 <SD_SendCmd>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	f040 80a1 	bne.w	80009a8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000866:	4b5f      	ldr	r3, [pc, #380]	@ (80009e4 <SD_disk_initialize+0x1c4>)
 8000868:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800086e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000872:	2048      	movs	r0, #72	@ 0x48
 8000874:	f7ff ff7f 	bl	8000776 <SD_SendCmd>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d155      	bne.n	800092a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e00c      	b.n	800089e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000884:	7bfc      	ldrb	r4, [r7, #15]
 8000886:	f7ff fe67 	bl	8000558 <SPI_RxByte>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	f104 0310 	add.w	r3, r4, #16
 8000892:	443b      	add	r3, r7
 8000894:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	3301      	adds	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d9ef      	bls.n	8000884 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008a4:	7abb      	ldrb	r3, [r7, #10]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d17e      	bne.n	80009a8 <SD_disk_initialize+0x188>
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2baa      	cmp	r3, #170	@ 0xaa
 80008ae:	d17b      	bne.n	80009a8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008b0:	2100      	movs	r1, #0
 80008b2:	2077      	movs	r0, #119	@ 0x77
 80008b4:	f7ff ff5f 	bl	8000776 <SD_SendCmd>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d807      	bhi.n	80008ce <SD_disk_initialize+0xae>
 80008be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008c2:	2069      	movs	r0, #105	@ 0x69
 80008c4:	f7ff ff57 	bl	8000776 <SD_SendCmd>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008ce:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <SD_disk_initialize+0x1c4>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1ec      	bne.n	80008b0 <SD_disk_initialize+0x90>
 80008d6:	e000      	b.n	80008da <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008d8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008da:	4b42      	ldr	r3, [pc, #264]	@ (80009e4 <SD_disk_initialize+0x1c4>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d062      	beq.n	80009a8 <SD_disk_initialize+0x188>
 80008e2:	2100      	movs	r1, #0
 80008e4:	207a      	movs	r0, #122	@ 0x7a
 80008e6:	f7ff ff46 	bl	8000776 <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d15b      	bne.n	80009a8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e00c      	b.n	8000910 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008f6:	7bfc      	ldrb	r4, [r7, #15]
 80008f8:	f7ff fe2e 	bl	8000558 <SPI_RxByte>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	f104 0310 	add.w	r3, r4, #16
 8000904:	443b      	add	r3, r7
 8000906:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d9ef      	bls.n	80008f6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000916:	7a3b      	ldrb	r3, [r7, #8]
 8000918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SD_disk_initialize+0x104>
 8000920:	230c      	movs	r3, #12
 8000922:	e000      	b.n	8000926 <SD_disk_initialize+0x106>
 8000924:	2304      	movs	r3, #4
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	e03e      	b.n	80009a8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800092a:	2100      	movs	r1, #0
 800092c:	2077      	movs	r0, #119	@ 0x77
 800092e:	f7ff ff22 	bl	8000776 <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d808      	bhi.n	800094a <SD_disk_initialize+0x12a>
 8000938:	2100      	movs	r1, #0
 800093a:	2069      	movs	r0, #105	@ 0x69
 800093c:	f7ff ff1b 	bl	8000776 <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d801      	bhi.n	800094a <SD_disk_initialize+0x12a>
 8000946:	2302      	movs	r3, #2
 8000948:	e000      	b.n	800094c <SD_disk_initialize+0x12c>
 800094a:	2301      	movs	r3, #1
 800094c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d10e      	bne.n	8000972 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000954:	2100      	movs	r1, #0
 8000956:	2077      	movs	r0, #119	@ 0x77
 8000958:	f7ff ff0d 	bl	8000776 <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d80e      	bhi.n	8000980 <SD_disk_initialize+0x160>
 8000962:	2100      	movs	r1, #0
 8000964:	2069      	movs	r0, #105	@ 0x69
 8000966:	f7ff ff06 	bl	8000776 <SD_SendCmd>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d107      	bne.n	8000980 <SD_disk_initialize+0x160>
 8000970:	e00c      	b.n	800098c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000972:	2100      	movs	r1, #0
 8000974:	2041      	movs	r0, #65	@ 0x41
 8000976:	f7ff fefe 	bl	8000776 <SD_SendCmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <SD_disk_initialize+0x1c4>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e2      	bne.n	800094e <SD_disk_initialize+0x12e>
 8000988:	e000      	b.n	800098c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <SD_disk_initialize+0x1c4>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d007      	beq.n	80009a4 <SD_disk_initialize+0x184>
 8000994:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000998:	2050      	movs	r0, #80	@ 0x50
 800099a:	f7ff feec 	bl	8000776 <SD_SendCmd>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SD_disk_initialize+0x188>
 80009a4:	2300      	movs	r3, #0
 80009a6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009a8:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <SD_disk_initialize+0x1c8>)
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ae:	f7ff fd91 	bl	80004d4 <DESELECT>
	SPI_RxByte();
 80009b2:	f7ff fdd1 	bl	8000558 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <SD_disk_initialize+0x1c0>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f023 0301 	bic.w	r3, r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <SD_disk_initialize+0x1c0>)
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e001      	b.n	80009d2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009ce:	f7ff fe49 	bl	8000664 <SD_PowerOff>
	}

	return Stat;
 80009d2:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <SD_disk_initialize+0x1c0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000040 	.word	0x20000040
 80009e8:	20000044 	.word	0x20000044

080009ec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SD_disk_status+0x14>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e002      	b.n	8000a06 <SD_disk_status+0x1a>
	return Stat;
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <SD_disk_status+0x28>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000

08000a18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <SD_disk_read+0x1c>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <SD_disk_read+0x20>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e051      	b.n	8000adc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <SD_disk_read+0xcc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SD_disk_read+0x32>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e048      	b.n	8000adc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <SD_disk_read+0xd0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <SD_disk_read+0x44>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a5c:	f7ff fd2c 	bl	80004b8 <SELECT>

	if (count == 1)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d111      	bne.n	8000a8a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2051      	movs	r0, #81	@ 0x51
 8000a6a:	f7ff fe84 	bl	8000776 <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d129      	bne.n	8000ac8 <SD_disk_read+0xb0>
 8000a74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f7ff fe0b 	bl	8000694 <SD_RxDataBlock>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <SD_disk_read+0xb0>
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	e01e      	b.n	8000ac8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2052      	movs	r0, #82	@ 0x52
 8000a8e:	f7ff fe72 	bl	8000776 <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d117      	bne.n	8000ac8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdf9 	bl	8000694 <SD_RxDataBlock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00a      	beq.n	8000abe <SD_disk_read+0xa6>
				buff += 512;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000aae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1ed      	bne.n	8000a98 <SD_disk_read+0x80>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000abe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	204c      	movs	r0, #76	@ 0x4c
 8000ac4:	f7ff fe57 	bl	8000776 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ac8:	f7ff fd04 	bl	80004d4 <DESELECT>
	SPI_RxByte();
 8000acc:	f7ff fd44 	bl	8000558 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000044 	.word	0x20000044

08000aec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <SD_disk_write+0x1c>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <SD_disk_write+0x20>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e06b      	b.n	8000be4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b0c:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <SD_disk_write+0x100>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SD_disk_write+0x32>
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e062      	b.n	8000be4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <SD_disk_write+0x100>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SD_disk_write+0x44>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e059      	b.n	8000be4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <SD_disk_write+0x104>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <SD_disk_write+0x56>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	025b      	lsls	r3, r3, #9
 8000b40:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b42:	f7ff fcb9 	bl	80004b8 <SELECT>

	if (count == 1)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d110      	bne.n	8000b6e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	2058      	movs	r0, #88	@ 0x58
 8000b50:	f7ff fe11 	bl	8000776 <SD_SendCmd>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d13a      	bne.n	8000bd0 <SD_disk_write+0xe4>
 8000b5a:	21fe      	movs	r1, #254	@ 0xfe
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdc7 	bl	80006f0 <SD_TxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d033      	beq.n	8000bd0 <SD_disk_write+0xe4>
			count = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e030      	b.n	8000bd0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <SD_disk_write+0x104>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2077      	movs	r0, #119	@ 0x77
 8000b7e:	f7ff fdfa 	bl	8000776 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	2057      	movs	r0, #87	@ 0x57
 8000b86:	f7ff fdf6 	bl	8000776 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2059      	movs	r0, #89	@ 0x59
 8000b8e:	f7ff fdf2 	bl	8000776 <SD_SendCmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b98:	21fc      	movs	r1, #252	@ 0xfc
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f7ff fda8 	bl	80006f0 <SD_TxDataBlock>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00a      	beq.n	8000bbc <SD_disk_write+0xd0>
				buff += 512;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ee      	bne.n	8000b98 <SD_disk_write+0xac>
 8000bba:	e000      	b.n	8000bbe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bbc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bbe:	21fd      	movs	r1, #253	@ 0xfd
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fd95 	bl	80006f0 <SD_TxDataBlock>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bd0:	f7ff fc80 	bl	80004d4 <DESELECT>
	SPI_RxByte();
 8000bd4:	f7ff fcc0 	bl	8000558 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000044 	.word	0x20000044

08000bf4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08b      	sub	sp, #44	@ 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	603a      	str	r2, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	460b      	mov	r3, r1
 8000c02:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SD_disk_ioctl+0x1e>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e113      	b.n	8000e3a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	d124      	bne.n	8000c68 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d012      	beq.n	8000c4c <SD_disk_ioctl+0x58>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	dc1a      	bgt.n	8000c60 <SD_disk_ioctl+0x6c>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <SD_disk_ioctl+0x40>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d006      	beq.n	8000c40 <SD_disk_ioctl+0x4c>
 8000c32:	e015      	b.n	8000c60 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c34:	f7ff fd16 	bl	8000664 <SD_PowerOff>
			res = RES_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c3e:	e0fa      	b.n	8000e36 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c40:	f7ff fcce 	bl	80005e0 <SD_PowerOn>
			res = RES_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c4a:	e0f4      	b.n	8000e36 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	f7ff fd14 	bl	800067c <SD_CheckPower>
 8000c54:	4603      	mov	r3, r0
 8000c56:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c5e:	e0ea      	b.n	8000e36 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c60:	2304      	movs	r3, #4
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c66:	e0e6      	b.n	8000e36 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c68:	4b76      	ldr	r3, [pc, #472]	@ (8000e44 <SD_disk_ioctl+0x250>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SD_disk_ioctl+0x86>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e0df      	b.n	8000e3a <SD_disk_ioctl+0x246>

		SELECT();
 8000c7a:	f7ff fc1d 	bl	80004b8 <SELECT>

		switch (ctrl)
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	2b0d      	cmp	r3, #13
 8000c82:	f200 80c9 	bhi.w	8000e18 <SD_disk_ioctl+0x224>
 8000c86:	a201      	add	r2, pc, #4	@ (adr r2, 8000c8c <SD_disk_ioctl+0x98>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000d83 	.word	0x08000d83
 8000c90:	08000cc5 	.word	0x08000cc5
 8000c94:	08000d73 	.word	0x08000d73
 8000c98:	08000e19 	.word	0x08000e19
 8000c9c:	08000e19 	.word	0x08000e19
 8000ca0:	08000e19 	.word	0x08000e19
 8000ca4:	08000e19 	.word	0x08000e19
 8000ca8:	08000e19 	.word	0x08000e19
 8000cac:	08000e19 	.word	0x08000e19
 8000cb0:	08000e19 	.word	0x08000e19
 8000cb4:	08000e19 	.word	0x08000e19
 8000cb8:	08000d95 	.word	0x08000d95
 8000cbc:	08000db9 	.word	0x08000db9
 8000cc0:	08000ddd 	.word	0x08000ddd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2049      	movs	r0, #73	@ 0x49
 8000cc8:	f7ff fd55 	bl	8000776 <SD_SendCmd>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 80a6 	bne.w	8000e20 <SD_disk_ioctl+0x22c>
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2110      	movs	r1, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcda 	bl	8000694 <SD_RxDataBlock>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 809c 	beq.w	8000e20 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000ce8:	7b3b      	ldrb	r3, [r7, #12]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10d      	bne.n	8000d0e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000cf2:	7d7b      	ldrb	r3, [r7, #21]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	7d3b      	ldrb	r3, [r7, #20]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d04:	8bfb      	ldrh	r3, [r7, #30]
 8000d06:	029a      	lsls	r2, r3, #10
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e02d      	b.n	8000d6a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d0e:	7c7b      	ldrb	r3, [r7, #17]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	7dbb      	ldrb	r3, [r7, #22]
 8000d18:	09db      	lsrs	r3, r3, #7
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	7d7b      	ldrb	r3, [r7, #21]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 0306 	and.w	r3, r3, #6
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	3302      	adds	r3, #2
 8000d32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d36:	7d3b      	ldrb	r3, [r7, #20]
 8000d38:	099b      	lsrs	r3, r3, #6
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	7cfb      	ldrb	r3, [r7, #19]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7cbb      	ldrb	r3, [r7, #18]
 8000d4a:	029b      	lsls	r3, r3, #10
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	3301      	adds	r3, #1
 8000d5a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d5c:	8bfa      	ldrh	r2, [r7, #30]
 8000d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d62:	3b09      	subs	r3, #9
 8000d64:	409a      	lsls	r2, r3
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000d70:	e056      	b.n	8000e20 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d80:	e055      	b.n	8000e2e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d82:	f7ff fc13 	bl	80005ac <SD_ReadyWait>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2bff      	cmp	r3, #255	@ 0xff
 8000d8a:	d14b      	bne.n	8000e24 <SD_disk_ioctl+0x230>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e047      	b.n	8000e24 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d94:	2100      	movs	r1, #0
 8000d96:	2049      	movs	r0, #73	@ 0x49
 8000d98:	f7ff fced 	bl	8000776 <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d142      	bne.n	8000e28 <SD_disk_ioctl+0x234>
 8000da2:	2110      	movs	r1, #16
 8000da4:	6a38      	ldr	r0, [r7, #32]
 8000da6:	f7ff fc75 	bl	8000694 <SD_RxDataBlock>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d03b      	beq.n	8000e28 <SD_disk_ioctl+0x234>
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000db6:	e037      	b.n	8000e28 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db8:	2100      	movs	r1, #0
 8000dba:	204a      	movs	r0, #74	@ 0x4a
 8000dbc:	f7ff fcdb 	bl	8000776 <SD_SendCmd>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d132      	bne.n	8000e2c <SD_disk_ioctl+0x238>
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	6a38      	ldr	r0, [r7, #32]
 8000dca:	f7ff fc63 	bl	8000694 <SD_RxDataBlock>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d02b      	beq.n	8000e2c <SD_disk_ioctl+0x238>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dda:	e027      	b.n	8000e2c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	207a      	movs	r0, #122	@ 0x7a
 8000de0:	f7ff fcc9 	bl	8000776 <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d116      	bne.n	8000e18 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000df0:	e00b      	b.n	8000e0a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000df2:	6a3c      	ldr	r4, [r7, #32]
 8000df4:	1c63      	adds	r3, r4, #1
 8000df6:	623b      	str	r3, [r7, #32]
 8000df8:	f7ff fbae 	bl	8000558 <SPI_RxByte>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e04:	3301      	adds	r3, #1
 8000e06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d9ef      	bls.n	8000df2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e1e:	e006      	b.n	8000e2e <SD_disk_ioctl+0x23a>
			break;
 8000e20:	bf00      	nop
 8000e22:	e004      	b.n	8000e2e <SD_disk_ioctl+0x23a>
			break;
 8000e24:	bf00      	nop
 8000e26:	e002      	b.n	8000e2e <SD_disk_ioctl+0x23a>
			break;
 8000e28:	bf00      	nop
 8000e2a:	e000      	b.n	8000e2e <SD_disk_ioctl+0x23a>
			break;
 8000e2c:	bf00      	nop
		}

		DESELECT();
 8000e2e:	f7ff fb51 	bl	80004d4 <DESELECT>
		SPI_RxByte();
 8000e32:	f7ff fb91 	bl	8000558 <SPI_RxByte>
	}

	return res;
 8000e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	372c      	adds	r7, #44	@ 0x2c
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000

08000e48 <SD_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to initialize the SD card and mount the file system
void SD_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    if (FATFS_LinkDriver(&USER_Driver, USERPath) == 0) {
 8000e4c:	4909      	ldr	r1, [pc, #36]	@ (8000e74 <SD_Init+0x2c>)
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <SD_Init+0x30>)
 8000e50:	f008 fe4a 	bl	8009ae8 <FATFS_LinkDriver>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <SD_Init+0x26>
        if (f_mount(&USERFatFS, (TCHAR const*)USERPath, 0) != FR_OK) {
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4905      	ldr	r1, [pc, #20]	@ (8000e74 <SD_Init+0x2c>)
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <SD_Init+0x34>)
 8000e60:	f008 fa54 	bl	800930c <f_mount>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SD_Init+0x26>
            Error_Handler();
 8000e6a:	f000 fae5 	bl	8001438 <Error_Handler>
        }
    }
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2001af40 	.word	0x2001af40
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	2001af44 	.word	0x2001af44

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f001 fa73 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f879 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f000 f9b9 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e96:	f000 f997 	bl	80011c8 <MX_DMA_Init>
  MX_DCMI_Init();
 8000e9a:	f000 f8e3 	bl	8001064 <MX_DCMI_Init>
  MX_FSMC_Init();
 8000e9e:	f000 fa6b 	bl	8001378 <MX_FSMC_Init>
  MX_I2C2_Init();
 8000ea2:	f000 f907 	bl	80010b4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000ea6:	f000 f933 	bl	8001110 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000eaa:	f006 f88f 	bl	8006fcc <MX_FATFS_Init>
  MX_SPI1_Init();
 8000eae:	f000 f955 	bl	800115c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OV5640_Init(&myCamera, OV5640_R800x480, OV5640_JPEG);
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	482b      	ldr	r0, [pc, #172]	@ (8000f64 <main+0xe4>)
 8000eb8:	f000 fac4 	bl	8001444 <OV5640_Init>
  SD_Init();
 8000ebc:	f7ff ffc4 	bl	8000e48 <SD_Init>

  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)buffer, BUFFER_SIZE / 4);
 8000ec0:	4a29      	ldr	r2, [pc, #164]	@ (8000f68 <main+0xe8>)
 8000ec2:	f243 5392 	movw	r3, #13714	@ 0x3592
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <main+0xec>)
 8000eca:	f001 fbfb 	bl	80026c4 <HAL_DCMI_Start_DMA>

  FIL file;
  UINT bytes_written;
  f_open(&file, "video.raw", FA_CREATE_ALWAYS | FA_WRITE);
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	3b10      	subs	r3, #16
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	4926      	ldr	r1, [pc, #152]	@ (8000f70 <main+0xf0>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f008 fa5d 	bl	8009398 <f_open>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (frame_captured) {
 8000ede:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <main+0xf4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0fa      	beq.n	8000ede <main+0x5e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
          // Disable interrupts to prevent race conditions
          __disable_irq();

          frame_captured = 0;
 8000eec:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <main+0xf4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

          // Copy captured frame to frame buffer
          memcpy(frame_buffer, &buffer[read_index], FRAME_SIZE);
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <main+0xf8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <main+0xe8>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <main+0xfc>)
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f24d 6349 	movw	r3, #54857	@ 0xd649
 8000f04:	461a      	mov	r2, r3
 8000f06:	f008 fef1 	bl	8009cec <memcpy>
          read_index = (read_index + FRAME_SIZE) % BUFFER_SIZE;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <main+0xf8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f503 4356 	add.w	r3, r3, #54784	@ 0xd600
 8000f12:	3349      	adds	r3, #73	@ 0x49
 8000f14:	4a1a      	ldr	r2, [pc, #104]	@ (8000f80 <main+0x100>)
 8000f16:	fba2 1203 	umull	r1, r2, r2, r3
 8000f1a:	0bd2      	lsrs	r2, r2, #15
 8000f1c:	f24d 6149 	movw	r1, #54857	@ 0xd649
 8000f20:	fb01 f202 	mul.w	r2, r1, r2
 8000f24:	1a9a      	subs	r2, r3, r2
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <main+0xf8>)
 8000f28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f2a:	b662      	cpsie	i
}
 8000f2c:	bf00      	nop

          // Enable interrupts after critical section
          __enable_irq();

          // Write frame buffer to SD card
          if (f_write(&file, frame_buffer, FRAME_SIZE, &bytes_written) != FR_OK) {
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	3b14      	subs	r3, #20
 8000f34:	f107 0018 	add.w	r0, r7, #24
 8000f38:	3810      	subs	r0, #16
 8000f3a:	f24d 6249 	movw	r2, #54857	@ 0xd649
 8000f3e:	490f      	ldr	r1, [pc, #60]	@ (8000f7c <main+0xfc>)
 8000f40:	f008 fbf2 	bl	8009728 <f_write>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <main+0xce>
              Error_Handler();
 8000f4a:	f000 fa75 	bl	8001438 <Error_Handler>
          }

          if (bytes_written != FRAME_SIZE) {
 8000f4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f52:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000f56:	f24d 6249 	movw	r2, #54857	@ 0xd649
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d0bf      	beq.n	8000ede <main+0x5e>
              Error_Handler();
 8000f5e:	f000 fa6b 	bl	8001438 <Error_Handler>
      if (frame_captured) {
 8000f62:	e7bc      	b.n	8000ede <main+0x5e>
 8000f64:	20000268 	.word	0x20000268
 8000f68:	20000294 	.word	0x20000294
 8000f6c:	20000048 	.word	0x20000048
 8000f70:	08009d20 	.word	0x08009d20
 8000f74:	2001af30 	.word	0x2001af30
 8000f78:	2001af2c 	.word	0x2001af2c
 8000f7c:	2000d8e0 	.word	0x2000d8e0
 8000f80:	98eaf075 	.word	0x98eaf075

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	@ 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	2230      	movs	r2, #48	@ 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f008 fe7e 	bl	8009c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <SystemClock_Config+0xd8>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800105c <SystemClock_Config+0xd8>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <SystemClock_Config+0xd8>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <SystemClock_Config+0xdc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a24      	ldr	r2, [pc, #144]	@ (8001060 <SystemClock_Config+0xdc>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <SystemClock_Config+0xdc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ff8:	2348      	movs	r3, #72	@ 0x48
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001000:	2303      	movs	r3, #3
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fdb1 	bl	8004b70 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001014:	f000 fa10 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2102      	movs	r1, #2
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f813 	bl	8005060 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001040:	f000 f9fa 	bl	8001438 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8001044:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001048:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 800104c:	2000      	movs	r0, #0
 800104e:	f004 f8ed 	bl	800522c <HAL_RCC_MCOConfig>
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	@ 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_DCMI_Init+0x48>)
 800106a:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <MX_DCMI_Init+0x4c>)
 800106c:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_DCMI_Init+0x48>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <MX_DCMI_Init+0x48>)
 8001076:	2220      	movs	r2, #32
 8001078:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_DCMI_Init+0x48>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_DCMI_Init+0x48>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_DCMI_Init+0x48>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_DCMI_Init+0x48>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_DCMI_Init+0x48>)
 8001094:	2208      	movs	r2, #8
 8001096:	621a      	str	r2, [r3, #32]
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_DCMI_Init+0x48>)
 800109a:	f001 fce7 	bl	8002a6c <HAL_DCMI_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_DCMI_Init+0x44>
		Error_Handler();
 80010a4:	f000 f9c8 	bl	8001438 <Error_Handler>
	}

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000048 	.word	0x20000048
 80010b0:	50050000 	.word	0x50050000

080010b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C2_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C2_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010f2:	f003 fbf9 	bl	80048e8 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f99c 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000e8 	.word	0x200000e8
 8001108:	40005800 	.word	0x40005800
 800110c:	000186a0 	.word	0x000186a0

08001110 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <MX_SDIO_SD_Init+0x48>)
 8001118:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_SDIO_SD_Init+0x44>)
 8001140:	f004 fa02 	bl	8005548 <HAL_SD_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800114a:	f000 f975 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000013c 	.word	0x2000013c
 8001158:	40012c00 	.word	0x40012c00

0800115c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001160:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001162:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <MX_SPI1_Init+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_SPI1_Init+0x64>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_SPI1_Init+0x64>)
 80011ae:	f004 fd7b 	bl	8005ca8 <HAL_SPI_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b8:	f000 f93e 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001c0 	.word	0x200001c0
 80011c4:	40013000 	.word	0x40013000

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <MX_DMA_Init+0x3c>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_DMA_Init+0x3c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2039      	movs	r0, #57	@ 0x39
 80011f0:	f001 fa31 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011f4:	2039      	movs	r0, #57	@ 0x39
 80011f6:	f001 fa4a 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a50      	ldr	r2, [pc, #320]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b4e      	ldr	r3, [pc, #312]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <MX_GPIO_Init+0x160>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <MX_GPIO_Init+0x160>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a42      	ldr	r2, [pc, #264]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b40      	ldr	r3, [pc, #256]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b3c      	ldr	r3, [pc, #240]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a3b      	ldr	r2, [pc, #236]	@ (8001368 <MX_GPIO_Init+0x160>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a34      	ldr	r2, [pc, #208]	@ (8001368 <MX_GPIO_Init+0x160>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <MX_GPIO_Init+0x160>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <MX_GPIO_Init+0x160>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001368 <MX_GPIO_Init+0x160>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <MX_GPIO_Init+0x160>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2128      	movs	r1, #40	@ 0x28
 80012ca:	4828      	ldr	r0, [pc, #160]	@ (800136c <MX_GPIO_Init+0x164>)
 80012cc:	f003 faf2 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	4826      	ldr	r0, [pc, #152]	@ (8001370 <MX_GPIO_Init+0x168>)
 80012d6:	f003 faed 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAMERA_RESET_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80012e0:	4824      	ldr	r0, [pc, #144]	@ (8001374 <MX_GPIO_Init+0x16c>)
 80012e2:	f003 fae7 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80012e6:	2328      	movs	r3, #40	@ 0x28
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	481b      	ldr	r0, [pc, #108]	@ (800136c <MX_GPIO_Init+0x164>)
 80012fe:	f003 f93d 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001302:	2302      	movs	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4815      	ldr	r0, [pc, #84]	@ (8001370 <MX_GPIO_Init+0x168>)
 800131a:	f003 f92f 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_RESET_Pin PD12 */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|GPIO_PIN_12;
 800131e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	480f      	ldr	r0, [pc, #60]	@ (8001374 <MX_GPIO_Init+0x16c>)
 8001338:	f003 f920 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800133c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_GPIO_Init+0x164>)
 800135a:	f003 f90f 	bl	800457c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	@ 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020c00 	.word	0x40020c00

08001378 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <MX_FSMC_Init+0xb8>)
 8001392:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001396:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001398:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <MX_FSMC_Init+0xb8>)
 800139a:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <MX_FSMC_Init+0xbc>)
 800139c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013a4:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013b2:	2210      	movs	r2, #16
 80013b4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_FSMC_Init+0xb8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80013f8:	230f      	movs	r3, #15
 80013fa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80013fc:	2305      	movs	r3, #5
 80013fe:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001404:	2310      	movs	r3, #16
 8001406:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001408:	2311      	movs	r3, #17
 800140a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_FSMC_Init+0xb8>)
 8001418:	f005 f89e 	bl	8006558 <HAL_SRAM_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001422:	f000 f809 	bl	8001438 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000218 	.word	0x20000218
 8001434:	a0000104 	.word	0xa0000104

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8091 	bne.w	8001582 <OV5640_Init+0x13e>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d80e      	bhi.n	8001484 <OV5640_Init+0x40>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00f      	beq.n	800148c <OV5640_Init+0x48>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d00c      	beq.n	800148c <OV5640_Init+0x48>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d009      	beq.n	800148c <OV5640_Init+0x48>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d006      	beq.n	800148c <OV5640_Init+0x48>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d003      	beq.n	800148c <OV5640_Init+0x48>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e07a      	b.n	8001582 <OV5640_Init+0x13e>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	e01f      	b.n	80014d2 <OV5640_Init+0x8e>
      {
        if (ret != OV5640_ERROR)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001498:	d018      	beq.n	80014cc <OV5640_Init+0x88>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 800149a:	4a3c      	ldr	r2, [pc, #240]	@ (800158c <OV5640_Init+0x148>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	885b      	ldrh	r3, [r3, #2]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f103 0018 	add.w	r0, r3, #24
 80014ae:	4a37      	ldr	r2, [pc, #220]	@ (800158c <OV5640_Init+0x148>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80014b6:	f107 0217 	add.w	r2, r7, #23
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 fc03 	bl	8001cc6 <ov5640_write_reg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <OV5640_Init+0x88>
          {
            ret = OV5640_ERROR;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ca:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	2bf5      	cmp	r3, #245	@ 0xf5
 80014d6:	d9dc      	bls.n	8001492 <OV5640_Init+0x4e>
          }
        }
      }

      if(ret == OV5640_OK)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d127      	bne.n	800152e <OV5640_Init+0xea>
      {
        /* Set configuration for Serial Interface */
        if(pObj->Mode == SERIAL_MODE)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d116      	bne.n	8001516 <OV5640_Init+0xd2>
        {
          if(OV5640_EnableMIPIMode(pObj) != OV5640_OK)
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fb51 	bl	8001b90 <OV5640_EnableMIPIMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <OV5640_Init+0xb8>
          {
            ret = OV5640_ERROR;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e018      	b.n	800152e <OV5640_Init+0xea>
          }
          else if(OV5640_SetMIPIVirtualChannel(pObj, pObj->VirtualChannelID) != OV5640_OK)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	4619      	mov	r1, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fb74 	bl	8001bf0 <OV5640_SetMIPIVirtualChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00f      	beq.n	800152e <OV5640_Init+0xea>
          {
            ret = OV5640_ERROR;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	e00b      	b.n	800152e <OV5640_Init+0xea>
          }
        }
        else
        {
          /* Set configuration for parallel Interface */
          if(OV5640_EnableDVPMode(pObj) != OV5640_OK)
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fb0a 	bl	8001b30 <OV5640_EnableDVPMode>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <OV5640_Init+0xe6>
          {
            ret = OV5640_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e001      	b.n	800152e <OV5640_Init+0xea>
          }
          else
          {
            ret = OV5640_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
          }
        }
      }


      if (ret == OV5640_OK)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d126      	bne.n	8001582 <OV5640_Init+0x13e>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f9be 	bl	80018b8 <OV5640_SetResolution>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <OV5640_Init+0x106>
        {
          ret = OV5640_ERROR;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	e01b      	b.n	8001582 <OV5640_Init+0x13e>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f81f 	bl	8001590 <OV5640_SetPixelFormat>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <OV5640_Init+0x11c>
        {
          ret = OV5640_ERROR;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	e010      	b.n	8001582 <OV5640_Init+0x13e>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001560:	2300      	movs	r3, #0
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fa9c 	bl	8001aa4 <OV5640_SetPolarities>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <OV5640_Init+0x136>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e003      	b.n	8001582 <OV5640_Init+0x13e>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
 8001582:	69bb      	ldr	r3, [r7, #24]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	08009d74 	.word	0x08009d74

08001590 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00f      	beq.n	80015c4 <OV5640_SetPixelFormat+0x34>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d00c      	beq.n	80015c4 <OV5640_SetPixelFormat+0x34>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d009      	beq.n	80015c4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d006      	beq.n	80015c4 <OV5640_SetPixelFormat+0x34>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d003      	beq.n	80015c4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e16a      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	f200 80c3 	bhi.w	8001754 <OV5640_SetPixelFormat+0x1c4>
 80015ce:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <OV5640_SetPixelFormat+0x44>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	0800164d 	.word	0x0800164d
 80015d8:	080015f5 	.word	0x080015f5
 80015dc:	08001755 	.word	0x08001755
 80015e0:	08001755 	.word	0x08001755
 80015e4:	08001755 	.word	0x08001755
 80015e8:	08001755 	.word	0x08001755
 80015ec:	080016a5 	.word	0x080016a5
 80015f0:	080016fd 	.word	0x080016fd
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	e024      	b.n	8001644 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001600:	d01d      	beq.n	800163e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001602:	4aa8      	ldr	r2, [pc, #672]	@ (80018a4 <OV5640_SetPixelFormat+0x314>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	885b      	ldrh	r3, [r3, #2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f103 0018 	add.w	r0, r3, #24
 8001616:	4aa3      	ldr	r2, [pc, #652]	@ (80018a4 <OV5640_SetPixelFormat+0x314>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800161e:	f107 020f 	add.w	r2, r7, #15
 8001622:	2301      	movs	r3, #1
 8001624:	f000 fb4f 	bl	8001cc6 <ov5640_write_reg>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e003      	b.n	800163e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001636:	2101      	movs	r1, #1
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fb13 	bl	8001c64 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3301      	adds	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d9d7      	bls.n	80015fa <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800164a:	e0af      	b.n	80017ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	e024      	b.n	800169c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001658:	d01d      	beq.n	8001696 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800165a:	4a93      	ldr	r2, [pc, #588]	@ (80018a8 <OV5640_SetPixelFormat+0x318>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0018 	add.w	r0, r3, #24
 800166e:	4a8e      	ldr	r2, [pc, #568]	@ (80018a8 <OV5640_SetPixelFormat+0x318>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001676:	f107 020f 	add.w	r2, r7, #15
 800167a:	2301      	movs	r3, #1
 800167c:	f000 fb23 	bl	8001cc6 <ov5640_write_reg>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e003      	b.n	8001696 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fae7 	bl	8001c64 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	3301      	adds	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d9d7      	bls.n	8001652 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80016a2:	e083      	b.n	80017ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	e024      	b.n	80016f4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016b0:	d01d      	beq.n	80016ee <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80016b2:	4a7e      	ldr	r2, [pc, #504]	@ (80018ac <OV5640_SetPixelFormat+0x31c>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	885b      	ldrh	r3, [r3, #2]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 0018 	add.w	r0, r3, #24
 80016c6:	4a79      	ldr	r2, [pc, #484]	@ (80018ac <OV5640_SetPixelFormat+0x31c>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016ce:	f107 020f 	add.w	r2, r7, #15
 80016d2:	2301      	movs	r3, #1
 80016d4:	f000 faf7 	bl	8001cc6 <ov5640_write_reg>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e003      	b.n	80016ee <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80016e6:	2101      	movs	r1, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fabb 	bl	8001c64 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3301      	adds	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d9d7      	bls.n	80016aa <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80016fa:	e057      	b.n	80017ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	e024      	b.n	800174c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d01d      	beq.n	8001746 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800170a:	4a69      	ldr	r2, [pc, #420]	@ (80018b0 <OV5640_SetPixelFormat+0x320>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	885b      	ldrh	r3, [r3, #2]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0018 	add.w	r0, r3, #24
 800171e:	4a64      	ldr	r2, [pc, #400]	@ (80018b0 <OV5640_SetPixelFormat+0x320>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001726:	f107 020f 	add.w	r2, r7, #15
 800172a:	2301      	movs	r3, #1
 800172c:	f000 facb 	bl	8001cc6 <ov5640_write_reg>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e003      	b.n	8001746 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800173e:	2101      	movs	r1, #1
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa8f 	bl	8001c64 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3301      	adds	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d9d7      	bls.n	8001702 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001752:	e02b      	b.n	80017ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e024      	b.n	80017a4 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001760:	d01d      	beq.n	800179e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001762:	4a54      	ldr	r2, [pc, #336]	@ (80018b4 <OV5640_SetPixelFormat+0x324>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 0018 	add.w	r0, r3, #24
 8001776:	4a4f      	ldr	r2, [pc, #316]	@ (80018b4 <OV5640_SetPixelFormat+0x324>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800177e:	f107 020f 	add.w	r2, r7, #15
 8001782:	2301      	movs	r3, #1
 8001784:	f000 fa9f 	bl	8001cc6 <ov5640_write_reg>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e003      	b.n	800179e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fa63 	bl	8001c64 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3301      	adds	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d9d7      	bls.n	800175a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80017aa:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d173      	bne.n	800189a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f103 0018 	add.w	r0, r3, #24
 80017b8:	f107 020f 	add.w	r2, r7, #15
 80017bc:	2301      	movs	r3, #1
 80017be:	f643 0121 	movw	r1, #14369	@ 0x3821
 80017c2:	f000 fa69 	bl	8001c98 <ov5640_read_reg>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e062      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f103 0018 	add.w	r0, r3, #24
 80017e4:	f107 020f 	add.w	r2, r7, #15
 80017e8:	2301      	movs	r3, #1
 80017ea:	f643 0121 	movw	r1, #14369	@ 0x3821
 80017ee:	f000 fa6a 	bl	8001cc6 <ov5640_write_reg>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e04c      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f103 0018 	add.w	r0, r3, #24
 8001806:	f107 020f 	add.w	r2, r7, #15
 800180a:	2301      	movs	r3, #1
 800180c:	f243 0102 	movw	r1, #12290	@ 0x3002
 8001810:	f000 fa42 	bl	8001c98 <ov5640_read_reg>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e03b      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	f023 031c 	bic.w	r3, r3, #28
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f103 0018 	add.w	r0, r3, #24
 8001832:	f107 020f 	add.w	r2, r7, #15
 8001836:	2301      	movs	r3, #1
 8001838:	f243 0102 	movw	r1, #12290	@ 0x3002
 800183c:	f000 fa43 	bl	8001cc6 <ov5640_write_reg>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e025      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f103 0018 	add.w	r0, r3, #24
 8001854:	f107 020f 	add.w	r2, r7, #15
 8001858:	2301      	movs	r3, #1
 800185a:	f243 0106 	movw	r1, #12294	@ 0x3006
 800185e:	f000 fa1b 	bl	8001c98 <ov5640_read_reg>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e014      	b.n	800189a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001876:	b2db      	uxtb	r3, r3
 8001878:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f103 0018 	add.w	r0, r3, #24
 8001880:	f107 020f 	add.w	r2, r7, #15
 8001884:	2301      	movs	r3, #1
 8001886:	f243 0106 	movw	r1, #12294	@ 0x3006
 800188a:	f000 fa1c 	bl	8001cc6 <ov5640_write_reg>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001898:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800189a:	697b      	ldr	r3, [r7, #20]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0800a14c 	.word	0x0800a14c
 80018a8:	0800a154 	.word	0x0800a154
 80018ac:	0800a15c 	.word	0x0800a15c
 80018b0:	0800a164 	.word	0x0800a164
 80018b4:	0800a16c 	.word	0x0800a16c

080018b8 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d903      	bls.n	80018d4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e0d8      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	f200 80d1 	bhi.w	8001a7e <OV5640_SetResolution+0x1c6>
 80018dc:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <OV5640_SetResolution+0x2c>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f9 	.word	0x080018f9
 80018e8:	08001947 	.word	0x08001947
 80018ec:	08001995 	.word	0x08001995
 80018f0:	080019e3 	.word	0x080019e3
 80018f4:	08001a31 	.word	0x08001a31
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	e01f      	b.n	800193e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001904:	d018      	beq.n	8001938 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001906:	4a62      	ldr	r2, [pc, #392]	@ (8001a90 <OV5640_SetResolution+0x1d8>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	885b      	ldrh	r3, [r3, #2]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f103 0018 	add.w	r0, r3, #24
 800191a:	4a5d      	ldr	r2, [pc, #372]	@ (8001a90 <OV5640_SetResolution+0x1d8>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001922:	f107 020f 	add.w	r2, r7, #15
 8001926:	2301      	movs	r3, #1
 8001928:	f000 f9cd 	bl	8001cc6 <ov5640_write_reg>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001936:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3301      	adds	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d9dc      	bls.n	80018fe <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001944:	e09f      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e01f      	b.n	800198c <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001952:	d018      	beq.n	8001986 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001954:	4a4f      	ldr	r2, [pc, #316]	@ (8001a94 <OV5640_SetResolution+0x1dc>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	885b      	ldrh	r3, [r3, #2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f103 0018 	add.w	r0, r3, #24
 8001968:	4a4a      	ldr	r2, [pc, #296]	@ (8001a94 <OV5640_SetResolution+0x1dc>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001970:	f107 020f 	add.w	r2, r7, #15
 8001974:	2301      	movs	r3, #1
 8001976:	f000 f9a6 	bl	8001cc6 <ov5640_write_reg>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001984:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d9dc      	bls.n	800194c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001992:	e078      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e01f      	b.n	80019da <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a0:	d018      	beq.n	80019d4 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80019a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <OV5640_SetResolution+0x1e0>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	885b      	ldrh	r3, [r3, #2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0018 	add.w	r0, r3, #24
 80019b6:	4a38      	ldr	r2, [pc, #224]	@ (8001a98 <OV5640_SetResolution+0x1e0>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019be:	f107 020f 	add.w	r2, r7, #15
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 f97f 	bl	8001cc6 <ov5640_write_reg>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d9dc      	bls.n	800199a <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80019e0:	e051      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e01f      	b.n	8001a28 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019ee:	d018      	beq.n	8001a22 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80019f0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <OV5640_SetResolution+0x1e4>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	885b      	ldrh	r3, [r3, #2]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f103 0018 	add.w	r0, r3, #24
 8001a04:	4a25      	ldr	r2, [pc, #148]	@ (8001a9c <OV5640_SetResolution+0x1e4>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a0c:	f107 020f 	add.w	r2, r7, #15
 8001a10:	2301      	movs	r3, #1
 8001a12:	f000 f958 	bl	8001cc6 <ov5640_write_reg>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a20:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3301      	adds	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d9dc      	bls.n	80019e8 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001a2e:	e02a      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	e01f      	b.n	8001a76 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a3c:	d018      	beq.n	8001a70 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <OV5640_SetResolution+0x1e8>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	885b      	ldrh	r3, [r3, #2]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f103 0018 	add.w	r0, r3, #24
 8001a52:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <OV5640_SetResolution+0x1e8>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a5a:	f107 020f 	add.w	r2, r7, #15
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f000 f931 	bl	8001cc6 <ov5640_write_reg>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	3301      	adds	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d9dc      	bls.n	8001a36 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001a7c:	e003      	b.n	8001a86 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a82:	617b      	str	r3, [r7, #20]
        break;
 8001a84:	bf00      	nop
    }
  }

  return ret;
 8001a86:	697b      	ldr	r3, [r7, #20]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	0800a174 	.word	0x0800a174
 8001a94:	0800a184 	.word	0x0800a184
 8001a98:	0800a194 	.word	0x0800a194
 8001a9c:	0800a1a4 	.word	0x0800a1a4
 8001aa0:	0800a1b4 	.word	0x0800a1b4

08001aa4 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d011      	beq.n	8001ae0 <OV5640_SetPolarities+0x3c>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <OV5640_SetPolarities+0x24>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10b      	bne.n	8001ae0 <OV5640_SetPolarities+0x3c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <OV5640_SetPolarities+0x3c>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d006      	beq.n	8001ae8 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e01e      	b.n	8001b26 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f103 0018 	add.w	r0, r3, #24
 8001b0c:	f107 0213 	add.w	r2, r7, #19
 8001b10:	2301      	movs	r3, #1
 8001b12:	f244 7140 	movw	r1, #18240	@ 0x4740
 8001b16:	f000 f8d6 	bl	8001cc6 <ov5640_write_reg>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b24:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001b26:	697b      	ldr	r3, [r7, #20]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <OV5640_EnableDVPMode>:
  * @brief  Enable DVP(Digital Video Port) Mode: Parallel Data Output
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int OV5640_EnableDVPMode(OV5640_Object_t *pObj)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
    {OV5640_SC_PLL_CONTRL2, 0x60},
    {OV5640_SC_PLL_CONTRL3, 0x13},
    {OV5640_SYSTEM_ROOT_DIVIDER, 0x01},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e01c      	b.n	8001b7c <OV5640_EnableDVPMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <OV5640_EnableDVPMode+0x5c>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	885b      	ldrh	r3, [r3, #2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f103 0018 	add.w	r0, r3, #24
 8001b56:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <OV5640_EnableDVPMode+0x5c>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b5e:	f107 020f 	add.w	r2, r7, #15
 8001b62:	2301      	movs	r3, #1
 8001b64:	f000 f8af 	bl	8001cc6 <ov5640_write_reg>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <OV5640_EnableDVPMode+0x46>
    {
      ret = OV5640_ERROR;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e005      	b.n	8001b82 <OV5640_EnableDVPMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b09      	cmp	r3, #9
 8001b80:	d9df      	bls.n	8001b42 <OV5640_EnableDVPMode+0x12>
    }
  }

  return ret;
 8001b82:	693b      	ldr	r3, [r7, #16]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	0800a1c4 	.word	0x0800a1c4

08001b90 <OV5640_EnableMIPIMode>:
  * @brief  Enable MIPI (Mobile Industry Processor Interface) Mode: Serial port
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_EnableMIPIMode(OV5640_Object_t *pObj)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  int32_t ret = OV5640_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
    {OV5640_PAD_OUTPUT_VALUE00, 0x70},
    {OV5640_MIPI_CONTROL00, 0x45},
    {OV5640_FRAME_CTRL02, 0x00},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e01c      	b.n	8001bdc <OV5640_EnableMIPIMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <OV5640_EnableMIPIMode+0x5c>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	885b      	ldrh	r3, [r3, #2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f103 0018 	add.w	r0, r3, #24
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <OV5640_EnableMIPIMode+0x5c>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bbe:	f107 020f 	add.w	r2, r7, #15
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f000 f87f 	bl	8001cc6 <ov5640_write_reg>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <OV5640_EnableMIPIMode+0x46>
    {
      ret = OV5640_ERROR;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd2:	617b      	str	r3, [r7, #20]
      break;
 8001bd4:	e005      	b.n	8001be2 <OV5640_EnableMIPIMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b0d      	cmp	r3, #13
 8001be0:	d9df      	bls.n	8001ba2 <OV5640_EnableMIPIMode+0x12>
    }
  }

  return ret;
 8001be2:	697b      	ldr	r3, [r7, #20]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0800a1ec 	.word	0x0800a1ec

08001bf0 <OV5640_SetMIPIVirtualChannel>:
  * @param  pObj  pointer to component object
  * @param  vchannel virtual channel for Mipi Mode
  * @retval Component status
  */
int32_t OV5640_SetMIPIVirtualChannel(OV5640_Object_t *pObj, uint32_t vchannel)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f103 0018 	add.w	r0, r3, #24
 8001c04:	f107 020b 	add.w	r2, r7, #11
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f644 0114 	movw	r1, #18452	@ 0x4814
 8001c0e:	f000 f843 	bl	8001c98 <ov5640_read_reg>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <OV5640_SetMIPIVirtualChannel+0x30>
  {
    ret = OV5640_ERROR;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e01c      	b.n	8001c5a <OV5640_SetMIPIVirtualChannel+0x6a>
  }
  else
  {
    tmp &= ~(3 << 6);
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	72fb      	strb	r3, [r7, #11]
    tmp |= (vchannel << 6);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	72fb      	strb	r3, [r7, #11]
    if (ov5640_write_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f103 0018 	add.w	r0, r3, #24
 8001c40:	f107 020b 	add.w	r2, r7, #11
 8001c44:	2301      	movs	r3, #1
 8001c46:	f644 0114 	movw	r1, #18452	@ 0x4814
 8001c4a:	f000 f83c 	bl	8001cc6 <ov5640_write_reg>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <OV5640_SetMIPIVirtualChannel+0x6a>
    {
      ret = OV5640_ERROR;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c58:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4798      	blx	r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8001c78:	bf00      	nop
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4798      	blx	r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d8f5      	bhi.n	8001c7a <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	817b      	strh	r3, [r7, #10]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685c      	ldr	r4, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6898      	ldr	r0, [r3, #8]
 8001cb4:	893b      	ldrh	r3, [r7, #8]
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	47a0      	blx	r4
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}

08001cc6 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8001cc6:	b590      	push	{r4, r7, lr}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	817b      	strh	r3, [r7, #10]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681c      	ldr	r4, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6898      	ldr	r0, [r3, #8]
 8001ce2:	893b      	ldrh	r3, [r7, #8]
 8001ce4:	8979      	ldrh	r1, [r7, #10]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	47a0      	blx	r4
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6a      	ldr	r2, [pc, #424]	@ (8001f0c <HAL_DCMI_MspInit+0x1c8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f040 80cd 	bne.w	8001f02 <HAL_DCMI_MspInit+0x1be>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	4b68      	ldr	r3, [pc, #416]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	4a67      	ldr	r2, [pc, #412]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d78:	4b65      	ldr	r3, [pc, #404]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	4b61      	ldr	r3, [pc, #388]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	4a60      	ldr	r2, [pc, #384]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	4a59      	ldr	r2, [pc, #356]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db0:	4b57      	ldr	r3, [pc, #348]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4b53      	ldr	r3, [pc, #332]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	4a52      	ldr	r2, [pc, #328]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dcc:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de8:	4b49      	ldr	r3, [pc, #292]	@ (8001f10 <HAL_DCMI_MspInit+0x1cc>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    PE0     ------> DCMI_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001df4:	2350      	movs	r3, #80	@ 0x50
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e04:	230d      	movs	r3, #13
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4841      	ldr	r0, [pc, #260]	@ (8001f14 <HAL_DCMI_MspInit+0x1d0>)
 8001e10:	f002 fbb4 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001e14:	f44f 632c 	mov.w	r3, #2752	@ 0xac0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e26:	230d      	movs	r3, #13
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4839      	ldr	r0, [pc, #228]	@ (8001f18 <HAL_DCMI_MspInit+0x1d4>)
 8001e32:	f002 fba3 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e36:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e40:	2302      	movs	r3, #2
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e48:	230d      	movs	r3, #13
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4832      	ldr	r0, [pc, #200]	@ (8001f1c <HAL_DCMI_MspInit+0x1d8>)
 8001e54:	f002 fb92 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e60:	2302      	movs	r3, #2
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e68:	230d      	movs	r3, #13
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	482b      	ldr	r0, [pc, #172]	@ (8001f20 <HAL_DCMI_MspInit+0x1dc>)
 8001e74:	f002 fb82 	bl	800457c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f28 <HAL_DCMI_MspInit+0x1e4>)
 8001e7c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e84:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e86:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001e92:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e98:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001e9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ea0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ea4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ea8:	619a      	str	r2, [r3, #24]
   	hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
   	hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001eb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eb6:	621a      	str	r2, [r3, #32]
   	hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001eba:	2204      	movs	r2, #4
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
   	hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  	hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
   	hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
 8001ed0:	4814      	ldr	r0, [pc, #80]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ed2:	f000 fe39 	bl	8002b48 <HAL_DMA_Init>
    //	Error_Handler(__FILE__, __LINE__);
    	}

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001eda:	639a      	str	r2, [r3, #56]	@ 0x38
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_DCMI_MspInit+0x1e0>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	204e      	movs	r0, #78	@ 0x4e
 8001ee8:	f000 fbb5 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001eec:	204e      	movs	r0, #78	@ 0x4e
 8001eee:	f000 fbce 	bl	800268e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN DCMI_MspInit 1 */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2039      	movs	r0, #57	@ 0x39
 8001ef8:	f000 fbad 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001efc:	2039      	movs	r0, #57	@ 0x39
 8001efe:	f000 fbc6 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001f02:	bf00      	nop
 8001f04:	3730      	adds	r7, #48	@ 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	50050000 	.word	0x50050000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	20000088 	.word	0x20000088
 8001f28:	40026428 	.word	0x40026428

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_I2C_MspInit+0x84>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12c      	bne.n	8001fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f70:	2312      	movs	r3, #18
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <HAL_I2C_MspInit+0x8c>)
 8001f88:	f002 faf8 	bl	800457c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a07      	ldr	r2, [pc, #28]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40005800 	.word	0x40005800
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	@ (800207c <HAL_SD_MspInit+0xc0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d14a      	bne.n	8002074 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a26      	ldr	r2, [pc, #152]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a1f      	ldr	r2, [pc, #124]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_SD_MspInit+0xc4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002032:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002044:	230c      	movs	r3, #12
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	480d      	ldr	r0, [pc, #52]	@ (8002084 <HAL_SD_MspInit+0xc8>)
 8002050:	f002 fa94 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002054:	2304      	movs	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002064:	230c      	movs	r3, #12
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	@ (8002088 <HAL_SD_MspInit+0xcc>)
 8002070:	f002 fa84 	bl	800457c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	@ 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40023800 	.word	0x40023800
 8002084:	40020800 	.word	0x40020800
 8002088:	40020c00 	.word	0x40020c00

0800208c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_SPI_MspInit+0xc0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d149      	bne.n	8002142 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020be:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_SPI_MspInit+0xc4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002112:	2305      	movs	r3, #5
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <HAL_SPI_MspInit+0xc8>)
 800211e:	f002 fa2d 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002122:	2318      	movs	r3, #24
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002132:	2305      	movs	r3, #5
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <HAL_SPI_MspInit+0xcc>)
 800213e:	f002 fa1d 	bl	800457c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40013000 	.word	0x40013000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_FSMC_MspInit+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d131      	bne.n	80021dc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_FSMC_MspInit+0x88>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_FSMC_MspInit+0x8c>)
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	4a18      	ldr	r2, [pc, #96]	@ (80021e8 <HAL_FSMC_MspInit+0x8c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6393      	str	r3, [r2, #56]	@ 0x38
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <HAL_FSMC_MspInit+0x8c>)
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800219a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800219e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021ac:	230c      	movs	r3, #12
 80021ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	480d      	ldr	r0, [pc, #52]	@ (80021ec <HAL_FSMC_MspInit+0x90>)
 80021b6:	f002 f9e1 	bl	800457c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80021ba:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80021be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021cc:	230c      	movs	r3, #12
 80021ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <HAL_FSMC_MspInit+0x94>)
 80021d6:	f002 f9d1 	bl	800457c <HAL_GPIO_Init>
 80021da:	e000      	b.n	80021de <HAL_FSMC_MspInit+0x82>
    return;
 80021dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2001af34 	.word	0x2001af34
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40020c00 	.word	0x40020c00

080021f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80021fc:	f7ff ffae 	bl	800215c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <NMI_Handler+0x4>

08002210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <MemManage_Handler+0x4>

08002220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <UsageFault_Handler+0x4>

08002230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <SysTick_Handler+0x34>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <SysTick_Handler+0x18>
		Timer1--;
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <SysTick_Handler+0x34>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <SysTick_Handler+0x34>)
 8002272:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <SysTick_Handler+0x38>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <SysTick_Handler+0x2c>
		Timer2--;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <SysTick_Handler+0x38>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <SysTick_Handler+0x38>)
 8002286:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002288:	f000 f8c6 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000040 	.word	0x20000040
 8002294:	20000042 	.word	0x20000042

08002298 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA2_Stream1_IRQHandler+0x10>)
 800229e:	f000 fd7b 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000088 	.word	0x20000088

080022ac <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    // frame_captured = 1;
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    // Code to handle line event if needed
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    // Code to handle VSYNC event if needed
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DCMI_IRQHandler+0x10>)
 80022ee:	f000 fa89 	bl	8002804 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000048 	.word	0x20000048

080022fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <SystemInit+0x20>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <SystemInit+0x20>)
 8002308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002358 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002324:	f7ff ffea 	bl	80022fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002328:	480c      	ldr	r0, [pc, #48]	@ (800235c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800232a:	490d      	ldr	r1, [pc, #52]	@ (8002360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800232c:	4a0d      	ldr	r2, [pc, #52]	@ (8002364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002340:	4c0a      	ldr	r4, [pc, #40]	@ (800236c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234e:	f007 fca9 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002352:	f7fe fd95 	bl	8000e80 <main>
  bx  lr    
 8002356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002364:	0800a694 	.word	0x0800a694
  ldr r2, =_sbss
 8002368:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800236c:	2001c1b0 	.word	0x2001c1b0

08002370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC_IRQHandler>
	...

08002374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002378:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_Init+0x40>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_Init+0x40>)
 800238a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <HAL_Init+0x40>)
 8002396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239c:	2003      	movs	r0, #3
 800239e:	f000 f94f 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a2:	200f      	movs	r0, #15
 80023a4:	f000 f808 	bl	80023b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a8:	f7ff fca4 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023c00 	.word	0x40023c00

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_InitTick+0x54>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_InitTick+0x58>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f967 	bl	80026aa <HAL_SYSTICK_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00e      	b.n	8002404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d80a      	bhi.n	8002402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023f4:	f000 f92f 	bl	8002656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f8:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <HAL_InitTick+0x5c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000004 	.word	0x20000004
 8002410:	2000000c 	.word	0x2000000c
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_IncTick+0x20>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_IncTick+0x24>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_IncTick+0x24>)
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	2000000c 	.word	0x2000000c
 800243c:	2001af38 	.word	0x2001af38

08002440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_GetTick+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2001af38 	.word	0x2001af38

08002458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff ffee 	bl	8002440 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002470:	d005      	beq.n	800247e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <HAL_Delay+0x44>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800247e:	bf00      	nop
 8002480:	f7ff ffde 	bl	8002440 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8f7      	bhi.n	8002480 <HAL_Delay+0x28>
  {
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000000c 	.word	0x2000000c

080024a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db0b      	blt.n	800252e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4907      	ldr	r1, [pc, #28]	@ (800253c <__NVIC_EnableIRQ+0x38>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	@ (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	@ (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	@ 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	@ 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002620:	f7ff ff8e 	bl	8002540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff29 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff3e 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff8e 	bl	8002594 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5d 	bl	8002540 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff31 	bl	8002504 <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_DCMI_Start_DMA+0x20>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e086      	b.n	80027f2 <HAL_DCMI_Start_DMA+0x12e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002702:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0202 	bic.w	r2, r2, #2
 8002712:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002728:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_DCMI_Start_DMA+0x138>)
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	4a33      	ldr	r2, [pc, #204]	@ (8002800 <HAL_DCMI_Start_DMA+0x13c>)
 8002732:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	2200      	movs	r2, #0
 800273a:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274e:	d20a      	bcs.n	8002766 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3328      	adds	r3, #40	@ 0x28
 800275a:	4619      	mov	r1, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	f000 faa0 	bl	8002ca4 <HAL_DMA_Start_IT>
 8002764:	e038      	b.n	80027d8 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_DCMI_Start_DMA+0x138>)
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002780:	e009      	b.n	8002796 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	085a      	lsrs	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	005a      	lsls	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279e:	d2f0      	bcs.n	8002782 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	1e9a      	subs	r2, r3, #2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3328      	adds	r3, #40	@ 0x28
 80027c8:	4619      	mov	r1, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	f000 fd4a 	bl	800326c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	08002915 	.word	0x08002915
 8002800:	08002a3f 	.word	0x08002a3f

08002804 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2204      	movs	r2, #4
 8002824:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	4a2f      	ldr	r2, [pc, #188]	@ (80028fc <HAL_DCMI_IRQHandler+0xf8>)
 8002840:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fa84 	bl	8002d54 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	4a21      	ldr	r2, [pc, #132]	@ (80028fc <HAL_DCMI_IRQHandler+0xf8>)
 8002878:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fa68 	bl	8002d54 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2210      	movs	r2, #16
 8002894:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fd12 	bl	80022c0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2208      	movs	r2, #8
 80028ac:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fd10 	bl	80022d4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d019      	beq.n	80028f2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d107      	bne.n	80028dc <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 021e 	bic.w	r2, r2, #30
 80028da:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fcdd 	bl	80022ac <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	08002a3f 	.word	0x08002a3f

08002900 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d043      	beq.n	80029b6 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293a:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d118      	bne.n	800297a <DCMI_DMAXferCplt+0x66>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	00da      	lsls	r2, r3, #3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	f001 fdc7 	bl	80044fc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
 8002978:	e044      	b.n	8002a04 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d13c      	bne.n	8002a04 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	00da      	lsls	r2, r3, #3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	2201      	movs	r2, #1
 80029a4:	4619      	mov	r1, r3
 80029a6:	f001 fda9 	bl	80044fc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80029b4:	e026      	b.n	8002a04 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	e017      	b.n	8002a04 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	440a      	add	r2, r1
 80029fa:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d112      	bne.n	8002a36 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d103      	bne.n	8002a36 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d003      	beq.n	8002a5e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ff4e 	bl	8002900 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e05f      	b.n	8002b3e <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff f956 	bl	8001d44 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff f953 	bl	8001d44 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002ab4:	f023 0308 	bic.w	r3, r3, #8
 8002ab8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002ace:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002ada:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002ae6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d112      	bne.n	8002b1e <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7f1b      	ldrb	r3, [r3, #28]
 8002afc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7f5b      	ldrb	r3, [r3, #29]
 8002b02:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002b04:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f9b      	ldrb	r3, [r3, #30]
 8002b0a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002b0c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7fdb      	ldrb	r3, [r3, #31]
 8002b14:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002b1a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002b1c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 021e 	orr.w	r2, r2, #30
 8002b2c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff fc74 	bl	8002440 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e099      	b.n	8002c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b84:	e00f      	b.n	8002ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b86:	f7ff fc5b 	bl	8002440 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d908      	bls.n	8002ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e078      	b.n	8002c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e8      	bne.n	8002b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_DMA_Init+0x158>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d117      	bne.n	8002c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa91 	bl	8003174 <DMA_CheckFifoParam>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	@ 0x40
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c66:	2301      	movs	r3, #1
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa48 	bl	8003108 <DMA_CalcBaseAndBitshift>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	223f      	movs	r2, #63	@ 0x3f
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	f010803f 	.word	0xf010803f

08002ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Start_IT+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e040      	b.n	8002d4c <HAL_DMA_Start_IT+0xa8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d12f      	bne.n	8002d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f9da 	bl	80030ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	223f      	movs	r2, #63	@ 0x3f
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0216 	orr.w	r2, r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e005      	b.n	8002d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	@ 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00c      	b.n	8002d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da4:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe0 <HAL_DMA_IRQHandler+0x248>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8e      	ldr	r2, [pc, #568]	@ (8002fe4 <HAL_DMA_IRQHandler+0x24c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	2210      	movs	r2, #16
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2210      	movs	r2, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d024      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e01f      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808f 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8087 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2220      	movs	r2, #32
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d136      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0216 	bic.w	r2, r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x1da>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	223f      	movs	r2, #63	@ 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07e      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
        }
        return;
 8002fae:	e079      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e02c      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
 8002fde:	bf00      	nop
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e01e      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0210 	bic.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2205      	movs	r2, #5
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d307      	bcc.n	8003080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_DMA_IRQHandler+0x2cc>
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e000      	b.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030a4:	bf00      	nop
    }
  }
}
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d108      	bne.n	80030ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ea:	e007      	b.n	80030fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3b10      	subs	r3, #16
 8003118:	4a14      	ldr	r2, [pc, #80]	@ (800316c <DMA_CalcBaseAndBitshift+0x64>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003122:	4a13      	ldr	r2, [pc, #76]	@ (8003170 <DMA_CalcBaseAndBitshift+0x68>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d909      	bls.n	800314a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	1d1a      	adds	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	@ 0x58
 8003148:	e007      	b.n	800315a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	aaaaaaab 	.word	0xaaaaaaab
 8003170:	0800a23c 	.word	0x0800a23c

08003174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11f      	bne.n	80031ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d856      	bhi.n	8003242 <DMA_CheckFifoParam+0xce>
 8003194:	a201      	add	r2, pc, #4	@ (adr r2, 800319c <DMA_CheckFifoParam+0x28>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031bf 	.word	0x080031bf
 80031a4:	080031ad 	.word	0x080031ad
 80031a8:	08003243 	.word	0x08003243
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d046      	beq.n	8003246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031bc:	e043      	b.n	8003246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031c6:	d140      	bne.n	800324a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e03d      	b.n	800324a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d6:	d121      	bne.n	800321c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d837      	bhi.n	800324e <DMA_CheckFifoParam+0xda>
 80031de:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <DMA_CheckFifoParam+0x70>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080031fb 	.word	0x080031fb
 80031ec:	080031f5 	.word	0x080031f5
 80031f0:	0800320d 	.word	0x0800320d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e030      	b.n	800325c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d025      	beq.n	8003252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320a:	e022      	b.n	8003252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003214:	d11f      	bne.n	8003256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800321a:	e01c      	b.n	8003256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d903      	bls.n	800322a <DMA_CheckFifoParam+0xb6>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d003      	beq.n	8003230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003228:	e018      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      break;
 800322e:	e015      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e00b      	b.n	800325a <DMA_CheckFifoParam+0xe6>
      break;
 8003242:	bf00      	nop
 8003244:	e00a      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e008      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e006      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e004      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;   
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800325a:	bf00      	nop
    }
  } 
  
  return status; 
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b80      	cmp	r3, #128	@ 0x80
 8003284:	d106      	bne.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f001 b911 	b.w	80044b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2240      	movs	r2, #64	@ 0x40
 80032b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f001 b8ff 	b.w	80044b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80032c2:	2302      	movs	r3, #2
 80032c4:	f001 b8f7 	b.w	80044b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f041 80e5 	bne.w	80044a8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80032fa:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f001 f910 	bl	8004530 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b8d      	ldr	r3, [pc, #564]	@ (800354c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d960      	bls.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a8b      	ldr	r2, [pc, #556]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d057      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8a      	ldr	r2, [pc, #552]	@ (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d050      	beq.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a88      	ldr	r2, [pc, #544]	@ (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d049      	beq.n	80033ce <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a87      	ldr	r2, [pc, #540]	@ (800355c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d042      	beq.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a85      	ldr	r2, [pc, #532]	@ (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03a      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a84      	ldr	r2, [pc, #528]	@ (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d032      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a82      	ldr	r2, [pc, #520]	@ (8003568 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02a      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a81      	ldr	r2, [pc, #516]	@ (800356c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d022      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7f      	ldr	r2, [pc, #508]	@ (8003570 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01a      	beq.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7e      	ldr	r2, [pc, #504]	@ (8003574 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d012      	beq.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7c      	ldr	r2, [pc, #496]	@ (8003578 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00a      	beq.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7b      	ldr	r2, [pc, #492]	@ (800357c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d102      	bne.n	800339a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003394:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003398:	e01e      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800339a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800339e:	e01b      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033a4:	e018      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033aa:	e015      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033b0:	e012      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033b6:	e00f      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033bc:	e00c      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033c2:	e009      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033c8:	e006      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033ca:	2320      	movs	r3, #32
 80033cc:	e004      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033ce:	2320      	movs	r3, #32
 80033d0:	e002      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033d2:	2320      	movs	r3, #32
 80033d4:	e000      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033d6:	2320      	movs	r3, #32
 80033d8:	4a69      	ldr	r2, [pc, #420]	@ (8003580 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80033da:	60d3      	str	r3, [r2, #12]
 80033dc:	e14f      	b.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b67      	ldr	r3, [pc, #412]	@ (8003584 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d960      	bls.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d057      	beq.n	80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a56      	ldr	r2, [pc, #344]	@ (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d050      	beq.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a55      	ldr	r2, [pc, #340]	@ (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d049      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a53      	ldr	r2, [pc, #332]	@ (800355c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d042      	beq.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a52      	ldr	r2, [pc, #328]	@ (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d03a      	beq.n	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a50      	ldr	r2, [pc, #320]	@ (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d032      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4f      	ldr	r2, [pc, #316]	@ (8003568 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02a      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a4d      	ldr	r2, [pc, #308]	@ (800356c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4c      	ldr	r2, [pc, #304]	@ (8003570 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01a      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4a      	ldr	r2, [pc, #296]	@ (8003574 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d012      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a49      	ldr	r2, [pc, #292]	@ (8003578 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00a      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a47      	ldr	r2, [pc, #284]	@ (800357c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d102      	bne.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003462:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003466:	e01e      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800346c:	e01b      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800346e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003472:	e018      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003474:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003478:	e015      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800347a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800347e:	e012      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003480:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003484:	e00f      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800348a:	e00c      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800348c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003490:	e009      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003496:	e006      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003498:	2320      	movs	r3, #32
 800349a:	e004      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800349c:	2320      	movs	r3, #32
 800349e:	e002      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034a0:	2320      	movs	r3, #32
 80034a2:	e000      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034a4:	2320      	movs	r3, #32
 80034a6:	4a36      	ldr	r2, [pc, #216]	@ (8003580 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	e0e8      	b.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f240 8082 	bls.w	80035be <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a24      	ldr	r2, [pc, #144]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d078      	beq.n	80035b6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d071      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	@ (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d06a      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d063      	beq.n	80035aa <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d05b      	beq.n	80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d053      	beq.n	800359e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d04b      	beq.n	8003598 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d043      	beq.n	8003592 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d03b      	beq.n	800358c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d012      	beq.n	8003544 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00a      	beq.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a13      	ldr	r2, [pc, #76]	@ (800357c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d102      	bne.n	8003538 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003532:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003536:	e03f      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003538:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800353c:	e03c      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800353e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003542:	e039      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003544:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003548:	e036      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800354a:	bf00      	nop
 800354c:	40026458 	.word	0x40026458
 8003550:	40026010 	.word	0x40026010
 8003554:	40026410 	.word	0x40026410
 8003558:	40026070 	.word	0x40026070
 800355c:	40026470 	.word	0x40026470
 8003560:	40026028 	.word	0x40026028
 8003564:	40026428 	.word	0x40026428
 8003568:	40026088 	.word	0x40026088
 800356c:	40026488 	.word	0x40026488
 8003570:	40026040 	.word	0x40026040
 8003574:	40026440 	.word	0x40026440
 8003578:	400260a0 	.word	0x400260a0
 800357c:	400264a0 	.word	0x400264a0
 8003580:	40026400 	.word	0x40026400
 8003584:	400260b8 	.word	0x400260b8
 8003588:	40026058 	.word	0x40026058
 800358c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003590:	e012      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003596:	e00f      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800359c:	e00c      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800359e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035a2:	e009      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035a8:	e006      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035aa:	2320      	movs	r3, #32
 80035ac:	e004      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035ae:	2320      	movs	r3, #32
 80035b0:	e002      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035b2:	2320      	movs	r3, #32
 80035b4:	e000      	b.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035b6:	2320      	movs	r3, #32
 80035b8:	4a8c      	ldr	r2, [pc, #560]	@ (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80035ba:	60d3      	str	r3, [r2, #12]
 80035bc:	e05f      	b.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a8b      	ldr	r2, [pc, #556]	@ (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d057      	beq.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a89      	ldr	r2, [pc, #548]	@ (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d050      	beq.n	8003674 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a88      	ldr	r2, [pc, #544]	@ (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d049      	beq.n	8003670 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a86      	ldr	r2, [pc, #536]	@ (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d042      	beq.n	800366c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a85      	ldr	r2, [pc, #532]	@ (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d03a      	beq.n	8003666 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a83      	ldr	r2, [pc, #524]	@ (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d032      	beq.n	8003660 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a82      	ldr	r2, [pc, #520]	@ (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02a      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a80      	ldr	r2, [pc, #512]	@ (800380c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7f      	ldr	r2, [pc, #508]	@ (8003810 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01a      	beq.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7d      	ldr	r2, [pc, #500]	@ (8003814 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d012      	beq.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7c      	ldr	r2, [pc, #496]	@ (8003818 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00a      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7a      	ldr	r2, [pc, #488]	@ (800381c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d102      	bne.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8003636:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800363a:	e01e      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800363c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003640:	e01b      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003642:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003646:	e018      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003648:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800364c:	e015      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800364e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003652:	e012      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003654:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003658:	e00f      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800365a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800365e:	e00c      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003664:	e009      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003666:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800366a:	e006      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800366c:	2320      	movs	r3, #32
 800366e:	e004      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003670:	2320      	movs	r3, #32
 8003672:	e002      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003674:	2320      	movs	r3, #32
 8003676:	e000      	b.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003678:	2320      	movs	r3, #32
 800367a:	4a5c      	ldr	r2, [pc, #368]	@ (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800367c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4b66      	ldr	r3, [pc, #408]	@ (8003820 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003686:	429a      	cmp	r2, r3
 8003688:	d960      	bls.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d057      	beq.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a56      	ldr	r2, [pc, #344]	@ (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d050      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a55      	ldr	r2, [pc, #340]	@ (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d049      	beq.n	800373c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a53      	ldr	r2, [pc, #332]	@ (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d042      	beq.n	8003738 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03a      	beq.n	8003732 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a50      	ldr	r2, [pc, #320]	@ (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d032      	beq.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d02a      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4d      	ldr	r2, [pc, #308]	@ (800380c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4c      	ldr	r2, [pc, #304]	@ (8003810 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01a      	beq.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003814 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d012      	beq.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a49      	ldr	r2, [pc, #292]	@ (8003818 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00a      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a47      	ldr	r2, [pc, #284]	@ (800381c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d102      	bne.n	8003708 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003702:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003706:	e01e      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003708:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800370c:	e01b      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800370e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003712:	e018      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003714:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003718:	e015      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800371a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800371e:	e012      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003724:	e00f      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800372a:	e00c      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800372c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003730:	e009      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003736:	e006      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003738:	2310      	movs	r3, #16
 800373a:	e004      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800373c:	2310      	movs	r3, #16
 800373e:	e002      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003740:	2310      	movs	r3, #16
 8003742:	e000      	b.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003744:	2310      	movs	r3, #16
 8003746:	4a37      	ldr	r2, [pc, #220]	@ (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003748:	60d3      	str	r3, [r2, #12]
 800374a:	e14f      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b35      	ldr	r3, [pc, #212]	@ (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003754:	429a      	cmp	r2, r3
 8003756:	f240 8082 	bls.w	800385e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d078      	beq.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d071      	beq.n	8003852 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d06a      	beq.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d063      	beq.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d05b      	beq.n	8003844 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1c      	ldr	r2, [pc, #112]	@ (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d053      	beq.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04b      	beq.n	8003838 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d043      	beq.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d03b      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d012      	beq.n	80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00a      	beq.n	80037de <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	@ (800381c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d102      	bne.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80037d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037d6:	e03f      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80037d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037dc:	e03c      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80037de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037e2:	e039      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80037e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037e8:	e036      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80037ea:	bf00      	nop
 80037ec:	40026000 	.word	0x40026000
 80037f0:	40026010 	.word	0x40026010
 80037f4:	40026410 	.word	0x40026410
 80037f8:	40026070 	.word	0x40026070
 80037fc:	40026470 	.word	0x40026470
 8003800:	40026028 	.word	0x40026028
 8003804:	40026428 	.word	0x40026428
 8003808:	40026088 	.word	0x40026088
 800380c:	40026488 	.word	0x40026488
 8003810:	40026040 	.word	0x40026040
 8003814:	40026440 	.word	0x40026440
 8003818:	400260a0 	.word	0x400260a0
 800381c:	400264a0 	.word	0x400264a0
 8003820:	40026458 	.word	0x40026458
 8003824:	40026400 	.word	0x40026400
 8003828:	400260b8 	.word	0x400260b8
 800382c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003830:	e012      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003836:	e00f      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800383c:	e00c      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800383e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003842:	e009      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003848:	e006      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800384a:	2310      	movs	r3, #16
 800384c:	e004      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800384e:	2310      	movs	r3, #16
 8003850:	e002      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003852:	2310      	movs	r3, #16
 8003854:	e000      	b.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003856:	2310      	movs	r3, #16
 8003858:	4a8c      	ldr	r2, [pc, #560]	@ (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	e0c6      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b8a      	ldr	r3, [pc, #552]	@ (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003866:	429a      	cmp	r2, r3
 8003868:	d960      	bls.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a89      	ldr	r2, [pc, #548]	@ (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d057      	beq.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a87      	ldr	r2, [pc, #540]	@ (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d050      	beq.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a86      	ldr	r2, [pc, #536]	@ (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d049      	beq.n	800391c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a84      	ldr	r2, [pc, #528]	@ (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d042      	beq.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a83      	ldr	r2, [pc, #524]	@ (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d03a      	beq.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a81      	ldr	r2, [pc, #516]	@ (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d032      	beq.n	800390c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a80      	ldr	r2, [pc, #512]	@ (8003aac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d02a      	beq.n	8003906 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01a      	beq.n	80038fa <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d012      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7a      	ldr	r2, [pc, #488]	@ (8003abc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00a      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a78      	ldr	r2, [pc, #480]	@ (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d102      	bne.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80038e2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038e6:	e01e      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80038e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80038ec:	e01b      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80038ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038f2:	e018      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80038f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038f8:	e015      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80038fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038fe:	e012      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003904:	e00f      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800390a:	e00c      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800390c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003910:	e009      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003916:	e006      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003918:	2310      	movs	r3, #16
 800391a:	e004      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800391c:	2310      	movs	r3, #16
 800391e:	e002      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003920:	2310      	movs	r3, #16
 8003922:	e000      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003924:	2310      	movs	r3, #16
 8003926:	4a67      	ldr	r2, [pc, #412]	@ (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	e05f      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a58      	ldr	r2, [pc, #352]	@ (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d057      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a57      	ldr	r2, [pc, #348]	@ (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d050      	beq.n	80039e2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a55      	ldr	r2, [pc, #340]	@ (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d049      	beq.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a54      	ldr	r2, [pc, #336]	@ (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d042      	beq.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03a      	beq.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a51      	ldr	r2, [pc, #324]	@ (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d032      	beq.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a4f      	ldr	r2, [pc, #316]	@ (8003aac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02a      	beq.n	80039c8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01a      	beq.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d012      	beq.n	80039b6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a49      	ldr	r2, [pc, #292]	@ (8003abc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00a      	beq.n	80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80039a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039a8:	e01e      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039ae:	e01b      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039b4:	e018      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039ba:	e015      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039c0:	e012      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039c6:	e00f      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039cc:	e00c      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039d2:	e009      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039d8:	e006      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039da:	2310      	movs	r3, #16
 80039dc:	e004      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039de:	2310      	movs	r3, #16
 80039e0:	e002      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039e2:	2310      	movs	r3, #16
 80039e4:	e000      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039e6:	2310      	movs	r3, #16
 80039e8:	4a36      	ldr	r2, [pc, #216]	@ (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80039ea:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b35      	ldr	r3, [pc, #212]	@ (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f240 8082 	bls.w	8003afe <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a25      	ldr	r2, [pc, #148]	@ (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d078      	beq.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a23      	ldr	r2, [pc, #140]	@ (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d071      	beq.n	8003af2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a22      	ldr	r2, [pc, #136]	@ (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d06a      	beq.n	8003aee <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d063      	beq.n	8003aea <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d05b      	beq.n	8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d053      	beq.n	8003ade <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04b      	beq.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d043      	beq.n	8003ad2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d03b      	beq.n	8003acc <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d012      	beq.n	8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00a      	beq.n	8003a7e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d102      	bne.n	8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003a72:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003a76:	e03f      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a7c:	e03c      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003a7e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003a82:	e039      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003a84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003a88:	e036      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003a8a:	bf00      	nop
 8003a8c:	40026400 	.word	0x40026400
 8003a90:	40026058 	.word	0x40026058
 8003a94:	40026010 	.word	0x40026010
 8003a98:	40026410 	.word	0x40026410
 8003a9c:	40026070 	.word	0x40026070
 8003aa0:	40026470 	.word	0x40026470
 8003aa4:	40026028 	.word	0x40026028
 8003aa8:	40026428 	.word	0x40026428
 8003aac:	40026088 	.word	0x40026088
 8003ab0:	40026488 	.word	0x40026488
 8003ab4:	40026040 	.word	0x40026040
 8003ab8:	40026440 	.word	0x40026440
 8003abc:	400260a0 	.word	0x400260a0
 8003ac0:	400264a0 	.word	0x400264a0
 8003ac4:	40026000 	.word	0x40026000
 8003ac8:	40026458 	.word	0x40026458
 8003acc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ad0:	e012      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ad6:	e00f      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003adc:	e00c      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ae2:	e009      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ae8:	e006      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003aea:	2308      	movs	r3, #8
 8003aec:	e004      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003aee:	2308      	movs	r3, #8
 8003af0:	e002      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003af2:	2308      	movs	r3, #8
 8003af4:	e000      	b.n	8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003af6:	2308      	movs	r3, #8
 8003af8:	4a8c      	ldr	r2, [pc, #560]	@ (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e14e      	b.n	8003d9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b8a      	ldr	r3, [pc, #552]	@ (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d960      	bls.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a89      	ldr	r2, [pc, #548]	@ (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d057      	beq.n	8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a87      	ldr	r2, [pc, #540]	@ (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d050      	beq.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a86      	ldr	r2, [pc, #536]	@ (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d049      	beq.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a84      	ldr	r2, [pc, #528]	@ (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d042      	beq.n	8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a83      	ldr	r2, [pc, #524]	@ (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03a      	beq.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a81      	ldr	r2, [pc, #516]	@ (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d032      	beq.n	8003bac <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a80      	ldr	r2, [pc, #512]	@ (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02a      	beq.n	8003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7e      	ldr	r2, [pc, #504]	@ (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01a      	beq.n	8003b9a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a7b      	ldr	r2, [pc, #492]	@ (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d012      	beq.n	8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7a      	ldr	r2, [pc, #488]	@ (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00a      	beq.n	8003b8e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a78      	ldr	r2, [pc, #480]	@ (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d102      	bne.n	8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003b82:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b86:	e01e      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b8c:	e01b      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003b8e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b92:	e018      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003b94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b98:	e015      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003b9a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b9e:	e012      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ba4:	e00f      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003baa:	e00c      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb0:	e009      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb6:	e006      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	e004      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	e002      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	e000      	b.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	4a59      	ldr	r2, [pc, #356]	@ (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003bc8:	6093      	str	r3, [r2, #8]
 8003bca:	e0e7      	b.n	8003d9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b64      	ldr	r3, [pc, #400]	@ (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d960      	bls.n	8003c9a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a55      	ldr	r2, [pc, #340]	@ (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d057      	beq.n	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a54      	ldr	r2, [pc, #336]	@ (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d050      	beq.n	8003c8e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	@ (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d049      	beq.n	8003c8a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a51      	ldr	r2, [pc, #324]	@ (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d042      	beq.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a4f      	ldr	r2, [pc, #316]	@ (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d03a      	beq.n	8003c80 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d032      	beq.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02a      	beq.n	8003c74 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a49      	ldr	r2, [pc, #292]	@ (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01a      	beq.n	8003c68 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a48      	ldr	r2, [pc, #288]	@ (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d012      	beq.n	8003c62 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a46      	ldr	r2, [pc, #280]	@ (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00a      	beq.n	8003c5c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a45      	ldr	r2, [pc, #276]	@ (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d102      	bne.n	8003c56 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003c50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c54:	e01e      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c5a:	e01b      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c60:	e018      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c62:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c66:	e015      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c6c:	e012      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c72:	e00f      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c78:	e00c      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c7e:	e009      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c84:	e006      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c86:	2308      	movs	r3, #8
 8003c88:	e004      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e002      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	e000      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c92:	2308      	movs	r3, #8
 8003c94:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e080      	b.n	8003d9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a25      	ldr	r2, [pc, #148]	@ (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d078      	beq.n	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	@ (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d071      	beq.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d06a      	beq.n	8003d8e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	@ (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d063      	beq.n	8003d8a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d05b      	beq.n	8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d053      	beq.n	8003d7e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04b      	beq.n	8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d043      	beq.n	8003d72 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a19      	ldr	r2, [pc, #100]	@ (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a17      	ldr	r2, [pc, #92]	@ (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00a      	beq.n	8003d1e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	@ (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d102      	bne.n	8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003d12:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d16:	e03f      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1c:	e03c      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d1e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d22:	e039      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d28:	e036      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d2a:	bf00      	nop
 8003d2c:	40026400 	.word	0x40026400
 8003d30:	400260b8 	.word	0x400260b8
 8003d34:	40026010 	.word	0x40026010
 8003d38:	40026410 	.word	0x40026410
 8003d3c:	40026070 	.word	0x40026070
 8003d40:	40026470 	.word	0x40026470
 8003d44:	40026028 	.word	0x40026028
 8003d48:	40026428 	.word	0x40026428
 8003d4c:	40026088 	.word	0x40026088
 8003d50:	40026488 	.word	0x40026488
 8003d54:	40026040 	.word	0x40026040
 8003d58:	40026440 	.word	0x40026440
 8003d5c:	400260a0 	.word	0x400260a0
 8003d60:	400264a0 	.word	0x400264a0
 8003d64:	40026058 	.word	0x40026058
 8003d68:	40026000 	.word	0x40026000
 8003d6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d70:	e012      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d76:	e00f      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d7c:	e00c      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d82:	e009      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d88:	e006      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	e004      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d8e:	2308      	movs	r3, #8
 8003d90:	e002      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d92:	2308      	movs	r3, #8
 8003d94:	e000      	b.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d96:	2308      	movs	r3, #8
 8003d98:	4a8a      	ldr	r2, [pc, #552]	@ (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003d9a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b89      	ldr	r3, [pc, #548]	@ (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d960      	bls.n	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a87      	ldr	r2, [pc, #540]	@ (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d057      	beq.n	8003e62 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a86      	ldr	r2, [pc, #536]	@ (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d050      	beq.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a84      	ldr	r2, [pc, #528]	@ (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d049      	beq.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a83      	ldr	r2, [pc, #524]	@ (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d042      	beq.n	8003e56 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a81      	ldr	r2, [pc, #516]	@ (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d03a      	beq.n	8003e50 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a80      	ldr	r2, [pc, #512]	@ (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d032      	beq.n	8003e4a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d02a      	beq.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7d      	ldr	r2, [pc, #500]	@ (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7b      	ldr	r2, [pc, #492]	@ (8003fec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01a      	beq.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7a      	ldr	r2, [pc, #488]	@ (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d012      	beq.n	8003e32 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a78      	ldr	r2, [pc, #480]	@ (8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00a      	beq.n	8003e2c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a77      	ldr	r2, [pc, #476]	@ (8003ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d102      	bne.n	8003e26 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003e20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e24:	e01e      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e2a:	e01b      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e30:	e018      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e32:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e36:	e015      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e3c:	e012      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e42:	e00f      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e48:	e00c      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e4e:	e009      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e54:	e006      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e004      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	e002      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e000      	b.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e62:	2304      	movs	r3, #4
 8003e64:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e150      	b.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d960      	bls.n	8003f38 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a54      	ldr	r2, [pc, #336]	@ (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d057      	beq.n	8003f30 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a52      	ldr	r2, [pc, #328]	@ (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d050      	beq.n	8003f2c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a51      	ldr	r2, [pc, #324]	@ (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d049      	beq.n	8003f28 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d042      	beq.n	8003f24 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	@ (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d03a      	beq.n	8003f1e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d032      	beq.n	8003f18 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02a      	beq.n	8003f12 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a49      	ldr	r2, [pc, #292]	@ (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a48      	ldr	r2, [pc, #288]	@ (8003fec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d01a      	beq.n	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a46      	ldr	r2, [pc, #280]	@ (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d012      	beq.n	8003f00 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a45      	ldr	r2, [pc, #276]	@ (8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00a      	beq.n	8003efa <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a43      	ldr	r2, [pc, #268]	@ (8003ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d102      	bne.n	8003ef4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003eee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ef2:	e01e      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef8:	e01b      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003efa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003efe:	e018      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f00:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f04:	e015      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f06:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f0a:	e012      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f10:	e00f      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f16:	e00c      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1c:	e009      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f22:	e006      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e004      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e002      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e000      	b.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f30:	2304      	movs	r3, #4
 8003f32:	4a32      	ldr	r2, [pc, #200]	@ (8003ffc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	e0e9      	b.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b31      	ldr	r3, [pc, #196]	@ (8004004 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	f240 8083 	bls.w	800404c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d079      	beq.n	8004044 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d072      	beq.n	8004040 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d06b      	beq.n	800403c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d064      	beq.n	8004038 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	@ (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d05c      	beq.n	8004032 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d054      	beq.n	800402c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04c      	beq.n	8004026 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d044      	beq.n	8004020 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d03c      	beq.n	800401a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d034      	beq.n	8004014 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d124      	bne.n	8004008 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003fbe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fc2:	e040      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003fc4:	40026000 	.word	0x40026000
 8003fc8:	40026458 	.word	0x40026458
 8003fcc:	40026010 	.word	0x40026010
 8003fd0:	40026410 	.word	0x40026410
 8003fd4:	40026070 	.word	0x40026070
 8003fd8:	40026470 	.word	0x40026470
 8003fdc:	40026028 	.word	0x40026028
 8003fe0:	40026428 	.word	0x40026428
 8003fe4:	40026088 	.word	0x40026088
 8003fe8:	40026488 	.word	0x40026488
 8003fec:	40026040 	.word	0x40026040
 8003ff0:	40026440 	.word	0x40026440
 8003ff4:	400260a0 	.word	0x400260a0
 8003ff8:	400264a0 	.word	0x400264a0
 8003ffc:	40026400 	.word	0x40026400
 8004000:	400260b8 	.word	0x400260b8
 8004004:	40026058 	.word	0x40026058
 8004008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800400c:	e01b      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800400e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004012:	e018      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004014:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004018:	e015      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800401a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800401e:	e012      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004024:	e00f      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800402a:	e00c      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800402c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004030:	e009      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004036:	e006      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004038:	2304      	movs	r3, #4
 800403a:	e004      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800403c:	2304      	movs	r3, #4
 800403e:	e002      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004040:	2304      	movs	r3, #4
 8004042:	e000      	b.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004044:	2304      	movs	r3, #4
 8004046:	4a8b      	ldr	r2, [pc, #556]	@ (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004048:	60d3      	str	r3, [r2, #12]
 800404a:	e05f      	b.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a89      	ldr	r2, [pc, #548]	@ (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d057      	beq.n	8004106 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a88      	ldr	r2, [pc, #544]	@ (800427c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d050      	beq.n	8004102 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a86      	ldr	r2, [pc, #536]	@ (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d049      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a85      	ldr	r2, [pc, #532]	@ (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d042      	beq.n	80040fa <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a83      	ldr	r2, [pc, #524]	@ (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03a      	beq.n	80040f4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a82      	ldr	r2, [pc, #520]	@ (800428c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d032      	beq.n	80040ee <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a80      	ldr	r2, [pc, #512]	@ (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02a      	beq.n	80040e8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7f      	ldr	r2, [pc, #508]	@ (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01a      	beq.n	80040dc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7c      	ldr	r2, [pc, #496]	@ (800429c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d012      	beq.n	80040d6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7a      	ldr	r2, [pc, #488]	@ (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00a      	beq.n	80040d0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a79      	ldr	r2, [pc, #484]	@ (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d102      	bne.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80040c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040c8:	e01e      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ce:	e01b      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040d4:	e018      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040da:	e015      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040e0:	e012      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040e6:	e00f      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ec:	e00c      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f2:	e009      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f8:	e006      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e004      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80040fe:	2304      	movs	r3, #4
 8004100:	e002      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004102:	2304      	movs	r3, #4
 8004104:	e000      	b.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004106:	2304      	movs	r3, #4
 8004108:	4a5a      	ldr	r2, [pc, #360]	@ (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800410a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b65      	ldr	r3, [pc, #404]	@ (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d95c      	bls.n	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a56      	ldr	r2, [pc, #344]	@ (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d053      	beq.n	80041ca <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a55      	ldr	r2, [pc, #340]	@ (800427c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d04c      	beq.n	80041c6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a53      	ldr	r2, [pc, #332]	@ (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d045      	beq.n	80041c2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a52      	ldr	r2, [pc, #328]	@ (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d03e      	beq.n	80041be <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a50      	ldr	r2, [pc, #320]	@ (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d037      	beq.n	80041ba <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4f      	ldr	r2, [pc, #316]	@ (800428c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d030      	beq.n	80041b6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a4d      	ldr	r2, [pc, #308]	@ (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d029      	beq.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4c      	ldr	r2, [pc, #304]	@ (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01a      	beq.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a49      	ldr	r2, [pc, #292]	@ (800429c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d012      	beq.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a47      	ldr	r2, [pc, #284]	@ (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00a      	beq.n	800419c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a46      	ldr	r2, [pc, #280]	@ (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d102      	bne.n	8004196 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004190:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004194:	e01a      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004196:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800419a:	e017      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800419c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041a0:	e014      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041a6:	e011      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041ac:	e00e      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ae:	2340      	movs	r3, #64	@ 0x40
 80041b0:	e00c      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041b2:	2340      	movs	r3, #64	@ 0x40
 80041b4:	e00a      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041b6:	2340      	movs	r3, #64	@ 0x40
 80041b8:	e008      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ba:	2340      	movs	r3, #64	@ 0x40
 80041bc:	e006      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041be:	2301      	movs	r3, #1
 80041c0:	e004      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e002      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4a37      	ldr	r2, [pc, #220]	@ (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80041ce:	60d3      	str	r3, [r2, #12]
 80041d0:	e141      	b.n	8004456 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b35      	ldr	r3, [pc, #212]	@ (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80041da:	429a      	cmp	r2, r3
 80041dc:	d97c      	bls.n	80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a25      	ldr	r2, [pc, #148]	@ (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d073      	beq.n	80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a23      	ldr	r2, [pc, #140]	@ (800427c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d06c      	beq.n	80042cc <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a22      	ldr	r2, [pc, #136]	@ (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d065      	beq.n	80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a20      	ldr	r2, [pc, #128]	@ (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d05e      	beq.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d057      	beq.n	80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d050      	beq.n	80042bc <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d049      	beq.n	80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d042      	beq.n	80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01a      	beq.n	800426e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	@ (800429c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d012      	beq.n	8004268 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00a      	beq.n	8004262 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d102      	bne.n	800425c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8004256:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800425a:	e03a      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800425c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004260:	e037      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004266:	e034      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800426c:	e031      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800426e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004272:	e02e      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004274:	40026000 	.word	0x40026000
 8004278:	40026010 	.word	0x40026010
 800427c:	40026410 	.word	0x40026410
 8004280:	40026070 	.word	0x40026070
 8004284:	40026470 	.word	0x40026470
 8004288:	40026028 	.word	0x40026028
 800428c:	40026428 	.word	0x40026428
 8004290:	40026088 	.word	0x40026088
 8004294:	40026488 	.word	0x40026488
 8004298:	40026040 	.word	0x40026040
 800429c:	40026440 	.word	0x40026440
 80042a0:	400260a0 	.word	0x400260a0
 80042a4:	400264a0 	.word	0x400264a0
 80042a8:	40026458 	.word	0x40026458
 80042ac:	40026400 	.word	0x40026400
 80042b0:	400260b8 	.word	0x400260b8
 80042b4:	2340      	movs	r3, #64	@ 0x40
 80042b6:	e00c      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042b8:	2340      	movs	r3, #64	@ 0x40
 80042ba:	e00a      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042bc:	2340      	movs	r3, #64	@ 0x40
 80042be:	e008      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042c0:	2340      	movs	r3, #64	@ 0x40
 80042c2:	e006      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e004      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e002      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4a7b      	ldr	r2, [pc, #492]	@ (80044c0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80042d4:	6093      	str	r3, [r2, #8]
 80042d6:	e0be      	b.n	8004456 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4b79      	ldr	r3, [pc, #484]	@ (80044c4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d95c      	bls.n	800439e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a77      	ldr	r2, [pc, #476]	@ (80044c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d053      	beq.n	8004396 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a76      	ldr	r2, [pc, #472]	@ (80044cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04c      	beq.n	8004392 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a74      	ldr	r2, [pc, #464]	@ (80044d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d045      	beq.n	800438e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a73      	ldr	r2, [pc, #460]	@ (80044d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d03e      	beq.n	800438a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a71      	ldr	r2, [pc, #452]	@ (80044d8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d037      	beq.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a70      	ldr	r2, [pc, #448]	@ (80044dc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d030      	beq.n	8004382 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d029      	beq.n	800437e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6d      	ldr	r2, [pc, #436]	@ (80044e4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6b      	ldr	r2, [pc, #428]	@ (80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01a      	beq.n	8004374 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d012      	beq.n	800436e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00a      	beq.n	8004368 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a67      	ldr	r2, [pc, #412]	@ (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d102      	bne.n	8004362 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800435c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004360:	e01a      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004362:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004366:	e017      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800436c:	e014      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800436e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004372:	e011      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004378:	e00e      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800437a:	2340      	movs	r3, #64	@ 0x40
 800437c:	e00c      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800437e:	2340      	movs	r3, #64	@ 0x40
 8004380:	e00a      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004382:	2340      	movs	r3, #64	@ 0x40
 8004384:	e008      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004386:	2340      	movs	r3, #64	@ 0x40
 8004388:	e006      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800438a:	2301      	movs	r3, #1
 800438c:	e004      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800438e:	2301      	movs	r3, #1
 8004390:	e002      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004396:	2301      	movs	r3, #1
 8004398:	4a57      	ldr	r2, [pc, #348]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e05b      	b.n	8004456 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a49      	ldr	r2, [pc, #292]	@ (80044c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d053      	beq.n	8004450 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a47      	ldr	r2, [pc, #284]	@ (80044cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04c      	beq.n	800444c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a46      	ldr	r2, [pc, #280]	@ (80044d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a44      	ldr	r2, [pc, #272]	@ (80044d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03e      	beq.n	8004444 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a43      	ldr	r2, [pc, #268]	@ (80044d8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d037      	beq.n	8004440 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a41      	ldr	r2, [pc, #260]	@ (80044dc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d030      	beq.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d029      	beq.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3e      	ldr	r2, [pc, #248]	@ (80044e4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a3d      	ldr	r2, [pc, #244]	@ (80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01a      	beq.n	800442e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3b      	ldr	r2, [pc, #236]	@ (80044ec <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d012      	beq.n	8004428 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00a      	beq.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d102      	bne.n	800441c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8004416:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800441a:	e01a      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800441c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004420:	e017      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004426:	e014      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800442c:	e011      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800442e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004432:	e00e      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004434:	2340      	movs	r3, #64	@ 0x40
 8004436:	e00c      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004438:	2340      	movs	r3, #64	@ 0x40
 800443a:	e00a      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800443c:	2340      	movs	r3, #64	@ 0x40
 800443e:	e008      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004440:	2340      	movs	r3, #64	@ 0x40
 8004442:	e006      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004444:	2301      	movs	r3, #1
 8004446:	e004      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004448:	2301      	movs	r3, #1
 800444a:	e002      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004450:	2301      	movs	r3, #1
 8004452:	4a29      	ldr	r2, [pc, #164]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004454:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0216 	orr.w	r2, r2, #22
 8004464:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004474:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0208 	orr.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e005      	b.n	80044b4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
 80044b2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40026400 	.word	0x40026400
 80044c4:	40026058 	.word	0x40026058
 80044c8:	40026010 	.word	0x40026010
 80044cc:	40026410 	.word	0x40026410
 80044d0:	40026070 	.word	0x40026070
 80044d4:	40026470 	.word	0x40026470
 80044d8:	40026028 	.word	0x40026028
 80044dc:	40026428 	.word	0x40026428
 80044e0:	40026088 	.word	0x40026088
 80044e4:	40026488 	.word	0x40026488
 80044e8:	40026040 	.word	0x40026040
 80044ec:	40026440 	.word	0x40026440
 80044f0:	400260a0 	.word	0x400260a0
 80044f4:	400264a0 	.word	0x400264a0
 80044f8:	40026000 	.word	0x40026000

080044fc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e003      	b.n	8004522 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d108      	bne.n	8004560 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800455e:	e007      	b.n	8004570 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	@ 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e16b      	b.n	8004870 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f040 815a 	bne.w	800486a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d005      	beq.n	80045ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d130      	bne.n	8004630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004604:	2201      	movs	r2, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 0201 	and.w	r2, r3, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b03      	cmp	r3, #3
 800463a:	d017      	beq.n	800466c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d123      	bne.n	80046c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	08da      	lsrs	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3208      	adds	r2, #8
 8004680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	08da      	lsrs	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3208      	adds	r2, #8
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	2203      	movs	r2, #3
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0203 	and.w	r2, r3, #3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80b4 	beq.w	800486a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	4b60      	ldr	r3, [pc, #384]	@ (8004888 <HAL_GPIO_Init+0x30c>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	4a5f      	ldr	r2, [pc, #380]	@ (8004888 <HAL_GPIO_Init+0x30c>)
 800470c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004710:	6453      	str	r3, [r2, #68]	@ 0x44
 8004712:	4b5d      	ldr	r3, [pc, #372]	@ (8004888 <HAL_GPIO_Init+0x30c>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800471e:	4a5b      	ldr	r2, [pc, #364]	@ (800488c <HAL_GPIO_Init+0x310>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <HAL_GPIO_Init+0x314>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d02b      	beq.n	80047a2 <HAL_GPIO_Init+0x226>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a51      	ldr	r2, [pc, #324]	@ (8004894 <HAL_GPIO_Init+0x318>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d025      	beq.n	800479e <HAL_GPIO_Init+0x222>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a50      	ldr	r2, [pc, #320]	@ (8004898 <HAL_GPIO_Init+0x31c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01f      	beq.n	800479a <HAL_GPIO_Init+0x21e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4f      	ldr	r2, [pc, #316]	@ (800489c <HAL_GPIO_Init+0x320>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d019      	beq.n	8004796 <HAL_GPIO_Init+0x21a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a4e      	ldr	r2, [pc, #312]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_GPIO_Init+0x216>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4d      	ldr	r2, [pc, #308]	@ (80048a4 <HAL_GPIO_Init+0x328>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00d      	beq.n	800478e <HAL_GPIO_Init+0x212>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a4c      	ldr	r2, [pc, #304]	@ (80048a8 <HAL_GPIO_Init+0x32c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <HAL_GPIO_Init+0x20e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a4b      	ldr	r2, [pc, #300]	@ (80048ac <HAL_GPIO_Init+0x330>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_GPIO_Init+0x20a>
 8004782:	2307      	movs	r3, #7
 8004784:	e00e      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 8004786:	2308      	movs	r3, #8
 8004788:	e00c      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 800478a:	2306      	movs	r3, #6
 800478c:	e00a      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 800478e:	2305      	movs	r3, #5
 8004790:	e008      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 8004792:	2304      	movs	r3, #4
 8004794:	e006      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 8004796:	2303      	movs	r3, #3
 8004798:	e004      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 800479a:	2302      	movs	r3, #2
 800479c:	e002      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_GPIO_Init+0x228>
 80047a2:	2300      	movs	r3, #0
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	f002 0203 	and.w	r2, r2, #3
 80047aa:	0092      	lsls	r2, r2, #2
 80047ac:	4093      	lsls	r3, r2
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b4:	4935      	ldr	r1, [pc, #212]	@ (800488c <HAL_GPIO_Init+0x310>)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	3302      	adds	r3, #2
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047c2:	4b3b      	ldr	r3, [pc, #236]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047e6:	4a32      	ldr	r2, [pc, #200]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047ec:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004810:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004816:	4b26      	ldr	r3, [pc, #152]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800483a:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004840:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004864:	4a12      	ldr	r2, [pc, #72]	@ (80048b0 <HAL_GPIO_Init+0x334>)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3301      	adds	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b0f      	cmp	r3, #15
 8004874:	f67f ae90 	bls.w	8004598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	3724      	adds	r7, #36	@ 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	40013800 	.word	0x40013800
 8004890:	40020000 	.word	0x40020000
 8004894:	40020400 	.word	0x40020400
 8004898:	40020800 	.word	0x40020800
 800489c:	40020c00 	.word	0x40020c00
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40021400 	.word	0x40021400
 80048a8:	40021800 	.word	0x40021800
 80048ac:	40021c00 	.word	0x40021c00
 80048b0:	40013c00 	.word	0x40013c00

080048b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
 80048c0:	4613      	mov	r3, r2
 80048c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048c4:	787b      	ldrb	r3, [r7, #1]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048d0:	e003      	b.n	80048da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	041a      	lsls	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	619a      	str	r2, [r3, #24]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e12b      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fb0c 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	@ 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800493a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800494a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800494c:	f000 fde8 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a81      	ldr	r2, [pc, #516]	@ (8004b5c <HAL_I2C_Init+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a80      	ldr	r2, [pc, #512]	@ (8004b60 <HAL_I2C_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x92>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b64 <HAL_I2C_Init+0x27c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0e7      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a78      	ldr	r2, [pc, #480]	@ (8004b68 <HAL_I2C_Init+0x280>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_I2C_Init+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xd4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xe8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a69      	ldr	r2, [pc, #420]	@ (8004b6c <HAL_I2C_Init+0x284>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	495c      	ldr	r1, [pc, #368]	@ (8004b5c <HAL_I2C_Init+0x274>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d819      	bhi.n	8004a24 <HAL_I2C_Init+0x13c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a04:	400b      	ands	r3, r1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_I2C_Init+0x138>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	e051      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e04f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_I2C_Init+0x168>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_I2C_Init+0x18e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x196>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e022      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_I2C_Init+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e58      	subs	r0, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6911      	ldr	r1, [r2, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	000186a0 	.word	0x000186a0
 8004b60:	001e847f 	.word	0x001e847f
 8004b64:	003d08ff 	.word	0x003d08ff
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e267      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d075      	beq.n	8004c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b8e:	4b88      	ldr	r3, [pc, #544]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b85      	ldr	r3, [pc, #532]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b82      	ldr	r3, [pc, #520]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05b      	beq.n	8004c78 <HAL_RCC_OscConfig+0x108>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d157      	bne.n	8004c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e242      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCC_OscConfig+0x74>
 8004bd6:	4b76      	ldr	r3, [pc, #472]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a75      	ldr	r2, [pc, #468]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xb0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x98>
 8004bee:	4b70      	ldr	r3, [pc, #448]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6f      	ldr	r2, [pc, #444]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6c      	ldr	r2, [pc, #432]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xb0>
 8004c08:	4b69      	ldr	r3, [pc, #420]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b66      	ldr	r3, [pc, #408]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a65      	ldr	r2, [pc, #404]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7fd fc0a 	bl	8002440 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fd fc06 	bl	8002440 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e207      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b5b      	ldr	r3, [pc, #364]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xc0>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd fbf6 	bl	8002440 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fd fbf2 	bl	8002440 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	@ 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1f3      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b51      	ldr	r3, [pc, #324]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0xe8>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d063      	beq.n	8004d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c86:	4b4a      	ldr	r3, [pc, #296]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c92:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9e:	4b44      	ldr	r3, [pc, #272]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d116      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004caa:	4b41      	ldr	r3, [pc, #260]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x152>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e1c7      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4937      	ldr	r1, [pc, #220]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	e03a      	b.n	8004d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fbab 	bl	8002440 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fd fba7 	bl	8002440 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e1a8      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0c:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4925      	ldr	r1, [pc, #148]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]
 8004d20:	e015      	b.n	8004d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d28:	f7fd fb8a 	bl	8002440 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d30:	f7fd fb86 	bl	8002440 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e187      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d036      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_RCC_OscConfig+0x248>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd fb6a 	bl	8002440 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d70:	f7fd fb66 	bl	8002440 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e167      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_OscConfig+0x240>)
 8004d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x200>
 8004d8e:	e01b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d90:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <HAL_RCC_OscConfig+0x248>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fd fb53 	bl	8002440 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9c:	e00e      	b.n	8004dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fd fb4f 	bl	8002440 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d907      	bls.n	8004dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e150      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	42470000 	.word	0x42470000
 8004db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ea      	bne.n	8004d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8097 	beq.w	8004f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b81      	ldr	r3, [pc, #516]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e06:	4b77      	ldr	r3, [pc, #476]	@ (8004fe4 <HAL_RCC_OscConfig+0x474>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d118      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e12:	4b74      	ldr	r3, [pc, #464]	@ (8004fe4 <HAL_RCC_OscConfig+0x474>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a73      	ldr	r2, [pc, #460]	@ (8004fe4 <HAL_RCC_OscConfig+0x474>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fb0f 	bl	8002440 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e26:	f7fd fb0b 	bl	8002440 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e10c      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <HAL_RCC_OscConfig+0x474>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x2ea>
 8004e4c:	4b64      	ldr	r3, [pc, #400]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e50:	4a63      	ldr	r2, [pc, #396]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e58:	e01c      	b.n	8004e94 <HAL_RCC_OscConfig+0x324>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x30c>
 8004e62:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	4a5b      	ldr	r2, [pc, #364]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0x324>
 8004e7c:	4b58      	ldr	r3, [pc, #352]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e80:	4a57      	ldr	r2, [pc, #348]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e88:	4b55      	ldr	r3, [pc, #340]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4a54      	ldr	r2, [pc, #336]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fd fad0 	bl	8002440 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fd facc 	bl	8002440 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e0cb      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	4b49      	ldr	r3, [pc, #292]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ee      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x334>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec8:	f7fd faba 	bl	8002440 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fab6 	bl	8002440 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0b5      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ee      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef8:	4b39      	ldr	r3, [pc, #228]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	4a38      	ldr	r2, [pc, #224]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80a1 	beq.w	8005050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f0e:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d05c      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d141      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f22:	4b31      	ldr	r3, [pc, #196]	@ (8004fe8 <HAL_RCC_OscConfig+0x478>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fd fa8a 	bl	8002440 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fd fa86 	bl	8002440 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e087      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	3b01      	subs	r3, #1
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	061b      	lsls	r3, r3, #24
 8004f72:	491b      	ldr	r1, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <HAL_RCC_OscConfig+0x478>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7fd fa5f 	bl	8002440 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fd fa5b 	bl	8002440 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e05c      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x416>
 8004fa4:	e054      	b.n	8005050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_OscConfig+0x478>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fd fa48 	bl	8002440 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fd fa44 	bl	8002440 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e045      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x444>
 8004fd2:	e03d      	b.n	8005050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e038      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fec:	4b1b      	ldr	r3, [pc, #108]	@ (800505c <HAL_RCC_OscConfig+0x4ec>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d028      	beq.n	800504c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d121      	bne.n	800504c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d11a      	bne.n	800504c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800501c:	4013      	ands	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0cc      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b68      	ldr	r3, [pc, #416]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d90c      	bls.n	800509c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b65      	ldr	r3, [pc, #404]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b63      	ldr	r3, [pc, #396]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0b8      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b4:	4b59      	ldr	r3, [pc, #356]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a58      	ldr	r2, [pc, #352]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050cc:	4b53      	ldr	r3, [pc, #332]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a52      	ldr	r2, [pc, #328]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b50      	ldr	r3, [pc, #320]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	494d      	ldr	r1, [pc, #308]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d044      	beq.n	8005180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d119      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d003      	beq.n	800511e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511a:	2b03      	cmp	r3, #3
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512e:	4b3b      	ldr	r3, [pc, #236]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e067      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513e:	4b37      	ldr	r3, [pc, #220]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4934      	ldr	r1, [pc, #208]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005150:	f7fd f976 	bl	8002440 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fd f972 	bl	8002440 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e04f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	4b2b      	ldr	r3, [pc, #172]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 020c 	and.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	429a      	cmp	r2, r3
 800517e:	d1eb      	bne.n	8005158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005180:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d20c      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b22      	ldr	r3, [pc, #136]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e032      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4916      	ldr	r1, [pc, #88]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	490e      	ldr	r1, [pc, #56]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051e6:	f000 f889 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	490a      	ldr	r1, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x1c0>)
 80051f8:	5ccb      	ldrb	r3, [r1, r3]
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005202:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd f8d6 	bl	80023b8 <HAL_InitTick>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023c00 	.word	0x40023c00
 800521c:	40023800 	.word	0x40023800
 8005220:	0800a224 	.word	0x0800a224
 8005224:	20000004 	.word	0x20000004
 8005228:	20000008 	.word	0x20000008

0800522c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	@ 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d129      	bne.n	8005292 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	4b2b      	ldr	r3, [pc, #172]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	4a2a      	ldr	r2, [pc, #168]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6313      	str	r3, [r2, #48]	@ 0x30
 800524e:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800525a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800525e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005260:	2302      	movs	r3, #2
 8005262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005264:	2303      	movs	r3, #3
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005270:	f107 031c 	add.w	r3, r7, #28
 8005274:	4619      	mov	r1, r3
 8005276:	481f      	ldr	r0, [pc, #124]	@ (80052f4 <HAL_RCC_MCOConfig+0xc8>)
 8005278:	f7ff f980 	bl	800457c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800527c:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	430b      	orrs	r3, r1
 800528a:	4919      	ldr	r1, [pc, #100]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 800528c:	4313      	orrs	r3, r2
 800528e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005290:	e029      	b.n	80052e6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80052ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b4:	2302      	movs	r3, #2
 80052b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b8:	2303      	movs	r3, #3
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80052c0:	2300      	movs	r3, #0
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80052c4:	f107 031c 	add.w	r3, r7, #28
 80052c8:	4619      	mov	r1, r3
 80052ca:	480b      	ldr	r0, [pc, #44]	@ (80052f8 <HAL_RCC_MCOConfig+0xcc>)
 80052cc:	f7ff f956 	bl	800457c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80052d0:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	00d9      	lsls	r1, r3, #3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	430b      	orrs	r3, r1
 80052e0:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <HAL_RCC_MCOConfig+0xc4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
}
 80052e6:	bf00      	nop
 80052e8:	3730      	adds	r7, #48	@ 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40020800 	.word	0x40020800

080052fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b094      	sub	sp, #80	@ 0x50
 8005302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	647b      	str	r3, [r7, #68]	@ 0x44
 8005308:	2300      	movs	r3, #0
 800530a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800530c:	2300      	movs	r3, #0
 800530e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005314:	4b79      	ldr	r3, [pc, #484]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b08      	cmp	r3, #8
 800531e:	d00d      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x40>
 8005320:	2b08      	cmp	r3, #8
 8005322:	f200 80e1 	bhi.w	80054e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x34>
 800532a:	2b04      	cmp	r3, #4
 800532c:	d003      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x3a>
 800532e:	e0db      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b73      	ldr	r3, [pc, #460]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x204>)
 8005332:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005334:	e0db      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005336:	4b73      	ldr	r3, [pc, #460]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x208>)
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800533a:	e0d8      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800533c:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005344:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005346:	4b6d      	ldr	r3, [pc, #436]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d063      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005352:	4b6a      	ldr	r3, [pc, #424]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	2200      	movs	r2, #0
 800535a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800535c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	@ 0x34
 800536a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f04f 0100 	mov.w	r1, #0
 800537a:	0159      	lsls	r1, r3, #5
 800537c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005380:	0150      	lsls	r0, r2, #5
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4621      	mov	r1, r4
 8005388:	1a51      	subs	r1, r2, r1
 800538a:	6139      	str	r1, [r7, #16]
 800538c:	4629      	mov	r1, r5
 800538e:	eb63 0301 	sbc.w	r3, r3, r1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a0:	4659      	mov	r1, fp
 80053a2:	018b      	lsls	r3, r1, #6
 80053a4:	4651      	mov	r1, sl
 80053a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053aa:	4651      	mov	r1, sl
 80053ac:	018a      	lsls	r2, r1, #6
 80053ae:	4651      	mov	r1, sl
 80053b0:	ebb2 0801 	subs.w	r8, r2, r1
 80053b4:	4659      	mov	r1, fp
 80053b6:	eb63 0901 	sbc.w	r9, r3, r1
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ce:	4690      	mov	r8, r2
 80053d0:	4699      	mov	r9, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	eb18 0303 	adds.w	r3, r8, r3
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	462b      	mov	r3, r5
 80053dc:	eb49 0303 	adc.w	r3, r9, r3
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ee:	4629      	mov	r1, r5
 80053f0:	024b      	lsls	r3, r1, #9
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053f8:	4621      	mov	r1, r4
 80053fa:	024a      	lsls	r2, r1, #9
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005402:	2200      	movs	r2, #0
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800540c:	f7fa fedc 	bl	80001c8 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	e058      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541a:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	2200      	movs	r2, #0
 8005422:	4618      	mov	r0, r3
 8005424:	4611      	mov	r1, r2
 8005426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800542a:	623b      	str	r3, [r7, #32]
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	f04f 0000 	mov.w	r0, #0
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	0159      	lsls	r1, r3, #5
 8005442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005446:	0150      	lsls	r0, r2, #5
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4641      	mov	r1, r8
 800544e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005452:	4649      	mov	r1, r9
 8005454:	eb63 0b01 	sbc.w	fp, r3, r1
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800546c:	ebb2 040a 	subs.w	r4, r2, sl
 8005470:	eb63 050b 	sbc.w	r5, r3, fp
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	00eb      	lsls	r3, r5, #3
 800547e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005482:	00e2      	lsls	r2, r4, #3
 8005484:	4614      	mov	r4, r2
 8005486:	461d      	mov	r5, r3
 8005488:	4643      	mov	r3, r8
 800548a:	18e3      	adds	r3, r4, r3
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	464b      	mov	r3, r9
 8005490:	eb45 0303 	adc.w	r3, r5, r3
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a2:	4629      	mov	r1, r5
 80054a4:	028b      	lsls	r3, r1, #10
 80054a6:	4621      	mov	r1, r4
 80054a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054ac:	4621      	mov	r1, r4
 80054ae:	028a      	lsls	r2, r1, #10
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b6:	2200      	movs	r2, #0
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	61fa      	str	r2, [r7, #28]
 80054bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c0:	f7fa fe82 	bl	80001c8 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054cc:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e6:	e002      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3750      	adds	r7, #80	@ 0x50
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	@ (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000004 	.word	0x20000004

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	@ (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800a234 	.word	0x0800a234

08005548 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e022      	b.n	80055a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fc fd25 	bl	8001fbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2203      	movs	r2, #3
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f814 	bl	80055a8 <HAL_SD_InitCard>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e00a      	b.n	80055a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af04      	add	r7, sp, #16
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80055c4:	2376      	movs	r3, #118	@ 0x76
 80055c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681d      	ldr	r5, [r3, #0]
 80055cc:	466c      	mov	r4, sp
 80055ce:	f107 0314 	add.w	r3, r7, #20
 80055d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e0:	4628      	mov	r0, r5
 80055e2:	f001 f8d9 	bl	8006798 <SDIO_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80055ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e04f      	b.n	8005698 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80055f8:	4b29      	ldr	r3, [pc, #164]	@ (80056a0 <HAL_SD_InitCard+0xf8>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f8f3 	bl	80067ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005608:	4b25      	ldr	r3, [pc, #148]	@ (80056a0 <HAL_SD_InitCard+0xf8>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800560e:	2002      	movs	r0, #2
 8005610:	f7fc ff22 	bl	8002458 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fab9 	bl	8005b8c <SD_PowerON>
 800561a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e02e      	b.n	8005698 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9d8 	bl	80059f0 <SD_InitCard>
 8005640:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e01b      	b.n	8005698 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f926 	bl	80068ba <SDMMC_CmdBlockLength>
 800566e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00f      	beq.n	8005696 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a0a      	ldr	r2, [pc, #40]	@ (80056a4 <HAL_SD_InitCard+0xfc>)
 800567c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3728      	adds	r7, #40	@ 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bdb0      	pop	{r4, r5, r7, pc}
 80056a0:	422580a0 	.word	0x422580a0
 80056a4:	004005ff 	.word	0x004005ff

080056a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b6:	0f9b      	lsrs	r3, r3, #30
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c2:	0e9b      	lsrs	r3, r3, #26
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d4:	0e1b      	lsrs	r3, r3, #24
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056e6:	0c1b      	lsrs	r3, r3, #16
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005708:	0d1b      	lsrs	r3, r3, #20
 800570a:	b29a      	uxth	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	b2da      	uxtb	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005726:	0bdb      	lsrs	r3, r3, #15
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	b2da      	uxtb	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005738:	0b9b      	lsrs	r3, r3, #14
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800574a:	0b5b      	lsrs	r3, r3, #13
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800575c:	0b1b      	lsrs	r3, r3, #12
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005774:	2b00      	cmp	r3, #0
 8005776:	d163      	bne.n	8005840 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800577c:	009a      	lsls	r2, r3, #2
 800577e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005782:	4013      	ands	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005788:	0f92      	lsrs	r2, r2, #30
 800578a:	431a      	orrs	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005794:	0edb      	lsrs	r3, r3, #27
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	b2da      	uxtb	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a6:	0e1b      	lsrs	r3, r3, #24
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b8:	0d5b      	lsrs	r3, r3, #21
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ca:	0c9b      	lsrs	r3, r3, #18
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057dc:	0bdb      	lsrs	r3, r3, #15
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	7e1b      	ldrb	r3, [r3, #24]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	3302      	adds	r3, #2
 8005800:	2201      	movs	r2, #1
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800580a:	fb03 f202 	mul.w	r2, r3, r2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	7a1b      	ldrb	r3, [r3, #8]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	2201      	movs	r2, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800582c:	0a52      	lsrs	r2, r2, #9
 800582e:	fb03 f202 	mul.w	r2, r3, r2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800583c:	661a      	str	r2, [r3, #96]	@ 0x60
 800583e:	e031      	b.n	80058a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11d      	bne.n	8005884 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005856:	0c1b      	lsrs	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	3301      	adds	r3, #1
 8005864:	029a      	lsls	r2, r3, #10
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005878:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	661a      	str	r2, [r3, #96]	@ 0x60
 8005882:	e00f      	b.n	80058a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a58      	ldr	r2, [pc, #352]	@ (80059ec <HAL_SD_GetCardCSD+0x344>)
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e09d      	b.n	80059e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a8:	0b9b      	lsrs	r3, r3, #14
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ba:	09db      	lsrs	r3, r3, #7
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058dc:	0fdb      	lsrs	r3, r3, #31
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	0f5b      	lsrs	r3, r3, #29
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fa:	0e9b      	lsrs	r3, r3, #26
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	b2da      	uxtb	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	0d9b      	lsrs	r3, r3, #22
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	b2da      	uxtb	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	0d5b      	lsrs	r3, r3, #21
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	0bdb      	lsrs	r3, r3, #15
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	0b9b      	lsrs	r3, r3, #14
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	0b5b      	lsrs	r3, r3, #13
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	0b1b      	lsrs	r3, r3, #12
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	b2da      	uxtb	r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	004005ff 	.word	0x004005ff

080059f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b094      	sub	sp, #80	@ 0x50
 80059f4:	af04      	add	r7, sp, #16
 80059f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ff02 	bl	800680a <SDIO_GetPowerState>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005a10:	e0b8      	b.n	8005b84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d02f      	beq.n	8005a7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f812 	bl	8006a48 <SDMMC_CmdSendCID>
 8005a24:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <SD_InitCard+0x40>
    {
      return errorstate;
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2e:	e0a9      	b.n	8005b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 ff2c 	bl	8006894 <SDIO_GetResponse>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2104      	movs	r1, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 ff23 	bl	8006894 <SDIO_GetResponse>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2108      	movs	r1, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 ff1a 	bl	8006894 <SDIO_GetResponse>
 8005a60:	4602      	mov	r2, r0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	210c      	movs	r1, #12
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 ff11 	bl	8006894 <SDIO_GetResponse>
 8005a72:	4602      	mov	r2, r0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d00d      	beq.n	8005a9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f107 020e 	add.w	r2, r7, #14
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 f818 	bl	8006ac2 <SDMMC_CmdSetRelAdd>
 8005a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <SD_InitCard+0xae>
    {
      return errorstate;
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9c:	e072      	b.n	8005b84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d036      	beq.n	8005b14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 ffe2 	bl	8006a84 <SDMMC_CmdSendCSD>
 8005ac0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <SD_InitCard+0xdc>
    {
      return errorstate;
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aca:	e05b      	b.n	8005b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fede 	bl	8006894 <SDIO_GetResponse>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2104      	movs	r1, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fed5 	bl	8006894 <SDIO_GetResponse>
 8005aea:	4602      	mov	r2, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2108      	movs	r1, #8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fecc 	bl	8006894 <SDIO_GetResponse>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	210c      	movs	r1, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fec3 	bl	8006894 <SDIO_GetResponse>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2104      	movs	r1, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 feba 	bl	8006894 <SDIO_GetResponse>
 8005b20:	4603      	mov	r3, r0
 8005b22:	0d1a      	lsrs	r2, r3, #20
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005b28:	f107 0310 	add.w	r3, r7, #16
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fdba 	bl	80056a8 <HAL_SD_GetCardCSD>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005b3e:	e021      	b.n	8005b84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	4615      	mov	r5, r2
 8005b50:	4622      	mov	r2, r4
 8005b52:	462b      	mov	r3, r5
 8005b54:	4608      	mov	r0, r1
 8005b56:	f000 fed2 	bl	80068fe <SDMMC_CmdSelDesel>
 8005b5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <SD_InitCard+0x176>
  {
    return errorstate;
 8005b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b64:	e00e      	b.n	8005b84 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	466c      	mov	r4, sp
 8005b6e:	f103 0210 	add.w	r2, r3, #16
 8005b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b78:	3304      	adds	r3, #4
 8005b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 fe0b 	bl	8006798 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3740      	adds	r7, #64	@ 0x40
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bdb0      	pop	{r4, r5, r7, pc}

08005b8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fecd 	bl	8006944 <SDMMC_CmdGoIdleState>
 8005baa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e072      	b.n	8005c9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fee0 	bl	8006980 <SDMMC_CmdOperCond>
 8005bc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 feb6 	bl	8006944 <SDMMC_CmdGoIdleState>
 8005bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <SD_PowerON+0x5e>
    {
      return errorstate;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e05b      	b.n	8005c9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d137      	bne.n	8005c62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fee0 	bl	80069be <SDMMC_CmdAppCommand>
 8005bfe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02d      	beq.n	8005c62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005c0a:	e047      	b.n	8005c9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fed3 	bl	80069be <SDMMC_CmdAppCommand>
 8005c18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <SD_PowerON+0x98>
    {
      return errorstate;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	e03b      	b.n	8005c9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	491e      	ldr	r1, [pc, #120]	@ (8005ca4 <SD_PowerON+0x118>)
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fee9 	bl	8006a02 <SDMMC_CmdAppOperCommand>
 8005c30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005c3c:	e02e      	b.n	8005c9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fe25 	bl	8006894 <SDIO_GetResponse>
 8005c4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	0fdb      	lsrs	r3, r3, #31
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <SD_PowerON+0xcc>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <SD_PowerON+0xce>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]

    count++;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d802      	bhi.n	8005c72 <SD_PowerON+0xe6>
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0cc      	beq.n	8005c0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d902      	bls.n	8005c82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c80:	e00c      	b.n	8005c9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c92:	e002      	b.n	8005c9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	c1100000 	.word	0xc1100000

08005ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07b      	b.n	8005db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d108      	bne.n	8005cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cca:	d009      	beq.n	8005ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61da      	str	r2, [r3, #28]
 8005cd2:	e005      	b.n	8005ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc f9c6 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d64:	ea42 0103 	orr.w	r1, r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	f003 0104 	and.w	r1, r3, #4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	f003 0210 	and.w	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_SPI_Transmit+0x22>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e12d      	b.n	8006038 <HAL_SPI_Transmit+0x27e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de4:	f7fc fb2c 	bl	8002440 <HAL_GetTick>
 8005de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfe:	e116      	b.n	800602e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Transmit+0x52>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e10:	e10d      	b.n	800602e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2203      	movs	r2, #3
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e58:	d10f      	bne.n	8005e7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	d007      	beq.n	8005e98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea0:	d14f      	bne.n	8005f42 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0xf6>
 8005eaa:	8afb      	ldrh	r3, [r7, #22]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d142      	bne.n	8005f36 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed4:	e02f      	b.n	8005f36 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d112      	bne.n	8005f0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f08:	e015      	b.n	8005f36 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0a:	f7fc fa99 	bl	8002440 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d803      	bhi.n	8005f22 <HAL_SPI_Transmit+0x168>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f20:	d102      	bne.n	8005f28 <HAL_SPI_Transmit+0x16e>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f34:	e07b      	b.n	800602e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ca      	bne.n	8005ed6 <HAL_SPI_Transmit+0x11c>
 8005f40:	e050      	b.n	8005fe4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x196>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d144      	bne.n	8005fda <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f76:	e030      	b.n	8005fda <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fac:	e015      	b.n	8005fda <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fc fa47 	bl	8002440 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_Transmit+0x20c>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Transmit+0x212>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005fd8:	e029      	b.n	800602e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1c9      	bne.n	8005f78 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fa61 	bl	80064b0 <SPI_EndRxTxTransaction>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e003      	b.n	800602e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006036:	7ffb      	ldrb	r3, [r7, #31]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	@ 0x30
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x26>
 8006062:	2302      	movs	r3, #2
 8006064:	e198      	b.n	8006398 <HAL_SPI_TransmitReceive+0x358>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800606e:	f7fc f9e7 	bl	8002440 <HAL_GetTick>
 8006072:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006084:	887b      	ldrh	r3, [r7, #2]
 8006086:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006088:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800608c:	2b01      	cmp	r3, #1
 800608e:	d00f      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x70>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006096:	d107      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x68>
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d003      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80060ae:	e16d      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x82>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x82>
 80060bc:	887b      	ldrh	r3, [r7, #2]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80060c8:	e160      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d003      	beq.n	80060de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2205      	movs	r2, #5
 80060da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	887a      	ldrh	r2, [r7, #2]
 80060ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	887a      	ldrh	r2, [r7, #2]
 8006100:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d007      	beq.n	8006132 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800613a:	d17c      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_SPI_TransmitReceive+0x10a>
 8006144:	8b7b      	ldrh	r3, [r7, #26]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d16a      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616e:	e057      	b.n	8006220 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d11b      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x176>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d016      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x176>
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d113      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d119      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x1b8>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d014      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	b292      	uxth	r2, r2
 80061da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f4:	2301      	movs	r3, #1
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061f8:	f7fc f922 	bl	8002440 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006204:	429a      	cmp	r2, r3
 8006206:	d80b      	bhi.n	8006220 <HAL_SPI_TransmitReceive+0x1e0>
 8006208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800620e:	d007      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800621e:	e0b5      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1a2      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x130>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d19d      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x130>
 8006234:	e080      	b.n	8006338 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x204>
 800623e:	8b7b      	ldrh	r3, [r7, #26]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d16f      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626a:	e05b      	b.n	8006324 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d11c      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x274>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d017      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x274>
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	2b01      	cmp	r3, #1
 8006288:	d114      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d119      	bne.n	80062f6 <HAL_SPI_TransmitReceive+0x2b6>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d014      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f2:	2301      	movs	r3, #1
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f6:	f7fc f8a3 	bl	8002440 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006302:	429a      	cmp	r2, r3
 8006304:	d803      	bhi.n	800630e <HAL_SPI_TransmitReceive+0x2ce>
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800630c:	d102      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x2d4>
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d107      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006322:	e033      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d19e      	bne.n	800626c <HAL_SPI_TransmitReceive+0x22c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d199      	bne.n	800626c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f8b7 	bl	80064b0 <SPI_EndRxTxTransaction>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d006      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006354:	e01a      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006382:	e003      	b.n	800638c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006394:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006398:	4618      	mov	r0, r3
 800639a:	3730      	adds	r7, #48	@ 0x30
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063b0:	f7fc f846 	bl	8002440 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4413      	add	r3, r2
 80063be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063c0:	f7fc f83e 	bl	8002440 <HAL_GetTick>
 80063c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063c6:	4b39      	ldr	r3, [pc, #228]	@ (80064ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	015b      	lsls	r3, r3, #5
 80063cc:	0d1b      	lsrs	r3, r3, #20
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	fb02 f303 	mul.w	r3, r2, r3
 80063d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063d6:	e054      	b.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063de:	d050      	beq.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063e0:	f7fc f82e 	bl	8002440 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d902      	bls.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d13d      	bne.n	8006472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800640e:	d111      	bne.n	8006434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006418:	d004      	beq.n	8006424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006422:	d107      	bne.n	8006434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643c:	d10f      	bne.n	800645e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800645c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e017      	b.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3b01      	subs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	429a      	cmp	r2, r3
 800649e:	d19b      	bne.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000004 	.word	0x20000004

080064b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2201      	movs	r2, #1
 80064c4:	2102      	movs	r1, #2
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7ff ff6a 	bl	80063a0 <SPI_WaitFlagStateUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e032      	b.n	8006548 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <SPI_EndRxTxTransaction+0xa0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <SPI_EndRxTxTransaction+0xa4>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	0d5b      	lsrs	r3, r3, #21
 80064ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006500:	d112      	bne.n	8006528 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	@ 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7ff ff47 	bl	80063a0 <SPI_WaitFlagStateUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d016      	beq.n	8006546 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e00f      	b.n	8006548 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	3b01      	subs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653e:	2b80      	cmp	r3, #128	@ 0x80
 8006540:	d0f2      	beq.n	8006528 <SPI_EndRxTxTransaction+0x78>
 8006542:	e000      	b.n	8006546 <SPI_EndRxTxTransaction+0x96>
        break;
 8006544:	bf00      	nop
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000004 	.word	0x20000004
 8006554:	165e9f81 	.word	0x165e9f81

08006558 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e038      	b.n	80065e0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7fb fe36 	bl	80021f4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3308      	adds	r3, #8
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f000 f828 	bl	80065e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	461a      	mov	r2, r3
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	f000 f88a 	bl	80066bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	f000 f8b7 	bl	8006728 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6892      	ldr	r2, [r2, #8]
 80065c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	f041 0101 	orr.w	r1, r1, #1
 80065d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	f023 0101 	bic.w	r1, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b08      	cmp	r3, #8
 8006610:	d102      	bne.n	8006618 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006612:	2340      	movs	r3, #64	@ 0x40
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e001      	b.n	800661c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006628:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800662e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006634:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800663a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006640:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006646:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800664c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006652:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006658:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <FSMC_NORSRAM_Init+0xd0>)
 8006678:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006680:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006688:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	43db      	mvns	r3, r3
 8006698:	ea02 0103 	and.w	r1, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4319      	orrs	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	0008fb7f 	.word	0x0008fb7f

080066bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	431a      	orrs	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	3b02      	subs	r3, #2
 8006702:	061b      	lsls	r3, r3, #24
 8006704:	431a      	orrs	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	4313      	orrs	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	3201      	adds	r2, #1
 8006710:	4319      	orrs	r1, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800673c:	d11d      	bne.n	800677a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006746:	4b13      	ldr	r3, [pc, #76]	@ (8006794 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006748:	4013      	ands	r3, r2
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	6852      	ldr	r2, [r2, #4]
 8006752:	0112      	lsls	r2, r2, #4
 8006754:	4311      	orrs	r1, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	6892      	ldr	r2, [r2, #8]
 800675a:	0212      	lsls	r2, r2, #8
 800675c:	4311      	orrs	r1, r2
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	6992      	ldr	r2, [r2, #24]
 8006762:	4311      	orrs	r1, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	68d2      	ldr	r2, [r2, #12]
 8006768:	0412      	lsls	r2, r2, #16
 800676a:	430a      	orrs	r2, r1
 800676c:	ea43 0102 	orr.w	r1, r3, r2
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006778:	e005      	b.n	8006786 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	cff00000 	.word	0xcff00000

08006798 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006798:	b084      	sub	sp, #16
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	f107 001c 	add.w	r0, r7, #28
 80067a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80067ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80067b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80067b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80067b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80067ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80067bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80067be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80067c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80067d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	b004      	add	sp, #16
 80067ec:	4770      	bx	lr

080067ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2203      	movs	r2, #3
 80067fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0303 	and.w	r3, r3, #3
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006844:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800684a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006850:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006860:	f023 030f 	bic.w	r3, r3, #15
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	b2db      	uxtb	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3314      	adds	r3, #20
 80068a2:	461a      	mov	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4413      	add	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
}  
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80068c8:	2310      	movs	r3, #16
 80068ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068cc:	2340      	movs	r3, #64	@ 0x40
 80068ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ffa0 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	2110      	movs	r1, #16
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f909 	bl	8006b04 <SDMMC_GetCmdResp1>
 80068f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068f4:	69fb      	ldr	r3, [r7, #28]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b08a      	sub	sp, #40	@ 0x28
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800690e:	2307      	movs	r3, #7
 8006910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006912:	2340      	movs	r3, #64	@ 0x40
 8006914:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800691a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800691e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4619      	mov	r1, r3
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff7d 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800692c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006930:	2107      	movs	r1, #7
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f8e6 	bl	8006b04 <SDMMC_GetCmdResp1>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800693c:	4618      	mov	r0, r3
 800693e:	3728      	adds	r7, #40	@ 0x28
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800695c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff5c 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb00 	bl	8006f74 <SDMMC_GetCmdError>
 8006974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006988:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800698c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800698e:	2308      	movs	r3, #8
 8006990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006992:	2340      	movs	r3, #64	@ 0x40
 8006994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800699e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff ff3d 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa93 	bl	8006ed8 <SDMMC_GetCmdResp7>
 80069b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b088      	sub	sp, #32
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80069cc:	2337      	movs	r3, #55	@ 0x37
 80069ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069d0:	2340      	movs	r3, #64	@ 0x40
 80069d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff1e 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80069ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ee:	2137      	movs	r1, #55	@ 0x37
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f887 	bl	8006b04 <SDMMC_GetCmdResp1>
 80069f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f8:	69fb      	ldr	r3, [r7, #28]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b088      	sub	sp, #32
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a18:	2329      	movs	r3, #41	@ 0x29
 8006a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a1c:	2340      	movs	r3, #64	@ 0x40
 8006a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a20:	2300      	movs	r3, #0
 8006a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a2a:	f107 0308 	add.w	r3, r7, #8
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fef8 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f99a 	bl	8006d70 <SDMMC_GetCmdResp3>
 8006a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006a54:	2302      	movs	r3, #2
 8006a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a58:	23c0      	movs	r3, #192	@ 0xc0
 8006a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a66:	f107 0308 	add.w	r3, r7, #8
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff feda 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f934 	bl	8006ce0 <SDMMC_GetCmdResp2>
 8006a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006a92:	2309      	movs	r3, #9
 8006a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a96:	23c0      	movs	r3, #192	@ 0xc0
 8006a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aa4:	f107 0308 	add.w	r3, r7, #8
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff febb 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f915 	bl	8006ce0 <SDMMC_GetCmdResp2>
 8006ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b088      	sub	sp, #32
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fe9c 	bl	8006826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	2103      	movs	r1, #3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f97a 	bl	8006dec <SDMMC_GetCmdResp6>
 8006af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afa:	69fb      	ldr	r3, [r7, #28]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b12:	4b70      	ldr	r3, [pc, #448]	@ (8006cd4 <SDMMC_GetCmdResp1+0x1d0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a70      	ldr	r2, [pc, #448]	@ (8006cd8 <SDMMC_GetCmdResp1+0x1d4>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	0a5a      	lsrs	r2, r3, #9
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	61fa      	str	r2, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b34:	e0c9      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ef      	beq.n	8006b26 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1ea      	bne.n	8006b26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b62:	2304      	movs	r3, #4
 8006b64:	e0b1      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0a6      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	22c5      	movs	r2, #197	@ 0xc5
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fe79 	bl	800687a <SDIO_GetCommandResponse>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d001      	beq.n	8006b96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e099      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006b96:	2100      	movs	r1, #0
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fe7b 	bl	8006894 <SDIO_GetResponse>
 8006b9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8006cdc <SDMMC_GetCmdResp1+0x1d8>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e08d      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da02      	bge.n	8006bba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bb8:	e087      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006bc4:	2340      	movs	r3, #64	@ 0x40
 8006bc6:	e080      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	e079      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006be4:	e071      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf4:	e069      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c04:	e061      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c14:	e059      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c24:	e051      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c34:	e049      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c44:	e041      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c54:	e039      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006c60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c64:	e031      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006c70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006c74:	e029      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006c84:	e021      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006c90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006c94:	e019      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006ca4:	e011      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006cb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006cb4:	e009      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006cc0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006cc4:	e001      	b.n	8006cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000004 	.word	0x20000004
 8006cd8:	10624dd3 	.word	0x10624dd3
 8006cdc:	fdffe008 	.word	0xfdffe008

08006ce0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d68 <SDMMC_GetCmdResp2+0x88>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <SDMMC_GetCmdResp2+0x8c>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	60fa      	str	r2, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d0c:	e026      	b.n	8006d5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0ef      	beq.n	8006cfe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ea      	bne.n	8006cfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	e00e      	b.n	8006d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e003      	b.n	8006d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	22c5      	movs	r2, #197	@ 0xc5
 8006d58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000004 	.word	0x20000004
 8006d6c:	10624dd3 	.word	0x10624dd3

08006d70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d78:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <SDMMC_GetCmdResp3+0x74>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8006de8 <SDMMC_GetCmdResp3+0x78>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	0a5b      	lsrs	r3, r3, #9
 8006d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
 8006d8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	60fa      	str	r2, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d9c:	e01b      	b.n	8006dd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ef      	beq.n	8006d8e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1ea      	bne.n	8006d8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dca:	2304      	movs	r3, #4
 8006dcc:	e003      	b.n	8006dd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	22c5      	movs	r2, #197	@ 0xc5
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000004 	.word	0x20000004
 8006de8:	10624dd3 	.word	0x10624dd3

08006dec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	460b      	mov	r3, r1
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dfa:	4b35      	ldr	r3, [pc, #212]	@ (8006ed0 <SDMMC_GetCmdResp6+0xe4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a35      	ldr	r2, [pc, #212]	@ (8006ed4 <SDMMC_GetCmdResp6+0xe8>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	0a5b      	lsrs	r3, r3, #9
 8006e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0a:	fb02 f303 	mul.w	r3, r2, r3
 8006e0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1e5a      	subs	r2, r3, #1
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e1e:	e052      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ef      	beq.n	8006e10 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ea      	bne.n	8006e10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2204      	movs	r2, #4
 8006e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	e03a      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e02f      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fd07 	bl	800687a <SDIO_GetCommandResponse>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d001      	beq.n	8006e7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e025      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	22c5      	movs	r2, #197	@ 0xc5
 8006e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e80:	2100      	movs	r1, #0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fd06 	bl	8006894 <SDIO_GetResponse>
 8006e88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	0c1b      	lsrs	r3, r3, #16
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e011      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006eac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006eb0:	e009      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ec0:	e001      	b.n	8006ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000004 	.word	0x20000004
 8006ed4:	10624dd3 	.word	0x10624dd3

08006ed8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ee0:	4b22      	ldr	r3, [pc, #136]	@ (8006f6c <SDMMC_GetCmdResp7+0x94>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	@ (8006f70 <SDMMC_GetCmdResp7+0x98>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	0a5b      	lsrs	r3, r3, #9
 8006eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef0:	fb02 f303 	mul.w	r3, r2, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1e5a      	subs	r2, r3, #1
 8006efa:	60fa      	str	r2, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f04:	e02c      	b.n	8006f60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0ef      	beq.n	8006ef6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1ea      	bne.n	8006ef6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2204      	movs	r2, #4
 8006f30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f32:	2304      	movs	r3, #4
 8006f34:	e014      	b.n	8006f60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e009      	b.n	8006f60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2240      	movs	r2, #64	@ 0x40
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f5e:	2300      	movs	r3, #0
  
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000004 	.word	0x20000004
 8006f70:	10624dd3 	.word	0x10624dd3

08006f74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <SDMMC_GetCmdError+0x50>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a11      	ldr	r2, [pc, #68]	@ (8006fc8 <SDMMC_GetCmdError+0x54>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	0a5b      	lsrs	r3, r3, #9
 8006f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f8c:	fb02 f303 	mul.w	r3, r2, r3
 8006f90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	60fa      	str	r2, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006fa0:	e009      	b.n	8006fb6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f1      	beq.n	8006f92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	22c5      	movs	r2, #197	@ 0xc5
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000004 	.word	0x20000004
 8006fc8:	10624dd3 	.word	0x10624dd3

08006fcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fd0:	4904      	ldr	r1, [pc, #16]	@ (8006fe4 <MX_FATFS_Init+0x18>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	@ (8006fe8 <MX_FATFS_Init+0x1c>)
 8006fd4:	f002 fd88 	bl	8009ae8 <FATFS_LinkDriver>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b03      	ldr	r3, [pc, #12]	@ (8006fec <MX_FATFS_Init+0x20>)
 8006fde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fe0:	bf00      	nop
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	2001af40 	.word	0x2001af40
 8006fe8:	20000010 	.word	0x20000010
 8006fec:	2001af3c 	.word	0x2001af3c

08006ff0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ff4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 fc07 	bl	8000820 <SD_disk_initialize>
 8007012:	4603      	mov	r3, r0
 8007014:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	4603      	mov	r3, r0
 8007026:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 fcde 	bl	80009ec <SD_disk_status>
 8007030:	4603      	mov	r3, r0
 8007032:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800704c:	7bf8      	ldrb	r0, [r7, #15]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	f7f9 fce0 	bl	8000a18 <SD_disk_read>
 8007058:	4603      	mov	r3, r0
 800705a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007074:	7bf8      	ldrb	r0, [r7, #15]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	f7f9 fd36 	bl	8000aec <SD_disk_write>
 8007080:	4603      	mov	r3, r0
 8007082:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	603a      	str	r2, [r7, #0]
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	460b      	mov	r3, r1
 800709a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	79b9      	ldrb	r1, [r7, #6]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7f9 fda6 	bl	8000bf4 <SD_disk_ioctl>
 80070a8:	4603      	mov	r3, r0
 80070aa:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <disk_status+0x30>)
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	79fa      	ldrb	r2, [r7, #7]
 80070cc:	4905      	ldr	r1, [pc, #20]	@ (80070e4 <disk_status+0x30>)
 80070ce:	440a      	add	r2, r1
 80070d0:	7a12      	ldrb	r2, [r2, #8]
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	2001c1a4 	.word	0x2001c1a4

080070e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <disk_initialize+0x4c>)
 80070fa:	5cd3      	ldrb	r3, [r2, r3]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d114      	bne.n	800712a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <disk_initialize+0x4c>)
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	79fa      	ldrb	r2, [r7, #7]
 800710e:	4909      	ldr	r1, [pc, #36]	@ (8007134 <disk_initialize+0x4c>)
 8007110:	440a      	add	r2, r1
 8007112:	7a12      	ldrb	r2, [r2, #8]
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	4a03      	ldr	r2, [pc, #12]	@ (8007134 <disk_initialize+0x4c>)
 8007126:	2101      	movs	r1, #1
 8007128:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	2001c1a4 	.word	0x2001c1a4

08007138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <disk_read+0x3c>)
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	689c      	ldr	r4, [r3, #8]
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	4a07      	ldr	r2, [pc, #28]	@ (8007174 <disk_read+0x3c>)
 8007158:	4413      	add	r3, r2
 800715a:	7a18      	ldrb	r0, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	47a0      	blx	r4
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]
  return res;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd90      	pop	{r4, r7, pc}
 8007172:	bf00      	nop
 8007174:	2001c1a4 	.word	0x2001c1a4

08007178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4a0a      	ldr	r2, [pc, #40]	@ (80071b4 <disk_write+0x3c>)
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68dc      	ldr	r4, [r3, #12]
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4a07      	ldr	r2, [pc, #28]	@ (80071b4 <disk_write+0x3c>)
 8007198:	4413      	add	r3, r2
 800719a:	7a18      	ldrb	r0, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	47a0      	blx	r4
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd90      	pop	{r4, r7, pc}
 80071b2:	bf00      	nop
 80071b4:	2001c1a4 	.word	0x2001c1a4

080071b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	603a      	str	r2, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
 80071c4:	460b      	mov	r3, r1
 80071c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4a09      	ldr	r2, [pc, #36]	@ (80071f0 <disk_ioctl+0x38>)
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	79fa      	ldrb	r2, [r7, #7]
 80071d6:	4906      	ldr	r1, [pc, #24]	@ (80071f0 <disk_ioctl+0x38>)
 80071d8:	440a      	add	r2, r1
 80071da:	7a10      	ldrb	r0, [r2, #8]
 80071dc:	79b9      	ldrb	r1, [r7, #6]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2001c1a4 	.word	0x2001c1a4

080071f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3301      	adds	r3, #1
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	b21a      	sxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b21b      	sxth	r3, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	b21b      	sxth	r3, r3
 8007214:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007216:	89fb      	ldrh	r3, [r7, #14]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3303      	adds	r3, #3
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	3202      	adds	r2, #2
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	3201      	adds	r2, #1
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
	return rv;
 800725c:	68fb      	ldr	r3, [r7, #12]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	887a      	ldrh	r2, [r7, #2]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	887b      	ldrh	r3, [r7, #2]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	1c53      	adds	r3, r2, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	6179      	str	r1, [r7, #20]
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f1      	bne.n	8007312 <mem_cpy+0x1a>
	}
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	617a      	str	r2, [r7, #20]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3b01      	subs	r3, #1
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f3      	bne.n	800734a <mem_set+0x10>
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	@ 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	61ba      	str	r2, [r7, #24]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	1acb      	subs	r3, r1, r3
 800739c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <mem_cmp+0x40>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0eb      	beq.n	8007388 <mem_cmp+0x18>

	return r;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3724      	adds	r7, #36	@ 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073c8:	e002      	b.n	80073d0 <chk_chr+0x12>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3301      	adds	r3, #1
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <chk_chr+0x26>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d1f2      	bne.n	80073ca <chk_chr+0xc>
	return *str;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e029      	b.n	800745c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007408:	4a27      	ldr	r2, [pc, #156]	@ (80074a8 <chk_lock+0xb4>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01d      	beq.n	8007452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007416:	4a24      	ldr	r2, [pc, #144]	@ (80074a8 <chk_lock+0xb4>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	4413      	add	r3, r2
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d116      	bne.n	8007456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007428:	4a1f      	ldr	r2, [pc, #124]	@ (80074a8 <chk_lock+0xb4>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	4413      	add	r3, r2
 8007430:	3304      	adds	r3, #4
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007438:	429a      	cmp	r2, r3
 800743a:	d10c      	bne.n	8007456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800743c:	4a1a      	ldr	r2, [pc, #104]	@ (80074a8 <chk_lock+0xb4>)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4413      	add	r3, r2
 8007444:	3308      	adds	r3, #8
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d102      	bne.n	8007456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007450:	e007      	b.n	8007462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d9d2      	bls.n	8007408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d109      	bne.n	800747c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <chk_lock+0x80>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d101      	bne.n	8007478 <chk_lock+0x84>
 8007474:	2300      	movs	r3, #0
 8007476:	e010      	b.n	800749a <chk_lock+0xa6>
 8007478:	2312      	movs	r3, #18
 800747a:	e00e      	b.n	800749a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d108      	bne.n	8007494 <chk_lock+0xa0>
 8007482:	4a09      	ldr	r2, [pc, #36]	@ (80074a8 <chk_lock+0xb4>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	4413      	add	r3, r2
 800748a:	330c      	adds	r3, #12
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007492:	d101      	bne.n	8007498 <chk_lock+0xa4>
 8007494:	2310      	movs	r3, #16
 8007496:	e000      	b.n	800749a <chk_lock+0xa6>
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	2001bf84 	.word	0x2001bf84

080074ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	e002      	b.n	80074be <enq_lock+0x12>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3301      	adds	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d806      	bhi.n	80074d2 <enq_lock+0x26>
 80074c4:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <enq_lock+0x40>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f2      	bne.n	80074b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	2001bf84 	.word	0x2001bf84

080074f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e01f      	b.n	8007540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007500:	4a41      	ldr	r2, [pc, #260]	@ (8007608 <inc_lock+0x118>)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	4413      	add	r3, r2
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d113      	bne.n	800753a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007512:	4a3d      	ldr	r2, [pc, #244]	@ (8007608 <inc_lock+0x118>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	3304      	adds	r3, #4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007522:	429a      	cmp	r2, r3
 8007524:	d109      	bne.n	800753a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007526:	4a38      	ldr	r2, [pc, #224]	@ (8007608 <inc_lock+0x118>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	3308      	adds	r3, #8
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007536:	429a      	cmp	r2, r3
 8007538:	d006      	beq.n	8007548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d9dc      	bls.n	8007500 <inc_lock+0x10>
 8007546:	e000      	b.n	800754a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d132      	bne.n	80075b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <inc_lock+0x6c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d806      	bhi.n	8007570 <inc_lock+0x80>
 8007562:	4a29      	ldr	r2, [pc, #164]	@ (8007608 <inc_lock+0x118>)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f2      	bne.n	8007556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d101      	bne.n	800757a <inc_lock+0x8a>
 8007576:	2300      	movs	r3, #0
 8007578:	e040      	b.n	80075fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4922      	ldr	r1, [pc, #136]	@ (8007608 <inc_lock+0x118>)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	440b      	add	r3, r1
 8007586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	491e      	ldr	r1, [pc, #120]	@ (8007608 <inc_lock+0x118>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	440b      	add	r3, r1
 8007594:	3304      	adds	r3, #4
 8007596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	695a      	ldr	r2, [r3, #20]
 800759c:	491a      	ldr	r1, [pc, #104]	@ (8007608 <inc_lock+0x118>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	440b      	add	r3, r1
 80075a4:	3308      	adds	r3, #8
 80075a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80075a8:	4a17      	ldr	r2, [pc, #92]	@ (8007608 <inc_lock+0x118>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	4413      	add	r3, r2
 80075b0:	330c      	adds	r3, #12
 80075b2:	2200      	movs	r2, #0
 80075b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <inc_lock+0xe0>
 80075bc:	4a12      	ldr	r2, [pc, #72]	@ (8007608 <inc_lock+0x118>)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	330c      	adds	r3, #12
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <inc_lock+0xe0>
 80075cc:	2300      	movs	r3, #0
 80075ce:	e015      	b.n	80075fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <inc_lock+0xf8>
 80075d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007608 <inc_lock+0x118>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	4413      	add	r3, r2
 80075de:	330c      	adds	r3, #12
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	e001      	b.n	80075ec <inc_lock+0xfc>
 80075e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075ec:	4906      	ldr	r1, [pc, #24]	@ (8007608 <inc_lock+0x118>)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	440b      	add	r3, r1
 80075f4:	330c      	adds	r3, #12
 80075f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	2001bf84 	.word	0x2001bf84

0800760c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e010      	b.n	800763c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800761a:	4a0d      	ldr	r2, [pc, #52]	@ (8007650 <clear_lock+0x44>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	4413      	add	r3, r2
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d105      	bne.n	8007636 <clear_lock+0x2a>
 800762a:	4a09      	ldr	r2, [pc, #36]	@ (8007650 <clear_lock+0x44>)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	4413      	add	r3, r2
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d9eb      	bls.n	800761a <clear_lock+0xe>
	}
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	2001bf84 	.word	0x2001bf84

08007654 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	78db      	ldrb	r3, [r3, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d034      	beq.n	80076d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7858      	ldrb	r0, [r3, #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007678:	2301      	movs	r3, #1
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	f7ff fd7c 	bl	8007178 <disk_write>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
 800768a:	e022      	b.n	80076d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	1ad2      	subs	r2, r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d217      	bcs.n	80076d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	789b      	ldrb	r3, [r3, #2]
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e010      	b.n	80076cc <sync_window+0x78>
					wsect += fs->fsize;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4413      	add	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7858      	ldrb	r0, [r3, #1]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80076be:	2301      	movs	r3, #1
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	f7ff fd59 	bl	8007178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d8eb      	bhi.n	80076aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d01b      	beq.n	800772c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ffad 	bl	8007654 <sync_window>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d113      	bne.n	800772c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7858      	ldrb	r0, [r3, #1]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800770e:	2301      	movs	r3, #1
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	f7ff fd11 	bl	8007138 <disk_read>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800771c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007720:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	3b02      	subs	r3, #2
 8007744:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	3b02      	subs	r3, #2
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d301      	bcc.n	8007756 <clust2sect+0x20>
 8007752:	2300      	movs	r3, #0
 8007754:	e008      	b.n	8007768 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	895b      	ldrh	r3, [r3, #10]
 800775a:	461a      	mov	r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	fb03 f202 	mul.w	r2, r3, r2
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	4413      	add	r3, r2
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d904      	bls.n	8007794 <get_fat+0x20>
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d302      	bcc.n	800779a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e0ba      	b.n	8007910 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800779a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800779e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	f000 8082 	beq.w	80078ae <get_fat+0x13a>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f300 80a6 	bgt.w	80078fc <get_fat+0x188>
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d002      	beq.n	80077ba <get_fat+0x46>
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d055      	beq.n	8007864 <get_fat+0xf0>
 80077b8:	e0a0      	b.n	80078fc <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	899b      	ldrh	r3, [r3, #12]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d8:	4413      	add	r3, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6938      	ldr	r0, [r7, #16]
 80077de:	f7ff ff7d 	bl	80076dc <move_window>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 808c 	bne.w	8007902 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	60fa      	str	r2, [r7, #12]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	8992      	ldrh	r2, [r2, #12]
 80077f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f8:	fb01 f202 	mul.w	r2, r1, r2
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007806:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	899b      	ldrh	r3, [r3, #12]
 8007810:	4619      	mov	r1, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	fbb3 f3f1 	udiv	r3, r3, r1
 8007818:	4413      	add	r3, r2
 800781a:	4619      	mov	r1, r3
 800781c:	6938      	ldr	r0, [r7, #16]
 800781e:	f7ff ff5d 	bl	80076dc <move_window>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d16e      	bne.n	8007906 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	899b      	ldrh	r3, [r3, #12]
 800782c:	461a      	mov	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	fbb3 f1f2 	udiv	r1, r3, r2
 8007834:	fb01 f202 	mul.w	r2, r1, r2
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4413      	add	r3, r2
 800783e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	4313      	orrs	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <get_fat+0xe6>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	e002      	b.n	8007860 <get_fat+0xec>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007860:	617b      	str	r3, [r7, #20]
			break;
 8007862:	e055      	b.n	8007910 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	899b      	ldrh	r3, [r3, #12]
 800786c:	085b      	lsrs	r3, r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	4619      	mov	r1, r3
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	fbb3 f3f1 	udiv	r3, r3, r1
 8007878:	4413      	add	r3, r2
 800787a:	4619      	mov	r1, r3
 800787c:	6938      	ldr	r0, [r7, #16]
 800787e:	f7ff ff2d 	bl	80076dc <move_window>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d140      	bne.n	800790a <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	8992      	ldrh	r2, [r2, #12]
 8007896:	fbb3 f0f2 	udiv	r0, r3, r2
 800789a:	fb00 f202 	mul.w	r2, r0, r2
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	440b      	add	r3, r1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fca6 	bl	80071f4 <ld_word>
 80078a8:	4603      	mov	r3, r0
 80078aa:	617b      	str	r3, [r7, #20]
			break;
 80078ac:	e030      	b.n	8007910 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	899b      	ldrh	r3, [r3, #12]
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c2:	4413      	add	r3, r2
 80078c4:	4619      	mov	r1, r3
 80078c6:	6938      	ldr	r0, [r7, #16]
 80078c8:	f7ff ff08 	bl	80076dc <move_window>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d11d      	bne.n	800790e <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	8992      	ldrh	r2, [r2, #12]
 80078e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80078e4:	fb00 f202 	mul.w	r2, r0, r2
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	440b      	add	r3, r1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fc99 	bl	8007224 <ld_dword>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078f8:	617b      	str	r3, [r7, #20]
			break;
 80078fa:	e009      	b.n	8007910 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078fc:	2301      	movs	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	e006      	b.n	8007910 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007902:	bf00      	nop
 8007904:	e004      	b.n	8007910 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007906:	bf00      	nop
 8007908:	e002      	b.n	8007910 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800790a:	bf00      	nop
 800790c:	e000      	b.n	8007910 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800790e:	bf00      	nop
		}
	}

	return val;
 8007910:	697b      	ldr	r3, [r7, #20]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b089      	sub	sp, #36	@ 0x24
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007926:	2302      	movs	r3, #2
 8007928:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b01      	cmp	r3, #1
 800792e:	f240 8109 	bls.w	8007b44 <put_fat+0x22a>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	f080 8103 	bcs.w	8007b44 <put_fat+0x22a>
		switch (fs->fs_type) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b03      	cmp	r3, #3
 8007944:	f000 80b6 	beq.w	8007ab4 <put_fat+0x19a>
 8007948:	2b03      	cmp	r3, #3
 800794a:	f300 80fb 	bgt.w	8007b44 <put_fat+0x22a>
 800794e:	2b01      	cmp	r3, #1
 8007950:	d003      	beq.n	800795a <put_fat+0x40>
 8007952:	2b02      	cmp	r3, #2
 8007954:	f000 8083 	beq.w	8007a5e <put_fat+0x144>
 8007958:	e0f4      	b.n	8007b44 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	4413      	add	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	899b      	ldrh	r3, [r3, #12]
 8007970:	4619      	mov	r1, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	fbb3 f3f1 	udiv	r3, r3, r1
 8007978:	4413      	add	r3, r2
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fead 	bl	80076dc <move_window>
 8007982:	4603      	mov	r3, r0
 8007984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007986:	7ffb      	ldrb	r3, [r7, #31]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 80d4 	bne.w	8007b36 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	61ba      	str	r2, [r7, #24]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	8992      	ldrh	r2, [r2, #12]
 800799e:	fbb3 f0f2 	udiv	r0, r3, r2
 80079a2:	fb00 f202 	mul.w	r2, r0, r2
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	440b      	add	r3, r1
 80079aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <put_fat+0xb8>
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b25b      	sxtb	r3, r3
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	b25a      	sxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b25b      	sxtb	r3, r3
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	e001      	b.n	80079d6 <put_fat+0xbc>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	899b      	ldrh	r3, [r3, #12]
 80079e8:	4619      	mov	r1, r3
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80079f0:	4413      	add	r3, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fe71 	bl	80076dc <move_window>
 80079fa:	4603      	mov	r3, r0
 80079fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079fe:	7ffb      	ldrb	r3, [r7, #31]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 809a 	bne.w	8007b3a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	899b      	ldrh	r3, [r3, #12]
 8007a10:	461a      	mov	r2, r3
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a18:	fb00 f202 	mul.w	r2, r0, r2
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	440b      	add	r3, r1
 8007a20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <put_fat+0x11a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e00e      	b.n	8007a52 <put_fat+0x138>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	f023 030f 	bic.w	r3, r3, #15
 8007a3e:	b25a      	sxtb	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	b25b      	sxtb	r3, r3
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	b25b      	sxtb	r3, r3
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	70da      	strb	r2, [r3, #3]
			break;
 8007a5c:	e072      	b.n	8007b44 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	899b      	ldrh	r3, [r3, #12]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a72:	4413      	add	r3, r2
 8007a74:	4619      	mov	r1, r3
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff fe30 	bl	80076dc <move_window>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d15b      	bne.n	8007b3e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	8992      	ldrh	r2, [r2, #12]
 8007a94:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a98:	fb00 f202 	mul.w	r2, r0, r2
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	b292      	uxth	r2, r2
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fbdf 	bl	800726a <st_word>
			fs->wflag = 1;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	70da      	strb	r2, [r3, #3]
			break;
 8007ab2:	e047      	b.n	8007b44 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	899b      	ldrh	r3, [r3, #12]
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ac8:	4413      	add	r3, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff fe05 	bl	80076dc <move_window>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d132      	bne.n	8007b42 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	8992      	ldrh	r2, [r2, #12]
 8007af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007af4:	fb00 f202 	mul.w	r2, r0, r2
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	440b      	add	r3, r1
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fb91 	bl	8007224 <ld_dword>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007b08:	4323      	orrs	r3, r4
 8007b0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	8992      	ldrh	r2, [r2, #12]
 8007b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b1e:	fb00 f202 	mul.w	r2, r0, r2
 8007b22:	1a9b      	subs	r3, r3, r2
 8007b24:	440b      	add	r3, r1
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fbb9 	bl	80072a0 <st_dword>
			fs->wflag = 1;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	70da      	strb	r2, [r3, #3]
			break;
 8007b34:	e006      	b.n	8007b44 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007b36:	bf00      	nop
 8007b38:	e004      	b.n	8007b44 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007b42:	bf00      	nop
		}
	}
	return res;
 8007b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3724      	adds	r7, #36	@ 0x24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd90      	pop	{r4, r7, pc}

08007b4e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b088      	sub	sp, #32
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d904      	bls.n	8007b74 <remove_chain+0x26>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d301      	bcc.n	8007b78 <remove_chain+0x2a>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e04b      	b.n	8007c10 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	69b8      	ldr	r0, [r7, #24]
 8007b86:	f7ff fec8 	bl	800791a <put_fat>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b8e:	7ffb      	ldrb	r3, [r7, #31]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <remove_chain+0x4a>
 8007b94:	7ffb      	ldrb	r3, [r7, #31]
 8007b96:	e03b      	b.n	8007c10 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fdea 	bl	8007774 <get_fat>
 8007ba0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d031      	beq.n	8007c0c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <remove_chain+0x64>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e02e      	b.n	8007c10 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb8:	d101      	bne.n	8007bbe <remove_chain+0x70>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e028      	b.n	8007c10 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	69b8      	ldr	r0, [r7, #24]
 8007bc4:	f7ff fea9 	bl	800791a <put_fat>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007bcc:	7ffb      	ldrb	r3, [r7, #31]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <remove_chain+0x88>
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	e01c      	b.n	8007c10 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	3b02      	subs	r3, #2
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d20b      	bcs.n	8007bfc <remove_chain+0xae>
			fs->free_clst++;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	791b      	ldrb	r3, [r3, #4]
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d3c6      	bcc.n	8007b98 <remove_chain+0x4a>
 8007c0a:	e000      	b.n	8007c0e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c0c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10d      	bne.n	8007c4a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <create_chain+0x2c>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d31b      	bcc.n	8007c7c <create_chain+0x64>
 8007c44:	2301      	movs	r3, #1
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	e018      	b.n	8007c7c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff fd91 	bl	8007774 <get_fat>
 8007c52:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d801      	bhi.n	8007c5e <create_chain+0x46>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e070      	b.n	8007d40 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c64:	d101      	bne.n	8007c6a <create_chain+0x52>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	e06a      	b.n	8007d40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d201      	bcs.n	8007c78 <create_chain+0x60>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	e063      	b.n	8007d40 <create_chain+0x128>
		scl = clst;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	3301      	adds	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d307      	bcc.n	8007ca0 <create_chain+0x88>
				ncl = 2;
 8007c90:	2302      	movs	r3, #2
 8007c92:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d901      	bls.n	8007ca0 <create_chain+0x88>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e04f      	b.n	8007d40 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fd66 	bl	8007774 <get_fat>
 8007ca8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d003      	beq.n	8007cbe <create_chain+0xa6>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cbc:	d101      	bne.n	8007cc2 <create_chain+0xaa>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	e03e      	b.n	8007d40 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d1da      	bne.n	8007c80 <create_chain+0x68>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e038      	b.n	8007d40 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007cce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cd4:	69f9      	ldr	r1, [r7, #28]
 8007cd6:	6938      	ldr	r0, [r7, #16]
 8007cd8:	f7ff fe1f 	bl	800791a <put_fat>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <create_chain+0xe2>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6938      	ldr	r0, [r7, #16]
 8007cf2:	f7ff fe12 	bl	800791a <put_fat>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d116      	bne.n	8007d2e <create_chain+0x116>
		fs->last_clst = ncl;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	3b02      	subs	r3, #2
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d804      	bhi.n	8007d1e <create_chain+0x106>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	791b      	ldrb	r3, [r3, #4]
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	711a      	strb	r2, [r3, #4]
 8007d2c:	e007      	b.n	8007d3e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d102      	bne.n	8007d3a <create_chain+0x122>
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d38:	e000      	b.n	8007d3c <create_chain+0x124>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d3e:	69fb      	ldr	r3, [r7, #28]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	899b      	ldrh	r3, [r3, #12]
 8007d64:	461a      	mov	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	8952      	ldrh	r2, [r2, #10]
 8007d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1d1a      	adds	r2, r3, #4
 8007d7a:	613a      	str	r2, [r7, #16]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <clmt_clust+0x42>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e010      	b.n	8007dac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d307      	bcc.n	8007da2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007da0:	e7e9      	b.n	8007d76 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007da2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	4413      	add	r3, r2
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dce:	d204      	bcs.n	8007dda <dir_sdi+0x22>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <dir_sdi+0x26>
		return FR_INT_ERR;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e071      	b.n	8007ec2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <dir_sdi+0x46>
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d902      	bls.n	8007dfe <dir_sdi+0x46>
		clst = fs->dirbase;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10c      	bne.n	8007e1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	8912      	ldrh	r2, [r2, #8]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d301      	bcc.n	8007e14 <dir_sdi+0x5c>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e056      	b.n	8007ec2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	61da      	str	r2, [r3, #28]
 8007e1c:	e02d      	b.n	8007e7a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	895b      	ldrh	r3, [r3, #10]
 8007e22:	461a      	mov	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	899b      	ldrh	r3, [r3, #12]
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
 8007e2c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e2e:	e019      	b.n	8007e64 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6979      	ldr	r1, [r7, #20]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fc9d 	bl	8007774 <get_fat>
 8007e3a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e42:	d101      	bne.n	8007e48 <dir_sdi+0x90>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e03c      	b.n	8007ec2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d904      	bls.n	8007e58 <dir_sdi+0xa0>
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d301      	bcc.n	8007e5c <dir_sdi+0xa4>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e032      	b.n	8007ec2 <dir_sdi+0x10a>
			ofs -= csz;
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d2e1      	bcs.n	8007e30 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	6938      	ldr	r0, [r7, #16]
 8007e70:	f7ff fc61 	bl	8007736 <clust2sect>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <dir_sdi+0xd4>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e01a      	b.n	8007ec2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	899b      	ldrh	r3, [r3, #12]
 8007e94:	4619      	mov	r1, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e9c:	441a      	add	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	899b      	ldrh	r3, [r3, #12]
 8007eac:	461a      	mov	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb4:	fb00 f202 	mul.w	r2, r0, r2
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	18ca      	adds	r2, r1, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b086      	sub	sp, #24
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	3320      	adds	r3, #32
 8007ee0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <dir_next+0x28>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ef0:	d301      	bcc.n	8007ef6 <dir_next+0x2c>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	e0bb      	b.n	800806e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	899b      	ldrh	r3, [r3, #12]
 8007efa:	461a      	mov	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f02:	fb01 f202 	mul.w	r2, r1, r2
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 809d 	bne.w	8008048 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	8912      	ldrh	r2, [r2, #8]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f0c0 808d 	bcc.w	8008048 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	61da      	str	r2, [r3, #28]
 8007f34:	2304      	movs	r3, #4
 8007f36:	e09a      	b.n	800806e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	899b      	ldrh	r3, [r3, #12]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	8952      	ldrh	r2, [r2, #10]
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d17b      	bne.n	8008048 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7ff fc0b 	bl	8007774 <get_fat>
 8007f5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d801      	bhi.n	8007f6a <dir_next+0xa0>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e081      	b.n	800806e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f70:	d101      	bne.n	8007f76 <dir_next+0xac>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e07b      	b.n	800806e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d359      	bcc.n	8008034 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	61da      	str	r2, [r3, #28]
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	e06e      	b.n	800806e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7ff fe3d 	bl	8007c18 <create_chain>
 8007f9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <dir_next+0xe0>
 8007fa6:	2307      	movs	r3, #7
 8007fa8:	e061      	b.n	800806e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <dir_next+0xea>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e05c      	b.n	800806e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fba:	d101      	bne.n	8007fc0 <dir_next+0xf6>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e056      	b.n	800806e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff fb47 	bl	8007654 <sync_window>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <dir_next+0x106>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e04e      	b.n	800806e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	899b      	ldrh	r3, [r3, #12]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f7ff f9ac 	bl	800733a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	6979      	ldr	r1, [r7, #20]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff fba4 	bl	8007736 <clust2sect>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ff4:	e012      	b.n	800801c <dir_next+0x152>
						fs->wflag = 1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff fb29 	bl	8007654 <sync_window>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <dir_next+0x142>
 8008008:	2301      	movs	r3, #1
 800800a:	e030      	b.n	800806e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3301      	adds	r3, #1
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	635a      	str	r2, [r3, #52]	@ 0x34
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	895b      	ldrh	r3, [r3, #10]
 8008020:	461a      	mov	r2, r3
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4293      	cmp	r3, r2
 8008026:	d3e6      	bcc.n	8007ff6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad2      	subs	r2, r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800803a:	6979      	ldr	r1, [r7, #20]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fb7a 	bl	8007736 <clust2sect>
 8008042:	4602      	mov	r2, r0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	899b      	ldrh	r3, [r3, #12]
 8008058:	461a      	mov	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008060:	fb00 f202 	mul.w	r2, r0, r2
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	18ca      	adds	r2, r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008086:	2100      	movs	r1, #0
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fe95 	bl	8007db8 <dir_sdi>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d12b      	bne.n	80080f0 <dir_alloc+0x7a>
		n = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	4619      	mov	r1, r3
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fb1a 	bl	80076dc <move_window>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11d      	bne.n	80080ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2be5      	cmp	r3, #229	@ 0xe5
 80080ba:	d004      	beq.n	80080c6 <dir_alloc+0x50>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3301      	adds	r3, #1
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d102      	bne.n	80080da <dir_alloc+0x64>
 80080d4:	e00c      	b.n	80080f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fef4 	bl	8007eca <dir_next>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0d7      	beq.n	800809c <dir_alloc+0x26>
 80080ec:	e000      	b.n	80080f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80080ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d101      	bne.n	80080fa <dir_alloc+0x84>
 80080f6:	2307      	movs	r3, #7
 80080f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	331a      	adds	r3, #26
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff f86e 	bl	80071f4 <ld_word>
 8008118:	4603      	mov	r3, r0
 800811a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d109      	bne.n	8008138 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	3314      	adds	r3, #20
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff f863 	bl	80071f4 <ld_word>
 800812e:	4603      	mov	r3, r0
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008138:	68fb      	ldr	r3, [r7, #12]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	331a      	adds	r3, #26
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	b292      	uxth	r2, r2
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff f886 	bl	800726a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d109      	bne.n	800817a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f103 0214 	add.w	r2, r3, #20
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	0c1b      	lsrs	r3, r3, #16
 8008170:	b29b      	uxth	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7ff f878 	bl	800726a <st_word>
	}
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	331a      	adds	r3, #26
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff f82e 	bl	80071f4 <ld_word>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <cmp_lfn+0x1e>
 800819e:	2300      	movs	r3, #0
 80081a0:	e059      	b.n	8008256 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081aa:	1e5a      	subs	r2, r3, #1
 80081ac:	4613      	mov	r3, r2
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80081b8:	2301      	movs	r3, #1
 80081ba:	81fb      	strh	r3, [r7, #14]
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	e033      	b.n	800822a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80081c2:	4a27      	ldr	r2, [pc, #156]	@ (8008260 <cmp_lfn+0xdc>)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff f80f 	bl	80071f4 <ld_word>
 80081d6:	4603      	mov	r3, r0
 80081d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80081da:	89fb      	ldrh	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80081e4:	d812      	bhi.n	800820c <cmp_lfn+0x88>
 80081e6:	89bb      	ldrh	r3, [r7, #12]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fcc9 	bl	8009b80 <ff_wtoupper>
 80081ee:	4603      	mov	r3, r0
 80081f0:	461c      	mov	r4, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	617a      	str	r2, [r7, #20]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f001 fcbd 	bl	8009b80 <ff_wtoupper>
 8008206:	4603      	mov	r3, r0
 8008208:	429c      	cmp	r4, r3
 800820a:	d001      	beq.n	8008210 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800820c:	2300      	movs	r3, #0
 800820e:	e022      	b.n	8008256 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008210:	89bb      	ldrh	r3, [r7, #12]
 8008212:	81fb      	strh	r3, [r7, #14]
 8008214:	e006      	b.n	8008224 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008216:	89bb      	ldrh	r3, [r7, #12]
 8008218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800821c:	4293      	cmp	r3, r2
 800821e:	d001      	beq.n	8008224 <cmp_lfn+0xa0>
 8008220:	2300      	movs	r3, #0
 8008222:	e018      	b.n	8008256 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3301      	adds	r3, #1
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d9c8      	bls.n	80081c2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <cmp_lfn+0xd0>
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d008      	beq.n	8008254 <cmp_lfn+0xd0>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <cmp_lfn+0xd0>
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008254:	2301      	movs	r3, #1
}
 8008256:	4618      	mov	r0, r3
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd90      	pop	{r4, r7, pc}
 800825e:	bf00      	nop
 8008260:	0800a2c4 	.word	0x0800a2c4

08008264 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4611      	mov	r1, r2
 8008270:	461a      	mov	r2, r3
 8008272:	460b      	mov	r3, r1
 8008274:	71fb      	strb	r3, [r7, #7]
 8008276:	4613      	mov	r3, r2
 8008278:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	330d      	adds	r3, #13
 800827e:	79ba      	ldrb	r2, [r7, #6]
 8008280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	330b      	adds	r3, #11
 8008286:	220f      	movs	r2, #15
 8008288:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	330c      	adds	r3, #12
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	331a      	adds	r3, #26
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe ffe6 	bl	800726a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	1e5a      	subs	r2, r3, #1
 80082a2:	4613      	mov	r3, r2
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	82fb      	strh	r3, [r7, #22]
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80082b6:	8afb      	ldrh	r3, [r7, #22]
 80082b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082bc:	4293      	cmp	r3, r2
 80082be:	d007      	beq.n	80082d0 <put_lfn+0x6c>
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	61fa      	str	r2, [r7, #28]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80082d0:	4a17      	ldr	r2, [pc, #92]	@ (8008330 <put_lfn+0xcc>)
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	4413      	add	r3, r2
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	8afa      	ldrh	r2, [r7, #22]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe ffc1 	bl	800726a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80082e8:	8afb      	ldrh	r3, [r7, #22]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <put_lfn+0x90>
 80082ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	3301      	adds	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	d9da      	bls.n	80082b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008300:	8afb      	ldrh	r3, [r7, #22]
 8008302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008306:	4293      	cmp	r3, r2
 8008308:	d006      	beq.n	8008318 <put_lfn+0xb4>
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <put_lfn+0xbc>
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	79fa      	ldrb	r2, [r7, #7]
 8008324:	701a      	strb	r2, [r3, #0]
}
 8008326:	bf00      	nop
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	0800a2c4 	.word	0x0800a2c4

08008334 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	@ 0x30
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008342:	220b      	movs	r2, #11
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7fe ffd6 	bl	80072f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b05      	cmp	r3, #5
 8008350:	d92b      	bls.n	80083aa <gen_numname+0x76>
		sr = seq;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008356:	e022      	b.n	800839e <gen_numname+0x6a>
			wc = *lfn++;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1c9a      	adds	r2, r3, #2
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008362:	2300      	movs	r3, #0
 8008364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008366:	e017      	b.n	8008398 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	005a      	lsls	r2, r3, #1
 800836c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	4413      	add	r3, r2
 8008374:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008376:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <gen_numname+0x5e>
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800838c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008390:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	3301      	adds	r3, #1
 8008396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d9e4      	bls.n	8008368 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d8      	bne.n	8008358 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80083aa:	2307      	movs	r3, #7
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	3330      	adds	r3, #48	@ 0x30
 80083ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80083be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083c2:	2b39      	cmp	r3, #57	@ 0x39
 80083c4:	d904      	bls.n	80083d0 <gen_numname+0x9c>
 80083c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083ca:	3307      	adds	r3, #7
 80083cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80083d6:	3330      	adds	r3, #48	@ 0x30
 80083d8:	443b      	add	r3, r7
 80083da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80083de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	091b      	lsrs	r3, r3, #4
 80083e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1df      	bne.n	80083ae <gen_numname+0x7a>
	ns[i] = '~';
 80083ee:	f107 0214 	add.w	r2, r7, #20
 80083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f4:	4413      	add	r3, r2
 80083f6:	227e      	movs	r2, #126	@ 0x7e
 80083f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fe:	e002      	b.n	8008406 <gen_numname+0xd2>
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	3301      	adds	r3, #1
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
 8008406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	429a      	cmp	r2, r3
 800840c:	d205      	bcs.n	800841a <gen_numname+0xe6>
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	4413      	add	r3, r2
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b20      	cmp	r3, #32
 8008418:	d1f2      	bne.n	8008400 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	2b07      	cmp	r3, #7
 800841e:	d807      	bhi.n	8008430 <gen_numname+0xfc>
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008426:	3330      	adds	r3, #48	@ 0x30
 8008428:	443b      	add	r3, r7
 800842a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800842e:	e000      	b.n	8008432 <gen_numname+0xfe>
 8008430:	2120      	movs	r1, #32
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	627a      	str	r2, [r7, #36]	@ 0x24
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	460a      	mov	r2, r1
 800843e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2b07      	cmp	r3, #7
 8008444:	d9e9      	bls.n	800841a <gen_numname+0xe6>
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	3730      	adds	r7, #48	@ 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800845c:	230b      	movs	r3, #11
 800845e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	b2da      	uxtb	r2, r3
 8008464:	0852      	lsrs	r2, r2, #1
 8008466:	01db      	lsls	r3, r3, #7
 8008468:	4313      	orrs	r3, r2
 800846a:	b2da      	uxtb	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1c59      	adds	r1, r3, #1
 8008470:	6079      	str	r1, [r7, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4413      	add	r3, r2
 8008476:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	3b01      	subs	r3, #1
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1ed      	bne.n	8008460 <sum_sfn+0x10>
	return sum;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b086      	sub	sp, #24
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084a0:	2100      	movs	r1, #0
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fc88 	bl	8007db8 <dir_sdi>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <dir_find+0x24>
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	e0a9      	b.n	800860a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80084b6:	23ff      	movs	r3, #255	@ 0xff
 80084b8:	753b      	strb	r3, [r7, #20]
 80084ba:	7d3b      	ldrb	r3, [r7, #20]
 80084bc:	757b      	strb	r3, [r7, #21]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084c4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6938      	ldr	r0, [r7, #16]
 80084ce:	f7ff f905 	bl	80076dc <move_window>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8090 	bne.w	80085fe <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084e6:	7dbb      	ldrb	r3, [r7, #22]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <dir_find+0x60>
 80084ec:	2304      	movs	r3, #4
 80084ee:	75fb      	strb	r3, [r7, #23]
 80084f0:	e08a      	b.n	8008608 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	330b      	adds	r3, #11
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7bfa      	ldrb	r2, [r7, #15]
 8008504:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008506:	7dbb      	ldrb	r3, [r7, #22]
 8008508:	2be5      	cmp	r3, #229	@ 0xe5
 800850a:	d007      	beq.n	800851c <dir_find+0x8a>
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <dir_find+0x98>
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d006      	beq.n	800852a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800851c:	23ff      	movs	r3, #255	@ 0xff
 800851e:	757b      	strb	r3, [r7, #21]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008526:	631a      	str	r2, [r3, #48]	@ 0x30
 8008528:	e05e      	b.n	80085e8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b0f      	cmp	r3, #15
 800852e:	d136      	bne.n	800859e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d154      	bne.n	80085e8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800853e:	7dbb      	ldrb	r3, [r7, #22]
 8008540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00d      	beq.n	8008564 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	7b5b      	ldrb	r3, [r3, #13]
 800854e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008550:	7dbb      	ldrb	r3, [r7, #22]
 8008552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008556:	75bb      	strb	r3, [r7, #22]
 8008558:	7dbb      	ldrb	r3, [r7, #22]
 800855a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	695a      	ldr	r2, [r3, #20]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008564:	7dba      	ldrb	r2, [r7, #22]
 8008566:	7d7b      	ldrb	r3, [r7, #21]
 8008568:	429a      	cmp	r2, r3
 800856a:	d115      	bne.n	8008598 <dir_find+0x106>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	330d      	adds	r3, #13
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	7d3a      	ldrb	r2, [r7, #20]
 8008576:	429a      	cmp	r2, r3
 8008578:	d10e      	bne.n	8008598 <dir_find+0x106>
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7ff fdfd 	bl	8008184 <cmp_lfn>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <dir_find+0x106>
 8008590:	7d7b      	ldrb	r3, [r7, #21]
 8008592:	3b01      	subs	r3, #1
 8008594:	b2db      	uxtb	r3, r3
 8008596:	e000      	b.n	800859a <dir_find+0x108>
 8008598:	23ff      	movs	r3, #255	@ 0xff
 800859a:	757b      	strb	r3, [r7, #21]
 800859c:	e024      	b.n	80085e8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800859e:	7d7b      	ldrb	r3, [r7, #21]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <dir_find+0x126>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff ff51 	bl	8008450 <sum_sfn>
 80085ae:	4603      	mov	r3, r0
 80085b0:	461a      	mov	r2, r3
 80085b2:	7d3b      	ldrb	r3, [r7, #20]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d024      	beq.n	8008602 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <dir_find+0x14a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a18      	ldr	r0, [r3, #32]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3324      	adds	r3, #36	@ 0x24
 80085ce:	220b      	movs	r2, #11
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7fe fecd 	bl	8007370 <mem_cmp>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d014      	beq.n	8008606 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80085dc:	23ff      	movs	r3, #255	@ 0xff
 80085de:	757b      	strb	r3, [r7, #21]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085e6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fc6d 	bl	8007eca <dir_next>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f43f af65 	beq.w	80084c6 <dir_find+0x34>
 80085fc:	e004      	b.n	8008608 <dir_find+0x176>
		if (res != FR_OK) break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008606:	bf00      	nop

	return res;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08c      	sub	sp, #48	@ 0x30
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008628:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <dir_register+0x20>
 8008630:	2306      	movs	r3, #6
 8008632:	e0e0      	b.n	80087f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008634:	2300      	movs	r3, #0
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
 8008638:	e002      	b.n	8008640 <dir_register+0x2c>
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	3301      	adds	r3, #1
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	4413      	add	r3, r2
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1f4      	bne.n	800863a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008656:	f107 030c 	add.w	r3, r7, #12
 800865a:	220c      	movs	r2, #12
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fe4b 	bl	80072f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d032      	beq.n	80086d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2240      	movs	r2, #64	@ 0x40
 8008670:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008674:	2301      	movs	r3, #1
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008678:	e016      	b.n	80086a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	f107 010c 	add.w	r1, r7, #12
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	f7ff fe53 	bl	8008334 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff feff 	bl	8008492 <dir_find>
 8008694:	4603      	mov	r3, r0
 8008696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800869a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	3301      	adds	r3, #1
 80086a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b63      	cmp	r3, #99	@ 0x63
 80086ac:	d9e5      	bls.n	800867a <dir_register+0x66>
 80086ae:	e000      	b.n	80086b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80086b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	2b64      	cmp	r3, #100	@ 0x64
 80086b6:	d101      	bne.n	80086bc <dir_register+0xa8>
 80086b8:	2307      	movs	r3, #7
 80086ba:	e09c      	b.n	80087f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80086bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d002      	beq.n	80086ca <dir_register+0xb6>
 80086c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086c8:	e095      	b.n	80087f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80086ca:	7dfa      	ldrb	r2, [r7, #23]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d007      	beq.n	80086ec <dir_register+0xd8>
 80086dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086de:	330c      	adds	r3, #12
 80086e0:	4a47      	ldr	r2, [pc, #284]	@ (8008800 <dir_register+0x1ec>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	089b      	lsrs	r3, r3, #2
 80086e8:	3301      	adds	r3, #1
 80086ea:	e000      	b.n	80086ee <dir_register+0xda>
 80086ec:	2301      	movs	r3, #1
 80086ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80086f0:	6a39      	ldr	r1, [r7, #32]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fcbf 	bl	8008076 <dir_alloc>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80086fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008702:	2b00      	cmp	r3, #0
 8008704:	d148      	bne.n	8008798 <dir_register+0x184>
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	3b01      	subs	r3, #1
 800870a:	623b      	str	r3, [r7, #32]
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d042      	beq.n	8008798 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	695a      	ldr	r2, [r3, #20]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	015b      	lsls	r3, r3, #5
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fb4a 	bl	8007db8 <dir_sdi>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800872a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800872e:	2b00      	cmp	r3, #0
 8008730:	d132      	bne.n	8008798 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3324      	adds	r3, #36	@ 0x24
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fe8a 	bl	8008450 <sum_sfn>
 800873c:	4603      	mov	r3, r0
 800873e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	4619      	mov	r1, r3
 8008746:	69f8      	ldr	r0, [r7, #28]
 8008748:	f7fe ffc8 	bl	80076dc <move_window>
 800874c:	4603      	mov	r3, r0
 800874e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11d      	bne.n	8008796 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	6918      	ldr	r0, [r3, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a19      	ldr	r1, [r3, #32]
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	b2da      	uxtb	r2, r3
 8008766:	7efb      	ldrb	r3, [r7, #27]
 8008768:	f7ff fd7c 	bl	8008264 <put_lfn>
				fs->wflag = 1;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2201      	movs	r2, #1
 8008770:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008772:	2100      	movs	r1, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff fba8 	bl	8007eca <dir_next>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008780:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008784:	2b00      	cmp	r3, #0
 8008786:	d107      	bne.n	8008798 <dir_register+0x184>
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	3b01      	subs	r3, #1
 800878c:	623b      	str	r3, [r7, #32]
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1d5      	bne.n	8008740 <dir_register+0x12c>
 8008794:	e000      	b.n	8008798 <dir_register+0x184>
				if (res != FR_OK) break;
 8008796:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008798:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800879c:	2b00      	cmp	r3, #0
 800879e:	d128      	bne.n	80087f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4619      	mov	r1, r3
 80087a6:	69f8      	ldr	r0, [r7, #28]
 80087a8:	f7fe ff98 	bl	80076dc <move_window>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80087b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d11b      	bne.n	80087f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	2220      	movs	r2, #32
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fdb9 	bl	800733a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a18      	ldr	r0, [r3, #32]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3324      	adds	r3, #36	@ 0x24
 80087d0:	220b      	movs	r2, #11
 80087d2:	4619      	mov	r1, r3
 80087d4:	f7fe fd90 	bl	80072f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	330c      	adds	r3, #12
 80087e4:	f002 0218 	and.w	r2, r2, #24
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2201      	movs	r2, #1
 80087f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80087f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3730      	adds	r7, #48	@ 0x30
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	4ec4ec4f 	.word	0x4ec4ec4f

08008804 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	@ 0x28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	61ba      	str	r2, [r7, #24]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4413      	add	r3, r2
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008834:	2b1f      	cmp	r3, #31
 8008836:	d940      	bls.n	80088ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800883a:	2b2f      	cmp	r3, #47	@ 0x2f
 800883c:	d006      	beq.n	800884c <create_name+0x48>
 800883e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008840:	2b5c      	cmp	r3, #92	@ 0x5c
 8008842:	d110      	bne.n	8008866 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008844:	e002      	b.n	800884c <create_name+0x48>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	3301      	adds	r3, #1
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b2f      	cmp	r3, #47	@ 0x2f
 8008856:	d0f6      	beq.n	8008846 <create_name+0x42>
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	4413      	add	r3, r2
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b5c      	cmp	r3, #92	@ 0x5c
 8008862:	d0f0      	beq.n	8008846 <create_name+0x42>
			break;
 8008864:	e02a      	b.n	80088bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2bfe      	cmp	r3, #254	@ 0xfe
 800886a:	d901      	bls.n	8008870 <create_name+0x6c>
 800886c:	2306      	movs	r3, #6
 800886e:	e17d      	b.n	8008b6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008872:	b2db      	uxtb	r3, r3
 8008874:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008878:	2101      	movs	r1, #1
 800887a:	4618      	mov	r0, r3
 800887c:	f001 f944 	bl	8009b08 <ff_convert>
 8008880:	4603      	mov	r3, r0
 8008882:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <create_name+0x8a>
 800888a:	2306      	movs	r3, #6
 800888c:	e16e      	b.n	8008b6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800888e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008890:	2b7f      	cmp	r3, #127	@ 0x7f
 8008892:	d809      	bhi.n	80088a8 <create_name+0xa4>
 8008894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008896:	4619      	mov	r1, r3
 8008898:	488d      	ldr	r0, [pc, #564]	@ (8008ad0 <create_name+0x2cc>)
 800889a:	f7fe fd90 	bl	80073be <chk_chr>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <create_name+0xa4>
 80088a4:	2306      	movs	r3, #6
 80088a6:	e161      	b.n	8008b6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	617a      	str	r2, [r7, #20]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80088b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80088b8:	e7b4      	b.n	8008824 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80088ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	441a      	add	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80088c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088c8:	2b1f      	cmp	r3, #31
 80088ca:	d801      	bhi.n	80088d0 <create_name+0xcc>
 80088cc:	2304      	movs	r3, #4
 80088ce:	e000      	b.n	80088d2 <create_name+0xce>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80088d6:	e011      	b.n	80088fc <create_name+0xf8>
		w = lfn[di - 1];
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80088de:	3b01      	subs	r3, #1
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80088ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d002      	beq.n	80088f6 <create_name+0xf2>
 80088f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088f4:	d106      	bne.n	8008904 <create_name+0x100>
		di--;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1ea      	bne.n	80088d8 <create_name+0xd4>
 8008902:	e000      	b.n	8008906 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008904:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	2200      	movs	r2, #0
 8008910:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <create_name+0x118>
 8008918:	2306      	movs	r3, #6
 800891a:	e127      	b.n	8008b6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3324      	adds	r3, #36	@ 0x24
 8008920:	220b      	movs	r2, #11
 8008922:	2120      	movs	r1, #32
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fd08 	bl	800733a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800892a:	2300      	movs	r3, #0
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	e002      	b.n	8008936 <create_name+0x132>
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	3301      	adds	r3, #1
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4413      	add	r3, r2
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	2b20      	cmp	r3, #32
 8008942:	d0f5      	beq.n	8008930 <create_name+0x12c>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008950:	d0ee      	beq.n	8008930 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <create_name+0x168>
 8008958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800895c:	f043 0303 	orr.w	r3, r3, #3
 8008960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008964:	e002      	b.n	800896c <create_name+0x168>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	3b01      	subs	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <create_name+0x182>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008978:	3b01      	subs	r3, #1
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	2b2e      	cmp	r3, #46	@ 0x2e
 8008984:	d1ef      	bne.n	8008966 <create_name+0x162>

	i = b = 0; ni = 8;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800898c:	2300      	movs	r3, #0
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	2308      	movs	r3, #8
 8008992:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	61ba      	str	r2, [r7, #24]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80089a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8090 	beq.w	8008acc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80089ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d006      	beq.n	80089c0 <create_name+0x1bc>
 80089b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089b6:	d10a      	bne.n	80089ce <create_name+0x1ca>
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d006      	beq.n	80089ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80089c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089c4:	f043 0303 	orr.w	r3, r3, #3
 80089c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80089cc:	e07d      	b.n	8008aca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d203      	bcs.n	80089de <create_name+0x1da>
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d123      	bne.n	8008a26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	2b0b      	cmp	r3, #11
 80089e2:	d106      	bne.n	80089f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80089e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089e8:	f043 0303 	orr.w	r3, r3, #3
 80089ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80089f0:	e075      	b.n	8008ade <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d005      	beq.n	8008a06 <create_name+0x202>
 80089fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089fe:	f043 0303 	orr.w	r3, r3, #3
 8008a02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d866      	bhi.n	8008adc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	2308      	movs	r3, #8
 8008a14:	623b      	str	r3, [r7, #32]
 8008a16:	230b      	movs	r3, #11
 8008a18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a24:	e051      	b.n	8008aca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a2a:	d914      	bls.n	8008a56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 f869 	bl	8009b08 <ff_convert>
 8008a36:	4603      	mov	r3, r0
 8008a38:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <create_name+0x246>
 8008a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a42:	3b80      	subs	r3, #128	@ 0x80
 8008a44:	4a23      	ldr	r2, [pc, #140]	@ (8008ad4 <create_name+0x2d0>)
 8008a46:	5cd3      	ldrb	r3, [r2, r3]
 8008a48:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a4e:	f043 0302 	orr.w	r3, r3, #2
 8008a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <create_name+0x268>
 8008a5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a5e:	4619      	mov	r1, r3
 8008a60:	481d      	ldr	r0, [pc, #116]	@ (8008ad8 <create_name+0x2d4>)
 8008a62:	f7fe fcac 	bl	80073be <chk_chr>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008a6c:	235f      	movs	r3, #95	@ 0x5f
 8008a6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a74:	f043 0303 	orr.w	r3, r3, #3
 8008a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a7c:	e01b      	b.n	8008ab6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a80:	2b40      	cmp	r3, #64	@ 0x40
 8008a82:	d909      	bls.n	8008a98 <create_name+0x294>
 8008a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a86:	2b5a      	cmp	r3, #90	@ 0x5a
 8008a88:	d806      	bhi.n	8008a98 <create_name+0x294>
					b |= 2;
 8008a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a8e:	f043 0302 	orr.w	r3, r3, #2
 8008a92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a96:	e00e      	b.n	8008ab6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a9a:	2b60      	cmp	r3, #96	@ 0x60
 8008a9c:	d90b      	bls.n	8008ab6 <create_name+0x2b2>
 8008a9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa0:	2b7a      	cmp	r3, #122	@ 0x7a
 8008aa2:	d808      	bhi.n	8008ab6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008ab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ab2:	3b20      	subs	r3, #32
 8008ab4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	623a      	str	r2, [r7, #32]
 8008abc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008abe:	b2d1      	uxtb	r1, r2
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	460a      	mov	r2, r1
 8008ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008aca:	e763      	b.n	8008994 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008acc:	bf00      	nop
 8008ace:	e006      	b.n	8008ade <create_name+0x2da>
 8008ad0:	08009d2c 	.word	0x08009d2c
 8008ad4:	0800a244 	.word	0x0800a244
 8008ad8:	08009d38 	.word	0x08009d38
			if (si > di) break;			/* No extension */
 8008adc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ae4:	2be5      	cmp	r3, #229	@ 0xe5
 8008ae6:	d103      	bne.n	8008af0 <create_name+0x2ec>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2205      	movs	r2, #5
 8008aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d104      	bne.n	8008b00 <create_name+0x2fc>
 8008af6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b04:	f003 030c 	and.w	r3, r3, #12
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	d005      	beq.n	8008b18 <create_name+0x314>
 8008b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d105      	bne.n	8008b24 <create_name+0x320>
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d117      	bne.n	8008b60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d105      	bne.n	8008b48 <create_name+0x344>
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b40:	f043 0310 	orr.w	r3, r3, #16
 8008b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008b48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b4c:	f003 030c 	and.w	r3, r3, #12
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d105      	bne.n	8008b60 <create_name+0x35c>
 8008b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b58:	f043 0308 	orr.w	r3, r3, #8
 8008b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008b6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3728      	adds	r7, #40	@ 0x28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b88:	e002      	b.n	8008b90 <follow_path+0x1c>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b96:	d0f8      	beq.n	8008b8a <follow_path+0x16>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b9e:	d0f4      	beq.n	8008b8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b1f      	cmp	r3, #31
 8008bac:	d80a      	bhi.n	8008bc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2280      	movs	r2, #128	@ 0x80
 8008bb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff f8fd 	bl	8007db8 <dir_sdi>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	75fb      	strb	r3, [r7, #23]
 8008bc2:	e048      	b.n	8008c56 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff fe1b 	bl	8008804 <create_name>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d139      	bne.n	8008c4c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff fc5a 	bl	8008492 <dir_find>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008be8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d12c      	bne.n	8008c50 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d127      	bne.n	8008c50 <follow_path+0xdc>
 8008c00:	2305      	movs	r3, #5
 8008c02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c04:	e024      	b.n	8008c50 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d121      	bne.n	8008c54 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	799b      	ldrb	r3, [r3, #6]
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008c1c:	2305      	movs	r3, #5
 8008c1e:	75fb      	strb	r3, [r7, #23]
 8008c20:	e019      	b.n	8008c56 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	8992      	ldrh	r2, [r2, #12]
 8008c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c34:	fb00 f202 	mul.w	r2, r0, r2
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	440b      	add	r3, r1
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fa60 	bl	8008104 <ld_clust>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c4a:	e7bb      	b.n	8008bc4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008c4c:	bf00      	nop
 8008c4e:	e002      	b.n	8008c56 <follow_path+0xe2>
				break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c54:	bf00      	nop
			}
		}
	}

	return res;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c6c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d031      	beq.n	8008cda <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e002      	b.n	8008c84 <get_ldnumber+0x24>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	3301      	adds	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b1f      	cmp	r3, #31
 8008c8a:	d903      	bls.n	8008c94 <get_ldnumber+0x34>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c92:	d1f4      	bne.n	8008c7e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c9a:	d11c      	bne.n	8008cd6 <get_ldnumber+0x76>
			tp = *path;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	60fa      	str	r2, [r7, #12]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	3b30      	subs	r3, #48	@ 0x30
 8008cac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b09      	cmp	r3, #9
 8008cb2:	d80e      	bhi.n	8008cd2 <get_ldnumber+0x72>
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d10a      	bne.n	8008cd2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d107      	bne.n	8008cd2 <get_ldnumber+0x72>
					vol = (int)i;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	e002      	b.n	8008cdc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008cda:	693b      	ldr	r3, [r7, #16]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	70da      	strb	r2, [r3, #3]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cfe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fe fcea 	bl	80076dc <move_window>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <check_fs+0x2a>
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e038      	b.n	8008d84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3338      	adds	r3, #56	@ 0x38
 8008d16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fa6a 	bl	80071f4 <ld_word>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d001      	beq.n	8008d30 <check_fs+0x48>
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e029      	b.n	8008d84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d36:	2be9      	cmp	r3, #233	@ 0xe9
 8008d38:	d009      	beq.n	8008d4e <check_fs+0x66>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d40:	2beb      	cmp	r3, #235	@ 0xeb
 8008d42:	d11e      	bne.n	8008d82 <check_fs+0x9a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008d4a:	2b90      	cmp	r3, #144	@ 0x90
 8008d4c:	d119      	bne.n	8008d82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3338      	adds	r3, #56	@ 0x38
 8008d52:	3336      	adds	r3, #54	@ 0x36
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fa65 	bl	8007224 <ld_dword>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008d60:	4a0a      	ldr	r2, [pc, #40]	@ (8008d8c <check_fs+0xa4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d101      	bne.n	8008d6a <check_fs+0x82>
 8008d66:	2300      	movs	r3, #0
 8008d68:	e00c      	b.n	8008d84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3338      	adds	r3, #56	@ 0x38
 8008d6e:	3352      	adds	r3, #82	@ 0x52
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fa57 	bl	8007224 <ld_dword>
 8008d76:	4603      	mov	r3, r0
 8008d78:	4a05      	ldr	r2, [pc, #20]	@ (8008d90 <check_fs+0xa8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d101      	bne.n	8008d82 <check_fs+0x9a>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008d82:	2302      	movs	r3, #2
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	00544146 	.word	0x00544146
 8008d90:	33544146 	.word	0x33544146

08008d94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b096      	sub	sp, #88	@ 0x58
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff ff59 	bl	8008c60 <get_ldnumber>
 8008dae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da01      	bge.n	8008dba <find_volume+0x26>
 8008db6:	230b      	movs	r3, #11
 8008db8:	e265      	b.n	8009286 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008dba:	4a9f      	ldr	r2, [pc, #636]	@ (8009038 <find_volume+0x2a4>)
 8008dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <find_volume+0x3a>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	e25b      	b.n	8009286 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	f023 0301 	bic.w	r3, r3, #1
 8008dda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01a      	beq.n	8008e1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe f963 	bl	80070b4 <disk_status>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008df4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10c      	bne.n	8008e1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <find_volume+0x82>
 8008e06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e0a:	f003 0304 	and.w	r3, r3, #4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008e12:	230a      	movs	r3, #10
 8008e14:	e237      	b.n	8009286 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008e16:	2300      	movs	r3, #0
 8008e18:	e235      	b.n	8009286 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe f95b 	bl	80070e8 <disk_initialize>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008e38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e44:	2303      	movs	r3, #3
 8008e46:	e21e      	b.n	8009286 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <find_volume+0xca>
 8008e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e213      	b.n	8009286 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e60:	7858      	ldrb	r0, [r3, #1]
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	330c      	adds	r3, #12
 8008e66:	461a      	mov	r2, r3
 8008e68:	2102      	movs	r1, #2
 8008e6a:	f7fe f9a5 	bl	80071b8 <disk_ioctl>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <find_volume+0xe4>
 8008e74:	2301      	movs	r3, #1
 8008e76:	e206      	b.n	8009286 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	899b      	ldrh	r3, [r3, #12]
 8008e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e80:	d80d      	bhi.n	8008e9e <find_volume+0x10a>
 8008e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e84:	899b      	ldrh	r3, [r3, #12]
 8008e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8a:	d308      	bcc.n	8008e9e <find_volume+0x10a>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	899b      	ldrh	r3, [r3, #12]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	899b      	ldrh	r3, [r3, #12]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4013      	ands	r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <find_volume+0x10e>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e1f1      	b.n	8009286 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ea6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ea8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008eaa:	f7ff ff1d 	bl	8008ce8 <check_fs>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d149      	bne.n	8008f50 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec0:	e01e      	b.n	8008f00 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008ed0:	4413      	add	r3, r2
 8008ed2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d006      	beq.n	8008eec <find_volume+0x158>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f99e 	bl	8007224 <ld_dword>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	e000      	b.n	8008eee <find_volume+0x15a>
 8008eec:	2200      	movs	r2, #0
 8008eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	3358      	adds	r3, #88	@ 0x58
 8008ef4:	443b      	add	r3, r7
 8008ef6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008efc:	3301      	adds	r3, #1
 8008efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d9dd      	bls.n	8008ec2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f06:	2300      	movs	r3, #0
 8008f08:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <find_volume+0x182>
 8008f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f12:	3b01      	subs	r3, #1
 8008f14:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	3358      	adds	r3, #88	@ 0x58
 8008f1c:	443b      	add	r3, r7
 8008f1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f22:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <find_volume+0x1a2>
 8008f2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f2e:	f7ff fedb 	bl	8008ce8 <check_fs>
 8008f32:	4603      	mov	r3, r0
 8008f34:	e000      	b.n	8008f38 <find_volume+0x1a4>
 8008f36:	2303      	movs	r3, #3
 8008f38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d905      	bls.n	8008f50 <find_volume+0x1bc>
 8008f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f46:	3301      	adds	r3, #1
 8008f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d9e2      	bls.n	8008f16 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d101      	bne.n	8008f5c <find_volume+0x1c8>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e194      	b.n	8009286 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d901      	bls.n	8008f68 <find_volume+0x1d4>
 8008f64:	230d      	movs	r3, #13
 8008f66:	e18e      	b.n	8009286 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	3338      	adds	r3, #56	@ 0x38
 8008f6c:	330b      	adds	r3, #11
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe f940 	bl	80071f4 <ld_word>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <find_volume+0x1f0>
 8008f80:	230d      	movs	r3, #13
 8008f82:	e180      	b.n	8009286 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f86:	3338      	adds	r3, #56	@ 0x38
 8008f88:	3316      	adds	r3, #22
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe f932 	bl	80071f4 <ld_word>
 8008f90:	4603      	mov	r3, r0
 8008f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <find_volume+0x214>
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9c:	3338      	adds	r3, #56	@ 0x38
 8008f9e:	3324      	adds	r3, #36	@ 0x24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe f93f 	bl	8007224 <ld_dword>
 8008fa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	789b      	ldrb	r3, [r3, #2]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d005      	beq.n	8008fcc <find_volume+0x238>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d001      	beq.n	8008fcc <find_volume+0x238>
 8008fc8:	230d      	movs	r3, #13
 8008fca:	e15c      	b.n	8009286 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fce:	789b      	ldrb	r3, [r3, #2]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe8:	895b      	ldrh	r3, [r3, #10]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d008      	beq.n	8009000 <find_volume+0x26c>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff0:	895b      	ldrh	r3, [r3, #10]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff6:	895b      	ldrh	r3, [r3, #10]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <find_volume+0x270>
 8009000:	230d      	movs	r3, #13
 8009002:	e140      	b.n	8009286 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	3338      	adds	r3, #56	@ 0x38
 8009008:	3311      	adds	r3, #17
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f8f2 	bl	80071f4 <ld_word>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800901e:	8992      	ldrh	r2, [r2, #12]
 8009020:	0952      	lsrs	r2, r2, #5
 8009022:	b292      	uxth	r2, r2
 8009024:	fbb3 f1f2 	udiv	r1, r3, r2
 8009028:	fb01 f202 	mul.w	r2, r1, r2
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <find_volume+0x2a8>
 8009034:	230d      	movs	r3, #13
 8009036:	e126      	b.n	8009286 <find_volume+0x4f2>
 8009038:	2001bf7c 	.word	0x2001bf7c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	3338      	adds	r3, #56	@ 0x38
 8009040:	3313      	adds	r3, #19
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe f8d6 	bl	80071f4 <ld_word>
 8009048:	4603      	mov	r3, r0
 800904a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800904c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <find_volume+0x2cc>
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	3338      	adds	r3, #56	@ 0x38
 8009056:	3320      	adds	r3, #32
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe f8e3 	bl	8007224 <ld_dword>
 800905e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	3338      	adds	r3, #56	@ 0x38
 8009064:	330e      	adds	r3, #14
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe f8c4 	bl	80071f4 <ld_word>
 800906c:	4603      	mov	r3, r0
 800906e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009070:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <find_volume+0x2e6>
 8009076:	230d      	movs	r3, #13
 8009078:	e105      	b.n	8009286 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800907a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800907c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800907e:	4413      	add	r3, r2
 8009080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009082:	8911      	ldrh	r1, [r2, #8]
 8009084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009086:	8992      	ldrh	r2, [r2, #12]
 8009088:	0952      	lsrs	r2, r2, #5
 800908a:	b292      	uxth	r2, r2
 800908c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009090:	b292      	uxth	r2, r2
 8009092:	4413      	add	r3, r2
 8009094:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	429a      	cmp	r2, r3
 800909c:	d201      	bcs.n	80090a2 <find_volume+0x30e>
 800909e:	230d      	movs	r3, #13
 80090a0:	e0f1      	b.n	8009286 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80090a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090aa:	8952      	ldrh	r2, [r2, #10]
 80090ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80090b0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <find_volume+0x328>
 80090b8:	230d      	movs	r3, #13
 80090ba:	e0e4      	b.n	8009286 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80090bc:	2303      	movs	r3, #3
 80090be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d802      	bhi.n	80090d2 <find_volume+0x33e>
 80090cc:	2302      	movs	r3, #2
 80090ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80090d8:	4293      	cmp	r3, r2
 80090da:	d802      	bhi.n	80090e2 <find_volume+0x34e>
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	1c9a      	adds	r2, r3, #2
 80090e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090ee:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80090f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80090f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f4:	441a      	add	r2, r3
 80090f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80090fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	441a      	add	r2, r3
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009108:	2b03      	cmp	r3, #3
 800910a:	d11e      	bne.n	800914a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	3338      	adds	r3, #56	@ 0x38
 8009110:	332a      	adds	r3, #42	@ 0x2a
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe f86e 	bl	80071f4 <ld_word>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <find_volume+0x38e>
 800911e:	230d      	movs	r3, #13
 8009120:	e0b1      	b.n	8009286 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	891b      	ldrh	r3, [r3, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <find_volume+0x39a>
 800912a:	230d      	movs	r3, #13
 800912c:	e0ab      	b.n	8009286 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	3338      	adds	r3, #56	@ 0x38
 8009132:	332c      	adds	r3, #44	@ 0x2c
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe f875 	bl	8007224 <ld_dword>
 800913a:	4602      	mov	r2, r0
 800913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	647b      	str	r3, [r7, #68]	@ 0x44
 8009148:	e01f      	b.n	800918a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	891b      	ldrh	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <find_volume+0x3c2>
 8009152:	230d      	movs	r3, #13
 8009154:	e097      	b.n	8009286 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800915a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915c:	441a      	add	r2, r3
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009162:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009166:	2b02      	cmp	r3, #2
 8009168:	d103      	bne.n	8009172 <find_volume+0x3de>
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	e00a      	b.n	8009188 <find_volume+0x3f4>
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	69da      	ldr	r2, [r3, #28]
 8009176:	4613      	mov	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4413      	add	r3, r2
 800917c:	085a      	lsrs	r2, r3, #1
 800917e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009188:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	899b      	ldrh	r3, [r3, #12]
 8009192:	4619      	mov	r1, r3
 8009194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009196:	440b      	add	r3, r1
 8009198:	3b01      	subs	r3, #1
 800919a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800919c:	8989      	ldrh	r1, [r1, #12]
 800919e:	fbb3 f3f1 	udiv	r3, r3, r1
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d201      	bcs.n	80091aa <find_volume+0x416>
 80091a6:	230d      	movs	r3, #13
 80091a8:	e06d      	b.n	8009286 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091b0:	619a      	str	r2, [r3, #24]
 80091b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	2280      	movs	r2, #128	@ 0x80
 80091be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80091c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d149      	bne.n	800925c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	3338      	adds	r3, #56	@ 0x38
 80091cc:	3330      	adds	r3, #48	@ 0x30
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe f810 	bl	80071f4 <ld_word>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d140      	bne.n	800925c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80091da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091dc:	3301      	adds	r3, #1
 80091de:	4619      	mov	r1, r3
 80091e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091e2:	f7fe fa7b 	bl	80076dc <move_window>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d137      	bne.n	800925c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2200      	movs	r2, #0
 80091f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	3338      	adds	r3, #56	@ 0x38
 80091f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fd fffa 	bl	80071f4 <ld_word>
 8009200:	4603      	mov	r3, r0
 8009202:	461a      	mov	r2, r3
 8009204:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009208:	429a      	cmp	r2, r3
 800920a:	d127      	bne.n	800925c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	3338      	adds	r3, #56	@ 0x38
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe f807 	bl	8007224 <ld_dword>
 8009216:	4603      	mov	r3, r0
 8009218:	4a1d      	ldr	r2, [pc, #116]	@ (8009290 <find_volume+0x4fc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d11e      	bne.n	800925c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	3338      	adds	r3, #56	@ 0x38
 8009222:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fffc 	bl	8007224 <ld_dword>
 800922c:	4603      	mov	r3, r0
 800922e:	4a19      	ldr	r2, [pc, #100]	@ (8009294 <find_volume+0x500>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d113      	bne.n	800925c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	3338      	adds	r3, #56	@ 0x38
 8009238:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fff1 	bl	8007224 <ld_dword>
 8009242:	4602      	mov	r2, r0
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	3338      	adds	r3, #56	@ 0x38
 800924c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009250:	4618      	mov	r0, r3
 8009252:	f7fd ffe7 	bl	8007224 <ld_dword>
 8009256:	4602      	mov	r2, r0
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800925c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009262:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009264:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <find_volume+0x504>)
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	3301      	adds	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <find_volume+0x504>)
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <find_volume+0x504>)
 8009272:	881a      	ldrh	r2, [r3, #0]
 8009274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009276:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	4a08      	ldr	r2, [pc, #32]	@ (800929c <find_volume+0x508>)
 800927c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800927e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009280:	f7fe f9c4 	bl	800760c <clear_lock>
#endif
	return FR_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3758      	adds	r7, #88	@ 0x58
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	41615252 	.word	0x41615252
 8009294:	61417272 	.word	0x61417272
 8009298:	2001bf80 	.word	0x2001bf80
 800929c:	2001bfa4 	.word	0x2001bfa4

080092a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80092aa:	2309      	movs	r3, #9
 80092ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01c      	beq.n	80092ee <validate+0x4e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d018      	beq.n	80092ee <validate+0x4e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d013      	beq.n	80092ee <validate+0x4e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	889a      	ldrh	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	88db      	ldrh	r3, [r3, #6]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d10c      	bne.n	80092ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fd feea 	bl	80070b4 <disk_status>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <validate+0x4e>
			res = FR_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <validate+0x5a>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	e000      	b.n	80092fc <validate+0x5c>
 80092fa:	2300      	movs	r3, #0
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	6013      	str	r3, [r2, #0]
	return res;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800931e:	f107 0310 	add.w	r3, r7, #16
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fc9c 	bl	8008c60 <get_ldnumber>
 8009328:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	da01      	bge.n	8009334 <f_mount+0x28>
 8009330:	230b      	movs	r3, #11
 8009332:	e02b      	b.n	800938c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009334:	4a17      	ldr	r2, [pc, #92]	@ (8009394 <f_mount+0x88>)
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800933c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009344:	69b8      	ldr	r0, [r7, #24]
 8009346:	f7fe f961 	bl	800760c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	490d      	ldr	r1, [pc, #52]	@ (8009394 <f_mount+0x88>)
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <f_mount+0x66>
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d001      	beq.n	8009376 <f_mount+0x6a>
 8009372:	2300      	movs	r3, #0
 8009374:	e00a      	b.n	800938c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009376:	f107 010c 	add.w	r1, r7, #12
 800937a:	f107 0308 	add.w	r3, r7, #8
 800937e:	2200      	movs	r2, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fd07 	bl	8008d94 <find_volume>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800938a:	7dfb      	ldrb	r3, [r7, #23]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	2001bf7c 	.word	0x2001bf7c

08009398 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b09a      	sub	sp, #104	@ 0x68
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <f_open+0x18>
 80093ac:	2309      	movs	r3, #9
 80093ae:	e1b7      	b.n	8009720 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	f107 0114 	add.w	r1, r7, #20
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff fce6 	bl	8008d94 <find_volume>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80093ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 819b 	bne.w	800970e <f_open+0x376>
		dj.obj.fs = fs;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	f107 0318 	add.w	r3, r7, #24
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fbc5 	bl	8008b74 <follow_path>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d118      	bne.n	800942a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da03      	bge.n	800940a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009402:	2306      	movs	r3, #6
 8009404:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009408:	e00f      	b.n	800942a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b01      	cmp	r3, #1
 800940e:	bf8c      	ite	hi
 8009410:	2301      	movhi	r3, #1
 8009412:	2300      	movls	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	f107 0318 	add.w	r3, r7, #24
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7fd ffe8 	bl	80073f4 <chk_lock>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	f003 031c 	and.w	r3, r3, #28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d07f      	beq.n	8009534 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009434:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009438:	2b00      	cmp	r3, #0
 800943a:	d017      	beq.n	800946c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800943c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009440:	2b04      	cmp	r3, #4
 8009442:	d10e      	bne.n	8009462 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009444:	f7fe f832 	bl	80074ac <enq_lock>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <f_open+0xc4>
 800944e:	f107 0318 	add.w	r3, r7, #24
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff f8de 	bl	8008614 <dir_register>
 8009458:	4603      	mov	r3, r0
 800945a:	e000      	b.n	800945e <f_open+0xc6>
 800945c:	2312      	movs	r3, #18
 800945e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	f043 0308 	orr.w	r3, r3, #8
 8009468:	71fb      	strb	r3, [r7, #7]
 800946a:	e010      	b.n	800948e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800946c:	7fbb      	ldrb	r3, [r7, #30]
 800946e:	f003 0311 	and.w	r3, r3, #17
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <f_open+0xe6>
					res = FR_DENIED;
 8009476:	2307      	movs	r3, #7
 8009478:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800947c:	e007      	b.n	800948e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <f_open+0xf6>
 8009488:	2308      	movs	r3, #8
 800948a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800948e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009492:	2b00      	cmp	r3, #0
 8009494:	d168      	bne.n	8009568 <f_open+0x1d0>
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	f003 0308 	and.w	r3, r3, #8
 800949c:	2b00      	cmp	r3, #0
 800949e:	d063      	beq.n	8009568 <f_open+0x1d0>
				dw = GET_FATTIME();
 80094a0:	f7fd fda6 	bl	8006ff0 <get_fattime>
 80094a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	330e      	adds	r3, #14
 80094aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fd fef7 	bl	80072a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	3316      	adds	r3, #22
 80094b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd fef1 	bl	80072a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	330b      	adds	r3, #11
 80094c2:	2220      	movs	r2, #32
 80094c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fe fe19 	bl	8008104 <ld_clust>
 80094d2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094d8:	2200      	movs	r2, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fe31 	bl	8008142 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	331c      	adds	r3, #28
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd feda 	bl	80072a0 <st_dword>
					fs->wflag = 1;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2201      	movs	r2, #1
 80094f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d037      	beq.n	8009568 <f_open+0x1d0>
						dw = fs->winsect;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	2200      	movs	r2, #0
 8009504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fb21 	bl	8007b4e <remove_chain>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009512:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009516:	2b00      	cmp	r3, #0
 8009518:	d126      	bne.n	8009568 <f_open+0x1d0>
							res = move_window(fs, dw);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe f8dc 	bl	80076dc <move_window>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800952e:	3a01      	subs	r2, #1
 8009530:	615a      	str	r2, [r3, #20]
 8009532:	e019      	b.n	8009568 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009534:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009538:	2b00      	cmp	r3, #0
 800953a:	d115      	bne.n	8009568 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800953c:	7fbb      	ldrb	r3, [r7, #30]
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009546:	2304      	movs	r3, #4
 8009548:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800954c:	e00c      	b.n	8009568 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d007      	beq.n	8009568 <f_open+0x1d0>
 8009558:	7fbb      	ldrb	r3, [r7, #30]
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <f_open+0x1d0>
						res = FR_DENIED;
 8009562:	2307      	movs	r3, #7
 8009564:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800956c:	2b00      	cmp	r3, #0
 800956e:	d126      	bne.n	80095be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	f003 0308 	and.w	r3, r3, #8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009580:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800958a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b01      	cmp	r3, #1
 8009594:	bf8c      	ite	hi
 8009596:	2301      	movhi	r3, #1
 8009598:	2300      	movls	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	f107 0318 	add.w	r3, r7, #24
 80095a2:	4611      	mov	r1, r2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fd ffa3 	bl	80074f0 <inc_lock>
 80095aa:	4602      	mov	r2, r0
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <f_open+0x226>
 80095b8:	2302      	movs	r3, #2
 80095ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80095be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f040 80a3 	bne.w	800970e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fd98 	bl	8008104 <ld_clust>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	331c      	adds	r3, #28
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fe20 	bl	8007224 <ld_dword>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	88da      	ldrh	r2, [r3, #6]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	79fa      	ldrb	r2, [r7, #7]
 8009602:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3330      	adds	r3, #48	@ 0x30
 800961a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f7fd fe8a 	bl	800733a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d06e      	beq.n	800970e <f_open+0x376>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d06a      	beq.n	800970e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	895b      	ldrh	r3, [r3, #10]
 8009644:	461a      	mov	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	fb02 f303 	mul.w	r3, r2, r3
 800964e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800965c:	e016      	b.n	800968c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f886 	bl	8007774 <get_fat>
 8009668:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800966a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800966c:	2b01      	cmp	r3, #1
 800966e:	d802      	bhi.n	8009676 <f_open+0x2de>
 8009670:	2302      	movs	r3, #2
 8009672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800967c:	d102      	bne.n	8009684 <f_open+0x2ec>
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009684:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800968c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009690:	2b00      	cmp	r3, #0
 8009692:	d103      	bne.n	800969c <f_open+0x304>
 8009694:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009698:	429a      	cmp	r2, r3
 800969a:	d8e0      	bhi.n	800965e <f_open+0x2c6>
				}
				fp->clust = clst;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80096a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d131      	bne.n	800970e <f_open+0x376>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	899b      	ldrh	r3, [r3, #12]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096b6:	fb01 f202 	mul.w	r2, r1, r2
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d026      	beq.n	800970e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe f836 	bl	8007736 <clust2sect>
 80096ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80096cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d103      	bne.n	80096da <f_open+0x342>
						res = FR_INT_ERR;
 80096d2:	2302      	movs	r3, #2
 80096d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096d8:	e019      	b.n	800970e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	899b      	ldrh	r3, [r3, #12]
 80096de:	461a      	mov	r2, r3
 80096e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e8:	441a      	add	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	7858      	ldrb	r0, [r3, #1]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1a      	ldr	r2, [r3, #32]
 80096fc:	2301      	movs	r3, #1
 80096fe:	f7fd fd1b 	bl	8007138 <disk_read>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <f_open+0x376>
 8009708:	2301      	movs	r3, #1
 800970a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800970e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <f_open+0x384>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800971c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009720:	4618      	mov	r0, r3
 8009722:	3768      	adds	r7, #104	@ 0x68
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08c      	sub	sp, #48	@ 0x30
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f107 0210 	add.w	r2, r7, #16
 8009746:	4611      	mov	r1, r2
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fda9 	bl	80092a0 <validate>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <f_write+0x44>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7d5b      	ldrb	r3, [r3, #21]
 8009760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <f_write+0x4a>
 800976c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009770:	e16a      	b.n	8009a48 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	7d1b      	ldrb	r3, [r3, #20]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <f_write+0x5a>
 800977e:	2307      	movs	r3, #7
 8009780:	e162      	b.n	8009a48 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	441a      	add	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	429a      	cmp	r2, r3
 8009790:	f080 814c 	bcs.w	8009a2c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	43db      	mvns	r3, r3
 800979a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800979c:	e146      	b.n	8009a2c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	8992      	ldrh	r2, [r2, #12]
 80097a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80097aa:	fb01 f202 	mul.w	r2, r1, r2
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f040 80f1 	bne.w	8009998 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	8992      	ldrh	r2, [r2, #12]
 80097be:	fbb3 f3f2 	udiv	r3, r3, r2
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	8952      	ldrh	r2, [r2, #10]
 80097c6:	3a01      	subs	r2, #1
 80097c8:	4013      	ands	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d143      	bne.n	800985a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10c      	bne.n	80097f4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d11a      	bne.n	800981c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fa14 	bl	8007c18 <create_chain>
 80097f0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80097f2:	e013      	b.n	800981c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d007      	beq.n	800980c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7fe faa0 	bl	8007d48 <clmt_clust>
 8009808:	62b8      	str	r0, [r7, #40]	@ 0x28
 800980a:	e007      	b.n	800981c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7fe f9ff 	bl	8007c18 <create_chain>
 800981a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8109 	beq.w	8009a36 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	2b01      	cmp	r3, #1
 8009828:	d104      	bne.n	8009834 <f_write+0x10c>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2202      	movs	r2, #2
 800982e:	755a      	strb	r2, [r3, #21]
 8009830:	2302      	movs	r3, #2
 8009832:	e109      	b.n	8009a48 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800983a:	d104      	bne.n	8009846 <f_write+0x11e>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	755a      	strb	r2, [r3, #21]
 8009842:	2301      	movs	r3, #1
 8009844:	e100      	b.n	8009a48 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800984a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <f_write+0x132>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009858:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	7d1b      	ldrb	r3, [r3, #20]
 800985e:	b25b      	sxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	da18      	bge.n	8009896 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	7858      	ldrb	r0, [r3, #1]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	2301      	movs	r3, #1
 8009874:	f7fd fc80 	bl	8007178 <disk_write>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <f_write+0x160>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	755a      	strb	r2, [r3, #21]
 8009884:	2301      	movs	r3, #1
 8009886:	e0df      	b.n	8009a48 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009890:	b2da      	uxtb	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f7fd ff49 	bl	8007736 <clust2sect>
 80098a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <f_write+0x18e>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2202      	movs	r2, #2
 80098b0:	755a      	strb	r2, [r3, #21]
 80098b2:	2302      	movs	r3, #2
 80098b4:	e0c8      	b.n	8009a48 <f_write+0x320>
			sect += csect;
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	4413      	add	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	461a      	mov	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d043      	beq.n	800995a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	4413      	add	r3, r2
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	8952      	ldrh	r2, [r2, #10]
 80098dc:	4293      	cmp	r3, r2
 80098de:	d905      	bls.n	80098ec <f_write+0x1c4>
					cc = fs->csize - csect;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	461a      	mov	r2, r3
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	7858      	ldrb	r0, [r3, #1]
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	69f9      	ldr	r1, [r7, #28]
 80098f6:	f7fd fc3f 	bl	8007178 <disk_write>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <f_write+0x1e2>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	755a      	strb	r2, [r3, #21]
 8009906:	2301      	movs	r3, #1
 8009908:	e09e      	b.n	8009a48 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1a      	ldr	r2, [r3, #32]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	6a3a      	ldr	r2, [r7, #32]
 8009914:	429a      	cmp	r2, r3
 8009916:	d918      	bls.n	800994a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1a      	ldr	r2, [r3, #32]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	8992      	ldrh	r2, [r2, #12]
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	18d1      	adds	r1, r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	461a      	mov	r2, r3
 8009938:	f7fd fcde 	bl	80072f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	7d1b      	ldrb	r3, [r3, #20]
 8009940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009944:	b2da      	uxtb	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	899b      	ldrh	r3, [r3, #12]
 800994e:	461a      	mov	r2, r3
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	fb02 f303 	mul.w	r3, r2, r3
 8009956:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009958:	e04b      	b.n	80099f2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	429a      	cmp	r2, r3
 8009962:	d016      	beq.n	8009992 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	699a      	ldr	r2, [r3, #24]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800996c:	429a      	cmp	r2, r3
 800996e:	d210      	bcs.n	8009992 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	7858      	ldrb	r0, [r3, #1]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800997a:	2301      	movs	r3, #1
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	f7fd fbdb 	bl	8007138 <disk_read>
 8009982:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	755a      	strb	r2, [r3, #21]
 800998e:	2301      	movs	r3, #1
 8009990:	e05a      	b.n	8009a48 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	899b      	ldrh	r3, [r3, #12]
 800999c:	4618      	mov	r0, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	8992      	ldrh	r2, [r2, #12]
 80099a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80099aa:	fb01 f202 	mul.w	r2, r1, r2
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	1ac3      	subs	r3, r0, r3
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80099b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d901      	bls.n	80099c0 <f_write+0x298>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	8992      	ldrh	r2, [r2, #12]
 80099ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80099d2:	fb00 f202 	mul.w	r2, r0, r2
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	440b      	add	r3, r1
 80099da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099dc:	69f9      	ldr	r1, [r7, #28]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fd fc8a 	bl	80072f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	7d1b      	ldrb	r3, [r3, #20]
 80099e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	4413      	add	r3, r2
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	619a      	str	r2, [r3, #24]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	bf38      	it	cc
 8009a12:	461a      	movcc	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	60da      	str	r2, [r3, #12]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	441a      	add	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f47f aeb5 	bne.w	800979e <f_write+0x76>
 8009a34:	e000      	b.n	8009a38 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a36:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	7d1b      	ldrb	r3, [r3, #20]
 8009a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3730      	adds	r7, #48	@ 0x30
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a68:	7a5b      	ldrb	r3, [r3, #9]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d131      	bne.n	8009ad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a70:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a72:	7a5b      	ldrb	r3, [r3, #9]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a80:	7a5b      	ldrb	r3, [r3, #9]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	4a17      	ldr	r2, [pc, #92]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a90:	7a5b      	ldrb	r3, [r3, #9]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009a98:	4413      	add	r3, r2
 8009a9a:	79fa      	ldrb	r2, [r7, #7]
 8009a9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a9e:	4b11      	ldr	r3, [pc, #68]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009aa0:	7a5b      	ldrb	r3, [r3, #9]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	b2d1      	uxtb	r1, r2
 8009aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ae4 <FATFS_LinkDriverEx+0x94>)
 8009aaa:	7251      	strb	r1, [r2, #9]
 8009aac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009aae:	7dbb      	ldrb	r3, [r7, #22]
 8009ab0:	3330      	adds	r3, #48	@ 0x30
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	3301      	adds	r3, #1
 8009abc:	223a      	movs	r2, #58	@ 0x3a
 8009abe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	222f      	movs	r2, #47	@ 0x2f
 8009ac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	3303      	adds	r3, #3
 8009acc:	2200      	movs	r2, #0
 8009ace:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	2001c1a4 	.word	0x2001c1a4

08009ae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009af2:	2200      	movs	r2, #0
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ffaa 	bl	8009a50 <FATFS_LinkDriverEx>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b18:	d802      	bhi.n	8009b20 <ff_convert+0x18>
		c = chr;
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	81fb      	strh	r3, [r7, #14]
 8009b1e:	e025      	b.n	8009b6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	2bff      	cmp	r3, #255	@ 0xff
 8009b2a:	d805      	bhi.n	8009b38 <ff_convert+0x30>
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	3b80      	subs	r3, #128	@ 0x80
 8009b30:	4a12      	ldr	r2, [pc, #72]	@ (8009b7c <ff_convert+0x74>)
 8009b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b36:	e000      	b.n	8009b3a <ff_convert+0x32>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	81fb      	strh	r3, [r7, #14]
 8009b3c:	e016      	b.n	8009b6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009b3e:	2300      	movs	r3, #0
 8009b40:	81fb      	strh	r3, [r7, #14]
 8009b42:	e009      	b.n	8009b58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009b44:	89fb      	ldrh	r3, [r7, #14]
 8009b46:	4a0d      	ldr	r2, [pc, #52]	@ (8009b7c <ff_convert+0x74>)
 8009b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4c:	88fa      	ldrh	r2, [r7, #6]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d006      	beq.n	8009b60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009b52:	89fb      	ldrh	r3, [r7, #14]
 8009b54:	3301      	adds	r3, #1
 8009b56:	81fb      	strh	r3, [r7, #14]
 8009b58:	89fb      	ldrh	r3, [r7, #14]
 8009b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b5c:	d9f2      	bls.n	8009b44 <ff_convert+0x3c>
 8009b5e:	e000      	b.n	8009b62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009b60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009b62:	89fb      	ldrh	r3, [r7, #14]
 8009b64:	3380      	adds	r3, #128	@ 0x80
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	0800a2d4 	.word	0x0800a2d4

08009b80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009b8a:	88fb      	ldrh	r3, [r7, #6]
 8009b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b90:	d201      	bcs.n	8009b96 <ff_wtoupper+0x16>
 8009b92:	4b3e      	ldr	r3, [pc, #248]	@ (8009c8c <ff_wtoupper+0x10c>)
 8009b94:	e000      	b.n	8009b98 <ff_wtoupper+0x18>
 8009b96:	4b3e      	ldr	r3, [pc, #248]	@ (8009c90 <ff_wtoupper+0x110>)
 8009b98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	1c9a      	adds	r2, r3, #2
 8009b9e:	617a      	str	r2, [r7, #20]
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009ba4:	8a7b      	ldrh	r3, [r7, #18]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d068      	beq.n	8009c7c <ff_wtoupper+0xfc>
 8009baa:	88fa      	ldrh	r2, [r7, #6]
 8009bac:	8a7b      	ldrh	r3, [r7, #18]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d364      	bcc.n	8009c7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	1c9a      	adds	r2, r3, #2
 8009bb6:	617a      	str	r2, [r7, #20]
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	823b      	strh	r3, [r7, #16]
 8009bbc:	8a3b      	ldrh	r3, [r7, #16]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	81fb      	strh	r3, [r7, #14]
 8009bc2:	8a3b      	ldrh	r3, [r7, #16]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	8a79      	ldrh	r1, [r7, #18]
 8009bcc:	8a3b      	ldrh	r3, [r7, #16]
 8009bce:	440b      	add	r3, r1
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	da49      	bge.n	8009c68 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009bd4:	89fb      	ldrh	r3, [r7, #14]
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d84f      	bhi.n	8009c7a <ff_wtoupper+0xfa>
 8009bda:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <ff_wtoupper+0x60>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c17 	.word	0x08009c17
 8009be8:	08009c2d 	.word	0x08009c2d
 8009bec:	08009c35 	.word	0x08009c35
 8009bf0:	08009c3d 	.word	0x08009c3d
 8009bf4:	08009c45 	.word	0x08009c45
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c5d 	.word	0x08009c5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	8a7b      	ldrh	r3, [r7, #18]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	80fb      	strh	r3, [r7, #6]
 8009c14:	e027      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009c16:	88fa      	ldrh	r2, [r7, #6]
 8009c18:	8a7b      	ldrh	r3, [r7, #18]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	88fa      	ldrh	r2, [r7, #6]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	80fb      	strh	r3, [r7, #6]
 8009c2a:	e01c      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009c2c:	88fb      	ldrh	r3, [r7, #6]
 8009c2e:	3b10      	subs	r3, #16
 8009c30:	80fb      	strh	r3, [r7, #6]
 8009c32:	e018      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009c34:	88fb      	ldrh	r3, [r7, #6]
 8009c36:	3b20      	subs	r3, #32
 8009c38:	80fb      	strh	r3, [r7, #6]
 8009c3a:	e014      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	3b30      	subs	r3, #48	@ 0x30
 8009c40:	80fb      	strh	r3, [r7, #6]
 8009c42:	e010      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	3b1a      	subs	r3, #26
 8009c48:	80fb      	strh	r3, [r7, #6]
 8009c4a:	e00c      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	80fb      	strh	r3, [r7, #6]
 8009c52:	e008      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	3b50      	subs	r3, #80	@ 0x50
 8009c58:	80fb      	strh	r3, [r7, #6]
 8009c5a:	e004      	b.n	8009c66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009c62:	80fb      	strh	r3, [r7, #6]
 8009c64:	bf00      	nop
			}
			break;
 8009c66:	e008      	b.n	8009c7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d195      	bne.n	8009b9a <ff_wtoupper+0x1a>
 8009c6e:	8a3b      	ldrh	r3, [r7, #16]
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4413      	add	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009c78:	e78f      	b.n	8009b9a <ff_wtoupper+0x1a>
			break;
 8009c7a:	bf00      	nop
	}

	return chr;
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	0800a3d4 	.word	0x0800a3d4
 8009c90:	0800a5c8 	.word	0x0800a5c8

08009c94 <memset>:
 8009c94:	4402      	add	r2, r0
 8009c96:	4603      	mov	r3, r0
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d100      	bne.n	8009c9e <memset+0xa>
 8009c9c:	4770      	bx	lr
 8009c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca2:	e7f9      	b.n	8009c98 <memset+0x4>

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1b64      	subs	r4, r4, r5
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2600      	movs	r6, #0
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f000 f826 	bl	8009d08 <_init>
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	4798      	blx	r3
 8009cce:	3601      	adds	r6, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	4798      	blx	r3
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800a68c 	.word	0x0800a68c
 8009ce0:	0800a68c 	.word	0x0800a68c
 8009ce4:	0800a68c 	.word	0x0800a68c
 8009ce8:	0800a690 	.word	0x0800a690

08009cec <memcpy>:
 8009cec:	440a      	add	r2, r1
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009cf4:	d100      	bne.n	8009cf8 <memcpy+0xc>
 8009cf6:	4770      	bx	lr
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d02:	4291      	cmp	r1, r2
 8009d04:	d1f9      	bne.n	8009cfa <memcpy+0xe>
 8009d06:	bd10      	pop	{r4, pc}

08009d08 <_init>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr

08009d14 <_fini>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr
