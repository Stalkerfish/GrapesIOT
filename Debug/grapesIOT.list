
grapesIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a30  08006a30  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006a30  08006a30  00007a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a38  08006a38  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a3c  08006a3c  00007a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006a40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00012ed8  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f40  20012f40  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9d2  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e1  00000000  00000000  00014a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  00017050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cf  00000000  00000000  00017bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a7c  00000000  00000000  000184c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6c8  00000000  00000000  0003af43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c7c  00000000  00000000  0004a60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114287  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003634  00000000  00000000  001142cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00117900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006920 	.word	0x08006920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006920 	.word	0x08006920

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcdIli9341_setArea>:
#endif
static void lcdIli9341_readData();

/*** External Function Defines ***/
void lcdIli9341_setArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4604      	mov	r4, r0
 8000568:	4608      	mov	r0, r1
 800056a:	4611      	mov	r1, r2
 800056c:	461a      	mov	r2, r3
 800056e:	4623      	mov	r3, r4
 8000570:	80fb      	strh	r3, [r7, #6]
 8000572:	4603      	mov	r3, r0
 8000574:	80bb      	strh	r3, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	807b      	strh	r3, [r7, #2]
 800057a:	4613      	mov	r3, r2
 800057c:	803b      	strh	r3, [r7, #0]
  lcdIli9341_writeCmd(0x2a);
 800057e:	202a      	movs	r0, #42	@ 0x2a
 8000580:	f000 f937 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(xStart >> 8);
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	0a1b      	lsrs	r3, r3, #8
 8000588:	b29b      	uxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f940 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(xStart & 0xff);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	b29b      	uxth	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f93a 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd >> 8);
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	0a1b      	lsrs	r3, r3, #8
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f934 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd & 0xff);
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f92e 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b);
 80005b4:	202b      	movs	r0, #43	@ 0x2b
 80005b6:	f000 f91c 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(yStart >> 8);
 80005ba:	88bb      	ldrh	r3, [r7, #4]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f925 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(yStart & 0xff);
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f91f 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd >> 8);
 80005d2:	883b      	ldrh	r3, [r7, #0]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f919 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd & 0xff);
 80005de:	883b      	ldrh	r3, [r7, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f913 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2c);
 80005ea:	202c      	movs	r0, #44	@ 0x2c
 80005ec:	f000 f901 	bl	80007f2 <lcdIli9341_writeCmd>
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <lcdIli9341_drawRect>:
  // the first read is invalid
  lcdIli9341_readData();
}

void lcdIli9341_drawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4604      	mov	r4, r0
 8000600:	4608      	mov	r0, r1
 8000602:	4611      	mov	r1, r2
 8000604:	461a      	mov	r2, r3
 8000606:	4623      	mov	r3, r4
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	4603      	mov	r3, r0
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	807b      	strh	r3, [r7, #2]
 8000612:	4613      	mov	r3, r2
 8000614:	803b      	strh	r3, [r7, #0]
  lcdIli9341_setArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 8000616:	88fa      	ldrh	r2, [r7, #6]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b01      	subs	r3, #1
 8000620:	b29c      	uxth	r4, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	883b      	ldrh	r3, [r7, #0]
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	88b9      	ldrh	r1, [r7, #4]
 8000630:	88f8      	ldrh	r0, [r7, #6]
 8000632:	4622      	mov	r2, r4
 8000634:	f7ff ff94 	bl	8000560 <lcdIli9341_setArea>
  for( uint16_t y = 0; y < height; y++ ){
 8000638:	2300      	movs	r3, #0
 800063a:	81fb      	strh	r3, [r7, #14]
 800063c:	e00f      	b.n	800065e <lcdIli9341_drawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 800063e:	2300      	movs	r3, #0
 8000640:	81bb      	strh	r3, [r7, #12]
 8000642:	e005      	b.n	8000650 <lcdIli9341_drawRect+0x58>
//      lcdIli9341_writeData(color >> 8);
//      lcdIli9341_writeData(color);
      LCD_DATA = color;
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <lcdIli9341_drawRect+0x78>)
 8000646:	8c3b      	ldrh	r3, [r7, #32]
 8000648:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 800064a:	89bb      	ldrh	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	81bb      	strh	r3, [r7, #12]
 8000650:	89ba      	ldrh	r2, [r7, #12]
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3f5      	bcc.n	8000644 <lcdIli9341_drawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	3301      	adds	r3, #1
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	89fa      	ldrh	r2, [r7, #14]
 8000660:	883b      	ldrh	r3, [r7, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3eb      	bcc.n	800063e <lcdIli9341_drawRect+0x46>
    }
  }
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	60080000 	.word	0x60080000

08000674 <lcdIli9341_init>:
{
  return (uint16_t*)LCD_DATA_ADDR;
}

RET lcdIli9341_init()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af02      	add	r7, sp, #8
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_ResetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);

  lcdIli9341_writeCmd(0x01); //software reset
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8b9 	bl	80007f2 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 8000680:	2032      	movs	r0, #50	@ 0x32
 8000682:	f000 ff69 	bl	8001558 <HAL_Delay>
  lcdIli9341_writeCmd(0x11); //exit sleep
 8000686:	2011      	movs	r0, #17
 8000688:	f000 f8b3 	bl	80007f2 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 800068c:	2032      	movs	r0, #50	@ 0x32
 800068e:	f000 ff63 	bl	8001558 <HAL_Delay>

  lcdIli9341_writeCmd(0xB6);
 8000692:	20b6      	movs	r0, #182	@ 0xb6
 8000694:	f000 f8ad 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0A);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 f8b9 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xC2);
 800069e:	20c2      	movs	r0, #194	@ 0xc2
 80006a0:	f000 f8b6 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x36);   // memory access control
 80006a4:	2036      	movs	r0, #54	@ 0x36
 80006a6:	f000 f8a4 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x68);     // BGR -> seems RGB
 80006aa:	2068      	movs	r0, #104	@ 0x68
 80006ac:	f000 f8b0 	bl	8000810 <lcdIli9341_writeData>
//  lcdIli9341_writeData(0x60);     // RGB -> seems BGR

  lcdIli9341_writeCmd(0x3A); // pixel format
 80006b0:	203a      	movs	r0, #58	@ 0x3a
 80006b2:	f000 f89e 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x55); //RGB565 (16bit)
 80006b6:	2055      	movs	r0, #85	@ 0x55
 80006b8:	f000 f8aa 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0xE0); //gamma
 80006bc:	20e0      	movs	r0, #224	@ 0xe0
 80006be:	f000 f898 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x10);
 80006c2:	2010      	movs	r0, #16
 80006c4:	f000 f8a4 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 80006c8:	2010      	movs	r0, #16
 80006ca:	f000 f8a1 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 80006ce:	2010      	movs	r0, #16
 80006d0:	f000 f89e 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x08);
 80006d4:	2008      	movs	r0, #8
 80006d6:	f000 f89b 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 80006da:	200e      	movs	r0, #14
 80006dc:	f000 f898 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x06);
 80006e0:	2006      	movs	r0, #6
 80006e2:	f000 f895 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x42);
 80006e6:	2042      	movs	r0, #66	@ 0x42
 80006e8:	f000 f892 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x28);
 80006ec:	2028      	movs	r0, #40	@ 0x28
 80006ee:	f000 f88f 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x36);
 80006f2:	2036      	movs	r0, #54	@ 0x36
 80006f4:	f000 f88c 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f889 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 80006fe:	200e      	movs	r0, #14
 8000700:	f000 f886 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000704:	2004      	movs	r0, #4
 8000706:	f000 f883 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x13);
 800070a:	2013      	movs	r0, #19
 800070c:	f000 f880 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000710:	200e      	movs	r0, #14
 8000712:	f000 f87d 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 8000716:	200c      	movs	r0, #12
 8000718:	f000 f87a 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0XE1); //gamma
 800071c:	20e1      	movs	r0, #225	@ 0xe1
 800071e:	f000 f868 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0C);
 8000722:	200c      	movs	r0, #12
 8000724:	f000 f874 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x23);
 8000728:	2023      	movs	r0, #35	@ 0x23
 800072a:	f000 f871 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x26);
 800072e:	2026      	movs	r0, #38	@ 0x26
 8000730:	f000 f86e 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000734:	2004      	movs	r0, #4
 8000736:	f000 f86b 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800073a:	200c      	movs	r0, #12
 800073c:	f000 f868 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000740:	2004      	movs	r0, #4
 8000742:	f000 f865 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x39);
 8000746:	2039      	movs	r0, #57	@ 0x39
 8000748:	f000 f862 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x24);
 800074c:	2024      	movs	r0, #36	@ 0x24
 800074e:	f000 f85f 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x4B);
 8000752:	204b      	movs	r0, #75	@ 0x4b
 8000754:	f000 f85c 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f859 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 800075e:	200b      	movs	r0, #11
 8000760:	f000 f856 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8000764:	200b      	movs	r0, #11
 8000766:	f000 f853 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x33);
 800076a:	2033      	movs	r0, #51	@ 0x33
 800076c:	f000 f850 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x37);
 8000770:	2037      	movs	r0, #55	@ 0x37
 8000772:	f000 f84d 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0F);
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f84a 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2a);//
 800077c:	202a      	movs	r0, #42	@ 0x2a
 800077e:	f000 f838 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 f844 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f841 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f83e 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xef);
 8000794:	20ef      	movs	r0, #239	@ 0xef
 8000796:	f000 f83b 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b); //
 800079a:	202b      	movs	r0, #43	@ 0x2b
 800079c:	f000 f829 	bl	80007f2 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f835 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f832 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x01);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 f82f 	bl	8000810 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x3f);
 80007b2:	203f      	movs	r0, #63	@ 0x3f
 80007b4:	f000 f82c 	bl	8000810 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x29);
 80007b8:	2029      	movs	r0, #41	@ 0x29
 80007ba:	f000 f81a 	bl	80007f2 <lcdIli9341_writeCmd>
  HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 feca 	bl	8001558 <HAL_Delay>
  lcdIli9341_writeCmd(0x2C);
 80007c4:	202c      	movs	r0, #44	@ 0x2c
 80007c6:	f000 f814 	bl	80007f2 <lcdIli9341_writeCmd>
//  lcdIli9341_readData();
//  lcdIli9341_readData();
//  lcdIli9341_readData();

//  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0xffff);
  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0x0000);
 80007ca:	2300      	movs	r3, #0
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	23f0      	movs	r3, #240	@ 0xf0
 80007d0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d4:	2100      	movs	r1, #0
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff0e 	bl	80005f8 <lcdIli9341_drawRect>
  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH - 1, LCD_ILI9342_HEIGHT - 1);
 80007dc:	23ef      	movs	r3, #239	@ 0xef
 80007de:	f240 123f 	movw	r2, #319	@ 0x13f
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff febb 	bl	8000560 <lcdIli9341_setArea>

  return RET_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <lcdIli9341_writeCmd>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeCmd(uint16_t cmd)
#else
inline static void lcdIli9341_writeCmd(uint8_t cmd)
#endif
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	80fb      	strh	r3, [r7, #6]
  LCD_CMD = cmd;
 80007fc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	8013      	strh	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <lcdIli9341_writeData>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeData(uint16_t data)
#else
inline static void lcdIli9341_writeData(uint8_t data)
#endif
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
  LCD_DATA = data;
 800081a:	4a04      	ldr	r2, [pc, #16]	@ (800082c <lcdIli9341_writeData+0x1c>)
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	8013      	strh	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	60080000 	.word	0x60080000

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fe1d 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f839 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f91d 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000842:	f000 f8fb 	bl	8000a3c <MX_DMA_Init>
  MX_DCMI_Init();
 8000846:	f000 f8a3 	bl	8000990 <MX_DCMI_Init>
  MX_FSMC_Init();
 800084a:	f000 f9bb 	bl	8000bc4 <MX_FSMC_Init>
  MX_I2C2_Init();
 800084e:	f000 f8c7 	bl	80009e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); //Camera PWDN to GND
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000858:	4810      	ldr	r0, [pc, #64]	@ (800089c <main+0x6c>)
 800085a:	f003 f981 	bl	8003b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); //LCD Backlight to 3V3
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <main+0x70>)
 8000864:	f003 f97c 	bl	8003b60 <HAL_GPIO_WritePin>
  lcdIli9341_init();
 8000868:	f7ff ff04 	bl	8000674 <lcdIli9341_init>
  lcdIli9341_drawRect(0, 0, 320, 240, LCD_ILI9342_COLOR_RED);
 800086c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	23f0      	movs	r3, #240	@ 0xf0
 8000874:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff febc 	bl	80005f8 <lcdIli9341_drawRect>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <main+0x74>)
 8000882:	4909      	ldr	r1, [pc, #36]	@ (80008a8 <main+0x78>)
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <main+0x7c>)
 8000886:	f000 fa03 	bl	8000c90 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fa48 	bl	8000d20 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS);
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fa75 	bl	8000d80 <ov7670_startCap>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <main+0x66>
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40020400 	.word	0x40020400
 80008a4:	20000124 	.word	0x20000124
 80008a8:	200000c4 	.word	0x200000c4
 80008ac:	20000084 	.word	0x20000084

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	@ 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fa15 	bl	8005cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <SystemClock_Config+0xd8>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <SystemClock_Config+0xd8>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xd8>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b25      	ldr	r3, [pc, #148]	@ (800098c <SystemClock_Config+0xdc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a24      	ldr	r2, [pc, #144]	@ (800098c <SystemClock_Config+0xdc>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xdc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000924:	23a8      	movs	r3, #168	@ 0xa8
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fab7 	bl	8004ea8 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000940:	f000 f9a0 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000950:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2105      	movs	r1, #5
 8000962:	4618      	mov	r0, r3
 8000964:	f004 fd18 	bl	8005398 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800096e:	f000 f989 	bl	8000c84 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000972:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000976:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 800097a:	2000      	movs	r0, #0
 800097c:	f004 fdf2 	bl	8005564 <HAL_RCC_MCOConfig>
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_DCMI_Init+0x48>)
 8000996:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <MX_DCMI_Init+0x4c>)
 8000998:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_DCMI_Init+0x48>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_DCMI_Init+0x48>)
 80009c6:	f001 f937 	bl	8001c38 <HAL_DCMI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80009d0:	f000 f958 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000084 	.word	0x20000084
 80009dc:	50050000 	.word	0x50050000

080009e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2C2_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_I2C2_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2C2_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_I2C2_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2C2_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_I2C2_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_I2C2_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_I2C2_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_I2C2_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_I2C2_Init+0x50>)
 8000a1e:	f003 f8b9 	bl	8003b94 <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 f92c 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000124 	.word	0x20000124
 8000a34:	40005800 	.word	0x40005800
 8000a38:	000186a0 	.word	0x000186a0

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <MX_DMA_Init+0x3c>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_DMA_Init+0x3c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2039      	movs	r0, #57	@ 0x39
 8000a64:	f000 fe77 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a68:	2039      	movs	r0, #57	@ 0x39
 8000a6a:	f000 fe90 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	@ 0x30
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	4b47      	ldr	r3, [pc, #284]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a46      	ldr	r2, [pc, #280]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b44      	ldr	r3, [pc, #272]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	4b40      	ldr	r3, [pc, #256]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a38      	ldr	r2, [pc, #224]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a31      	ldr	r2, [pc, #196]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	481e      	ldr	r0, [pc, #120]	@ (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b40:	f003 f80e 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAMERA_RESET_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000b4a:	481c      	ldr	r0, [pc, #112]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000b4c:	f003 f808 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4814      	ldr	r0, [pc, #80]	@ (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b68:	f002 fe5e 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_RESET_Pin PD12 */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|GPIO_PIN_12;
 8000b6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000b86:	f002 fe4f 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <MX_GPIO_Init+0x144>)
 8000ba8:	f002 fe3e 	bl	8003828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	@ 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000bde:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000be2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000be4:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000be6:	4a26      	ldr	r2, [pc, #152]	@ (8000c80 <MX_FSMC_Init+0xbc>)
 8000be8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c44:	230f      	movs	r3, #15
 8000c46:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c50:	2310      	movs	r3, #16
 8000c52:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c54:	2311      	movs	r3, #17
 8000c56:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_FSMC_Init+0xb8>)
 8000c64:	f004 fe0c 	bl	8005880 <HAL_SRAM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000c6e:	f000 f809 	bl	8000c84 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000178 	.word	0x20000178
 8000c80:	a0000104 	.word	0xa0000104

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d08 <ov7670_init+0x78>)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d0c <ov7670_init+0x7c>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000ca8:	4a19      	ldr	r2, [pc, #100]	@ (8000d10 <ov7670_init+0x80>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <ov7670_init+0x84>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cba:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <ov7670_init+0x88>)
 8000cbc:	f002 ff50 	bl	8003b60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f000 fc49 	bl	8001558 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ccc:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <ov7670_init+0x88>)
 8000cce:	f002 ff47 	bl	8003b60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	@ 0x64
 8000cd4:	f000 fc40 	bl	8001558 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	2012      	movs	r0, #18
 8000cdc:	f000 f8d4 	bl	8000e88 <ov7670_write>
  HAL_Delay(30);
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f000 fc39 	bl	8001558 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	200b      	movs	r0, #11
 8000cee:	f000 f8eb 	bl	8000ec8 <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000cf2:	7d3b      	ldrb	r3, [r7, #20]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <ov7670_init+0x8c>)
 8000cf8:	f004 ffa4 	bl	8005c44 <iprintf>


  return RET_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20012dcc 	.word	0x20012dcc
 8000d0c:	20012dd0 	.word	0x20012dd0
 8000d10:	20012dd4 	.word	0x20012dd4
 8000d14:	20012dd8 	.word	0x20012dd8
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	08006938 	.word	0x08006938

08000d20 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000d28:	f000 f866 	bl	8000df8 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000d2c:	2180      	movs	r1, #128	@ 0x80
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f000 f8aa 	bl	8000e88 <ov7670_write>
  HAL_Delay(30);
 8000d34:	201e      	movs	r0, #30
 8000d36:	f000 fc0f 	bl	8001558 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e012      	b.n	8000d66 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000d40:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <ov7670_config+0x5c>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <ov7670_config+0x5c>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	440b      	add	r3, r1
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f000 f897 	bl	8000e88 <ov7670_write>
    HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 fbfc 	bl	8001558 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <ov7670_config+0x5c>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000d6e:	2bff      	cmp	r3, #255	@ 0xff
 8000d70:	d1e6      	bne.n	8000d40 <ov7670_config+0x20>
  }
  return RET_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08006980 	.word	0x08006980

08000d80 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    ov7670_stopCap();
 8000d88:	f000 f836 	bl	8000df8 <ov7670_stopCap>
    if (capMode == OV7670_CAP_CONTINUOUS) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d115      	bne.n	8000dbe <ov7670_startCap+0x3e>
        s_destAddressForContiuousMode = (uint32_t)videoBuffers[currentBufferIndex];
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <ov7670_startCap+0x68>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <ov7670_startCap+0x6c>)
 8000da2:	4413      	add	r3, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <ov7670_startCap+0x70>)
 8000da8:	601a      	str	r2, [r3, #0]
        HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, s_destAddressForContiuousMode, BUFFER_SIZE);
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <ov7670_startCap+0x74>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <ov7670_startCap+0x70>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000db6:	2100      	movs	r1, #0
 8000db8:	f000 fd04 	bl	80017c4 <HAL_DCMI_Start_DMA>
 8000dbc:	e00e      	b.n	8000ddc <ov7670_startCap+0x5c>
    } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10b      	bne.n	8000ddc <ov7670_startCap+0x5c>
        s_destAddressForContiuousMode = 0;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <ov7670_startCap+0x70>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
        HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, s_destAddressForContiuousMode, BUFFER_SIZE);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <ov7670_startCap+0x74>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <ov7670_startCap+0x70>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	f000 fcf4 	bl	80017c4 <HAL_DCMI_Start_DMA>
    }

    return RET_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20012dc8 	.word	0x20012dc8
 8000dec:	200001c8 	.word	0x200001c8
 8000df0:	20012dd8 	.word	0x20012dd8
 8000df4:	20012dcc 	.word	0x20012dcc

08000df8 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <ov7670_stopCap+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fd7f 	bl	8001904 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20012dcc 	.word	0x20012dcc

08000e10 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_DCMI_FrameEventCallback+0x54>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_DCMI_FrameEventCallback+0x1c>
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <HAL_DCMI_FrameEventCallback+0x54>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_DCMI_FrameEventCallback+0x58>)
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_DCMI_FrameEventCallback+0x5c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00b      	beq.n	8000e4c <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3328      	adds	r3, #40	@ 0x28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_DCMI_FrameEventCallback+0x5c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000e48:	f001 f812 	bl	8001e70 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_DCMI_FrameEventCallback+0x58>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <HAL_DCMI_FrameEventCallback+0x58>)
 8000e54:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_DCMI_FrameEventCallback+0x60>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20012ddc 	.word	0x20012ddc
 8000e68:	20012de4 	.word	0x20012de4
 8000e6c:	20012dd8 	.word	0x20012dd8
 8000e70:	20012de0 	.word	0x20012de0

08000e74 <HAL_DCMI_VsyncEventCallback>:
        printf("Video frame captured and stored in buffer %d\n", currentBufferIndex);
    }
}

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <ov7670_write+0x3c>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2142      	movs	r1, #66	@ 0x42
 8000eb0:	f003 fae4 	bl	800447c <HAL_I2C_Mem_Write>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20012dd4 	.word	0x20012dd4

08000ec8 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <ov7670_read+0x48>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	1dfa      	adds	r2, r7, #7
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2142      	movs	r1, #66	@ 0x42
 8000ee2:	f002 ff9b 	bl	8003e1c <HAL_I2C_Master_Transmit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <ov7670_read+0x48>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	2142      	movs	r1, #66	@ 0x42
 8000ef8:	f003 f88e 	bl	8004018 <HAL_I2C_Master_Receive>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20012dd4 	.word	0x20012dd4

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a54      	ldr	r2, [pc, #336]	@ (80010d4 <HAL_DCMI_MspInit+0x170>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	f040 80a2 	bne.w	80010cc <HAL_DCMI_MspInit+0x168>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	4b52      	ldr	r3, [pc, #328]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f90:	4a51      	ldr	r2, [pc, #324]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f98:	4b4f      	ldr	r3, [pc, #316]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a4a      	ldr	r2, [pc, #296]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb4:	4b48      	ldr	r3, [pc, #288]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	4b44      	ldr	r3, [pc, #272]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	4a43      	ldr	r2, [pc, #268]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd0:	4b41      	ldr	r3, [pc, #260]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fec:	4b3a      	ldr	r3, [pc, #232]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ff8:	2350      	movs	r3, #80	@ 0x50
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001000:	2302      	movs	r3, #2
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001008:	230d      	movs	r3, #13
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4832      	ldr	r0, [pc, #200]	@ (80010dc <HAL_DCMI_MspInit+0x178>)
 8001014:	f002 fc08 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001018:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 800101c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001022:	2302      	movs	r3, #2
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800102a:	230d      	movs	r3, #13
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	482a      	ldr	r0, [pc, #168]	@ (80010e0 <HAL_DCMI_MspInit+0x17c>)
 8001036:	f002 fbf7 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800103a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001044:	2302      	movs	r3, #2
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800104c:	230d      	movs	r3, #13
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4823      	ldr	r0, [pc, #140]	@ (80010e4 <HAL_DCMI_MspInit+0x180>)
 8001058:	f002 fbe6 	bl	8003828 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 800105e:	4a23      	ldr	r2, [pc, #140]	@ (80010ec <HAL_DCMI_MspInit+0x188>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001068:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001080:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001084:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001088:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800108c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 80010a2:	f000 fe37 	bl	8001d14 <HAL_DMA_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_DCMI_MspInit+0x14c>
    {
      Error_Handler();
 80010ac:	f7ff fdea 	bl	8000c84 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 80010b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	204e      	movs	r0, #78	@ 0x4e
 80010c2:	f000 fb48 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80010c6:	204e      	movs	r0, #78	@ 0x4e
 80010c8:	f000 fb61 	bl	800178e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	@ 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	50050000 	.word	0x50050000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	200000c4 	.word	0x200000c4
 80010ec:	40026428 	.word	0x40026428

080010f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_I2C_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12c      	bne.n	800116c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800112e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001140:	2304      	movs	r3, #4
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	@ (800117c <HAL_I2C_MspInit+0x8c>)
 800114c:	f002 fb6c 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 800115a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_I2C_MspInit+0x88>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	@ 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40005800 	.word	0x40005800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <HAL_FSMC_MspInit+0x88>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d131      	bne.n	8001200 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <HAL_FSMC_MspInit+0x88>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_FSMC_MspInit+0x8c>)
 80011a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <HAL_FSMC_MspInit+0x8c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_FSMC_MspInit+0x8c>)
 80011b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011be:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011d0:	230c      	movs	r3, #12
 80011d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <HAL_FSMC_MspInit+0x90>)
 80011da:	f002 fb25 	bl	8003828 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80011de:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80011e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011f0:	230c      	movs	r3, #12
 80011f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4806      	ldr	r0, [pc, #24]	@ (8001214 <HAL_FSMC_MspInit+0x94>)
 80011fa:	f002 fb15 	bl	8003828 <HAL_GPIO_Init>
 80011fe:	e000      	b.n	8001202 <HAL_FSMC_MspInit+0x82>
    return;
 8001200:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20012de8 	.word	0x20012de8
 800120c:	40023800 	.word	0x40023800
 8001210:	40021000 	.word	0x40021000
 8001214:	40020c00 	.word	0x40020c00

08001218 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001220:	f7ff ffae 	bl	8001180 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f949 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <DMA2_Stream1_IRQHandler+0x10>)
 8001292:	f000 fed7 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000c4 	.word	0x200000c4

080012a0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <DCMI_IRQHandler+0x10>)
 80012a6:	f000 fb89 	bl	80019bc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000084 	.word	0x20000084

080012b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
  }

  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e009      	b.n	8001314 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf1      	blt.n	8001300 <_write+0x12>
  }
  return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_close>:

int _close(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800134e:	605a      	str	r2, [r3, #4]
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f004 fce4 	bl	8005d8c <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20020000 	.word	0x20020000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	20012dec 	.word	0x20012dec
 80013f8:	20012f40 	.word	0x20012f40

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001458 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001424:	f7ff ffea 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f004 fca3 	bl	8005d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff f9ed 	bl	8000830 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001464:	08006a40 	.word	0x08006a40
  ldr r2, =_sbss
 8001468:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800146c:	20012f40 	.word	0x20012f40

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f94f 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fd34 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f967 	bl	80017aa <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f4:	f000 f92f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	20012df0 	.word	0x20012df0

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20012df0 	.word	0x20012df0

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_DCMI_Start_DMA+0x20>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e086      	b.n	80018f2 <HAL_DCMI_Start_DMA+0x12e>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001802:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0202 	bic.w	r2, r2, #2
 8001812:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001828:	4a34      	ldr	r2, [pc, #208]	@ (80018fc <HAL_DCMI_Start_DMA+0x138>)
 800182a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001830:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_DCMI_Start_DMA+0x13c>)
 8001832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001838:	2200      	movs	r2, #0
 800183a:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800184e:	d20a      	bcs.n	8001866 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3328      	adds	r3, #40	@ 0x28
 800185a:	4619      	mov	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	f000 fb06 	bl	8001e70 <HAL_DMA_Start_IT>
 8001864:	e038      	b.n	80018d8 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_DCMI_Start_DMA+0x138>)
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001880:	e009      	b.n	8001896 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	085a      	lsrs	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	005a      	lsls	r2, r3, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800189e:	d2f0      	bcs.n	8001882 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a4:	1e9a      	subs	r2, r3, #2
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3328      	adds	r3, #40	@ 0x28
 80018c8:	4619      	mov	r1, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	f000 fe20 	bl	8002518 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	08001ae1 	.word	0x08001ae1
 8001900:	08001c0b 	.word	0x08001c0b

08001904 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 800190c:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <HAL_DCMI_Stop+0xb0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <HAL_DCMI_Stop+0xb4>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_DCMI_Stop+0x2a>
 800192a:	2302      	movs	r3, #2
 800192c:	e03e      	b.n	80019ac <HAL_DCMI_Stop+0xa8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d108      	bne.n	800196a <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	63da      	str	r2, [r3, #60]	@ 0x3c

      status = HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	73fb      	strb	r3, [r7, #15]
      break;
 8001968:	e006      	b.n	8001978 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001986:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fac7 	bl	8001f20 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	92492493 	.word	0x92492493

080019bc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2204      	movs	r2, #4
 80019dc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HAL_DCMI_IRQHandler+0xf8>)
 80019f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fafe 	bl	8002000 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <HAL_DCMI_IRQHandler+0xf8>)
 8001a30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fae2 	bl	8002000 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f83c 	bl	8001acc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2208      	movs	r2, #8
 8001a64:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fa04 	bl	8000e74 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 021e 	bic.w	r2, r2, #30
 8001a92:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff f9b3 	bl	8000e10 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08001c0b 	.word	0x08001c0b

08001ab8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af0:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d043      	beq.n	8001b82 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b06:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d118      	bne.n	8001b46 <DCMI_DMAXferCplt+0x66>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d015      	beq.n	8001b46 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	00da      	lsls	r2, r3, #3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	f001 fe37 	bl	80037a8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b44:	e044      	b.n	8001bd0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d13c      	bne.n	8001bd0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	00da      	lsls	r2, r3, #3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4619      	mov	r1, r3
 8001b72:	f001 fe19 	bl	80037a8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b80:	e026      	b.n	8001bd0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e017      	b.n	8001bd0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10f      	bne.n	8001bd0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d112      	bne.n	8001c02 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d103      	bne.n	8001c02 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c16:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d003      	beq.n	8001c2a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff ff44 	bl	8001ab8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e05f      	b.n	8001d0a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f980 	bl	8000f64 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff f97d 	bl	8000f64 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c80:	f023 0308 	bic.w	r3, r3, #8
 8001c84:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ca6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cb2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d112      	bne.n	8001cea <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7f5b      	ldrb	r3, [r3, #29]
 8001cce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001cd0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7f9b      	ldrb	r3, [r3, #30]
 8001cd6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001cd8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7fdb      	ldrb	r3, [r3, #31]
 8001ce0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001ce6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ce8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 021e 	orr.w	r2, r2, #30
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff fc0e 	bl	8001540 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e099      	b.n	8001e64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d50:	e00f      	b.n	8001d72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d52:	f7ff fbf5 	bl	8001540 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d908      	bls.n	8001d72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e078      	b.n	8001e64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e8      	bne.n	8001d52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <HAL_DMA_Init+0x158>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f023 0307 	bic.w	r3, r3, #7
 8001df2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d117      	bne.n	8001e36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fb01 	bl	8002420 <DMA_CheckFifoParam>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e32:	2301      	movs	r3, #1
 8001e34:	e016      	b.n	8001e64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fab8 	bl	80023b4 <DMA_CalcBaseAndBitshift>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	223f      	movs	r2, #63	@ 0x3f
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	f010803f 	.word	0xf010803f

08001e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Start_IT+0x26>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e040      	b.n	8001f18 <HAL_DMA_Start_IT+0xa8>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d12f      	bne.n	8001f0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2202      	movs	r2, #2
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fa4a 	bl	8002358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec8:	223f      	movs	r2, #63	@ 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0216 	orr.w	r2, r2, #22
 8001ede:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0208 	orr.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e005      	b.n	8001f16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f2e:	f7ff fb07 	bl	8001540 <HAL_GetTick>
 8001f32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d008      	beq.n	8001f52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2280      	movs	r2, #128	@ 0x80
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e052      	b.n	8001ff8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0216 	bic.w	r2, r2, #22
 8001f60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <HAL_DMA_Abort+0x62>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0208 	bic.w	r2, r2, #8
 8001f90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa2:	e013      	b.n	8001fcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa4:	f7ff facc 	bl	8001540 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d90c      	bls.n	8001fcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e015      	b.n	8001ff8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e4      	bne.n	8001fa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	223f      	movs	r2, #63	@ 0x3f
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	@ 0x80
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00c      	b.n	8002038 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002050:	4b8e      	ldr	r3, [pc, #568]	@ (800228c <HAL_DMA_IRQHandler+0x248>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a8e      	ldr	r2, [pc, #568]	@ (8002290 <HAL_DMA_IRQHandler+0x24c>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2208      	movs	r2, #8
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01a      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	2208      	movs	r2, #8
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2201      	movs	r2, #1
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d012      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2204      	movs	r2, #4
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	2204      	movs	r2, #4
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	2210      	movs	r2, #16
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d043      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03c      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	2210      	movs	r2, #16
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d018      	beq.n	8002186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e01f      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e016      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0208 	bic.w	r2, r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	2220      	movs	r2, #32
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 808f 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8087 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2220      	movs	r2, #32
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d136      	bne.n	800225c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0216 	bic.w	r2, r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_DMA_IRQHandler+0x1da>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	223f      	movs	r2, #63	@ 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	d07e      	beq.n	8002350 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
        }
        return;
 800225a:	e079      	b.n	8002350 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	2b00      	cmp	r3, #0
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e02c      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000
 8002290:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e01e      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0210 	bic.w	r2, r2, #16
 80022c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d032      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d022      	beq.n	800233e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2205      	movs	r2, #5
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d307      	bcc.n	800232c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_DMA_IRQHandler+0x2cc>
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800232c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002350:	bf00      	nop
    }
  }
}
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d108      	bne.n	8002398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002396:	e007      	b.n	80023a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b10      	subs	r3, #16
 80023c4:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <DMA_CalcBaseAndBitshift+0x64>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ce:	4a13      	ldr	r2, [pc, #76]	@ (800241c <DMA_CalcBaseAndBitshift+0x68>)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d909      	bls.n	80023f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023f4:	e007      	b.n	8002406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	aaaaaaab 	.word	0xaaaaaaab
 800241c:	080069f4 	.word	0x080069f4

08002420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d856      	bhi.n	80024ee <DMA_CheckFifoParam+0xce>
 8002440:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <DMA_CheckFifoParam+0x28>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002459 	.word	0x08002459
 800244c:	0800246b 	.word	0x0800246b
 8002450:	08002459 	.word	0x08002459
 8002454:	080024ef 	.word	0x080024ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d046      	beq.n	80024f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e043      	b.n	80024f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002472:	d140      	bne.n	80024f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e03d      	b.n	80024f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002482:	d121      	bne.n	80024c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d837      	bhi.n	80024fa <DMA_CheckFifoParam+0xda>
 800248a:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <DMA_CheckFifoParam+0x70>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024a7 	.word	0x080024a7
 8002498:	080024a1 	.word	0x080024a1
 800249c:	080024b9 	.word	0x080024b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e030      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d025      	beq.n	80024fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b6:	e022      	b.n	80024fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c6:	e01c      	b.n	8002502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d903      	bls.n	80024d6 <DMA_CheckFifoParam+0xb6>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d4:	e018      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      break;
 80024da:	e015      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e00b      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024ee:	bf00      	nop
 80024f0:	e00a      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e008      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e006      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e004      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e002      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;   
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
    }
  } 
  
  return status; 
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b80      	cmp	r3, #128	@ 0x80
 8002530:	d106      	bne.n	8002540 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f001 b911 	b.w	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2240      	movs	r2, #64	@ 0x40
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f001 b8ff 	b.w	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800256e:	2302      	movs	r3, #2
 8002570:	f001 b8f7 	b.w	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	f041 80e5 	bne.w	8003754 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80025a6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f001 f910 	bl	80037dc <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b8d      	ldr	r3, [pc, #564]	@ (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d960      	bls.n	800268a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a8b      	ldr	r2, [pc, #556]	@ (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d057      	beq.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8a      	ldr	r2, [pc, #552]	@ (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d050      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a88      	ldr	r2, [pc, #544]	@ (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d049      	beq.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a87      	ldr	r2, [pc, #540]	@ (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d042      	beq.n	8002676 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a85      	ldr	r2, [pc, #532]	@ (800280c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03a      	beq.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a84      	ldr	r2, [pc, #528]	@ (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d032      	beq.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a82      	ldr	r2, [pc, #520]	@ (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02a      	beq.n	8002664 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a81      	ldr	r2, [pc, #516]	@ (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a7f      	ldr	r2, [pc, #508]	@ (800281c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01a      	beq.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d012      	beq.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7c      	ldr	r2, [pc, #496]	@ (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00a      	beq.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7b      	ldr	r2, [pc, #492]	@ (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002640:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002644:	e01e      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002646:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800264a:	e01b      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800264c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002650:	e018      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002652:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002656:	e015      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002658:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800265c:	e012      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800265e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002662:	e00f      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002664:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002668:	e00c      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800266a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800266e:	e009      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002670:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002674:	e006      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002676:	2320      	movs	r3, #32
 8002678:	e004      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800267a:	2320      	movs	r3, #32
 800267c:	e002      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800267e:	2320      	movs	r3, #32
 8002680:	e000      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002682:	2320      	movs	r3, #32
 8002684:	4a69      	ldr	r2, [pc, #420]	@ (800282c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e14f      	b.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002692:	429a      	cmp	r2, r3
 8002694:	d960      	bls.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a58      	ldr	r2, [pc, #352]	@ (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d057      	beq.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a56      	ldr	r2, [pc, #344]	@ (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d050      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a55      	ldr	r2, [pc, #340]	@ (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d049      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d042      	beq.n	8002744 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03a      	beq.n	800273e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a50      	ldr	r2, [pc, #320]	@ (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d032      	beq.n	8002738 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02a      	beq.n	8002732 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d022      	beq.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4c      	ldr	r2, [pc, #304]	@ (800281c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01a      	beq.n	8002726 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d012      	beq.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a49      	ldr	r2, [pc, #292]	@ (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00a      	beq.n	800271a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a47      	ldr	r2, [pc, #284]	@ (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d102      	bne.n	8002714 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800270e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002712:	e01e      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002714:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002718:	e01b      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800271a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800271e:	e018      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002720:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002724:	e015      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002726:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800272a:	e012      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800272c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002730:	e00f      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002732:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002736:	e00c      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002738:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800273c:	e009      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800273e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002742:	e006      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002744:	2320      	movs	r3, #32
 8002746:	e004      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002748:	2320      	movs	r3, #32
 800274a:	e002      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800274c:	2320      	movs	r3, #32
 800274e:	e000      	b.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002750:	2320      	movs	r3, #32
 8002752:	4a36      	ldr	r2, [pc, #216]	@ (800282c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002754:	6093      	str	r3, [r2, #8]
 8002756:	e0e8      	b.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002760:	429a      	cmp	r2, r3
 8002762:	f240 8082 	bls.w	800286a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d078      	beq.n	8002862 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a22      	ldr	r2, [pc, #136]	@ (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d071      	beq.n	800285e <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d06a      	beq.n	800285a <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d063      	beq.n	8002856 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05b      	beq.n	8002850 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1c      	ldr	r2, [pc, #112]	@ (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d053      	beq.n	800284a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04b      	beq.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d043      	beq.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03b      	beq.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a16      	ldr	r2, [pc, #88]	@ (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d012      	beq.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00a      	beq.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a13      	ldr	r2, [pc, #76]	@ (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d102      	bne.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80027de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027e2:	e03f      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80027e8:	e03c      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027ea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027ee:	e039      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027f4:	e036      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027f6:	bf00      	nop
 80027f8:	40026458 	.word	0x40026458
 80027fc:	40026010 	.word	0x40026010
 8002800:	40026410 	.word	0x40026410
 8002804:	40026070 	.word	0x40026070
 8002808:	40026470 	.word	0x40026470
 800280c:	40026028 	.word	0x40026028
 8002810:	40026428 	.word	0x40026428
 8002814:	40026088 	.word	0x40026088
 8002818:	40026488 	.word	0x40026488
 800281c:	40026040 	.word	0x40026040
 8002820:	40026440 	.word	0x40026440
 8002824:	400260a0 	.word	0x400260a0
 8002828:	400264a0 	.word	0x400264a0
 800282c:	40026400 	.word	0x40026400
 8002830:	400260b8 	.word	0x400260b8
 8002834:	40026058 	.word	0x40026058
 8002838:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800283c:	e012      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800283e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002842:	e00f      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002848:	e00c      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800284a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800284e:	e009      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002854:	e006      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002856:	2320      	movs	r3, #32
 8002858:	e004      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800285a:	2320      	movs	r3, #32
 800285c:	e002      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800285e:	2320      	movs	r3, #32
 8002860:	e000      	b.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002862:	2320      	movs	r3, #32
 8002864:	4a8c      	ldr	r2, [pc, #560]	@ (8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002866:	60d3      	str	r3, [r2, #12]
 8002868:	e05f      	b.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a8b      	ldr	r2, [pc, #556]	@ (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d057      	beq.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a89      	ldr	r2, [pc, #548]	@ (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d050      	beq.n	8002920 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a88      	ldr	r2, [pc, #544]	@ (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d049      	beq.n	800291c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a86      	ldr	r2, [pc, #536]	@ (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d042      	beq.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a85      	ldr	r2, [pc, #532]	@ (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d03a      	beq.n	8002912 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a83      	ldr	r2, [pc, #524]	@ (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d032      	beq.n	800290c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a82      	ldr	r2, [pc, #520]	@ (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02a      	beq.n	8002906 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a80      	ldr	r2, [pc, #512]	@ (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d022      	beq.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7f      	ldr	r2, [pc, #508]	@ (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d01a      	beq.n	80028fa <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d012      	beq.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00a      	beq.n	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a7a      	ldr	r2, [pc, #488]	@ (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d102      	bne.n	80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80028e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028e6:	e01e      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80028ec:	e01b      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028f2:	e018      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028f8:	e015      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028fe:	e012      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002904:	e00f      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002906:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800290a:	e00c      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800290c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002910:	e009      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002912:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002916:	e006      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002918:	2320      	movs	r3, #32
 800291a:	e004      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800291c:	2320      	movs	r3, #32
 800291e:	e002      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002920:	2320      	movs	r3, #32
 8002922:	e000      	b.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002924:	2320      	movs	r3, #32
 8002926:	4a5c      	ldr	r2, [pc, #368]	@ (8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002928:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b66      	ldr	r3, [pc, #408]	@ (8002acc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002932:	429a      	cmp	r2, r3
 8002934:	d960      	bls.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a58      	ldr	r2, [pc, #352]	@ (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d057      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a56      	ldr	r2, [pc, #344]	@ (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d050      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a55      	ldr	r2, [pc, #340]	@ (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d049      	beq.n	80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a53      	ldr	r2, [pc, #332]	@ (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d042      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03a      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a50      	ldr	r2, [pc, #320]	@ (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d032      	beq.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d02a      	beq.n	80029d2 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01a      	beq.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d012      	beq.n	80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a49      	ldr	r2, [pc, #292]	@ (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00a      	beq.n	80029ba <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a47      	ldr	r2, [pc, #284]	@ (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d102      	bne.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80029ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029b2:	e01e      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029b8:	e01b      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029be:	e018      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029c4:	e015      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029ca:	e012      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d0:	e00f      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d6:	e00c      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029dc:	e009      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029e2:	e006      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029e4:	2310      	movs	r3, #16
 80029e6:	e004      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029e8:	2310      	movs	r3, #16
 80029ea:	e002      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029ec:	2310      	movs	r3, #16
 80029ee:	e000      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80029f0:	2310      	movs	r3, #16
 80029f2:	4a37      	ldr	r2, [pc, #220]	@ (8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	e14f      	b.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f240 8082 	bls.w	8002b0a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d078      	beq.n	8002b02 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d071      	beq.n	8002afe <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a21      	ldr	r2, [pc, #132]	@ (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d06a      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d063      	beq.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1e      	ldr	r2, [pc, #120]	@ (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d05b      	beq.n	8002af0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d053      	beq.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04b      	beq.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d043      	beq.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d03b      	beq.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d012      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00a      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a13      	ldr	r2, [pc, #76]	@ (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d102      	bne.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002a7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a82:	e03f      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a88:	e03c      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a8a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a8e:	e039      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a94:	e036      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a96:	bf00      	nop
 8002a98:	40026000 	.word	0x40026000
 8002a9c:	40026010 	.word	0x40026010
 8002aa0:	40026410 	.word	0x40026410
 8002aa4:	40026070 	.word	0x40026070
 8002aa8:	40026470 	.word	0x40026470
 8002aac:	40026028 	.word	0x40026028
 8002ab0:	40026428 	.word	0x40026428
 8002ab4:	40026088 	.word	0x40026088
 8002ab8:	40026488 	.word	0x40026488
 8002abc:	40026040 	.word	0x40026040
 8002ac0:	40026440 	.word	0x40026440
 8002ac4:	400260a0 	.word	0x400260a0
 8002ac8:	400264a0 	.word	0x400264a0
 8002acc:	40026458 	.word	0x40026458
 8002ad0:	40026400 	.word	0x40026400
 8002ad4:	400260b8 	.word	0x400260b8
 8002ad8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002adc:	e012      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae2:	e00f      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae8:	e00c      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aee:	e009      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002af4:	e006      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002af6:	2310      	movs	r3, #16
 8002af8:	e004      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002afa:	2310      	movs	r3, #16
 8002afc:	e002      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002afe:	2310      	movs	r3, #16
 8002b00:	e000      	b.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002b02:	2310      	movs	r3, #16
 8002b04:	4a8c      	ldr	r2, [pc, #560]	@ (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002b06:	6093      	str	r3, [r2, #8]
 8002b08:	e0c6      	b.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b8a      	ldr	r3, [pc, #552]	@ (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d960      	bls.n	8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a89      	ldr	r2, [pc, #548]	@ (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d057      	beq.n	8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a87      	ldr	r2, [pc, #540]	@ (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d050      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a86      	ldr	r2, [pc, #536]	@ (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d049      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a84      	ldr	r2, [pc, #528]	@ (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d042      	beq.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a83      	ldr	r2, [pc, #524]	@ (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d03a      	beq.n	8002bbe <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a81      	ldr	r2, [pc, #516]	@ (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d032      	beq.n	8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a80      	ldr	r2, [pc, #512]	@ (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02a      	beq.n	8002bb2 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7e      	ldr	r2, [pc, #504]	@ (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a7b      	ldr	r2, [pc, #492]	@ (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d012      	beq.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00a      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a78      	ldr	r2, [pc, #480]	@ (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d102      	bne.n	8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002b8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b92:	e01e      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b94:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b98:	e01b      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b9a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b9e:	e018      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ba0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ba4:	e015      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ba6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002baa:	e012      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb0:	e00f      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb6:	e00c      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bbc:	e009      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bc2:	e006      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	e004      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	e002      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	e000      	b.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	4a67      	ldr	r2, [pc, #412]	@ (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002bd4:	60d3      	str	r3, [r2, #12]
 8002bd6:	e05f      	b.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	@ (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d057      	beq.n	8002c92 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a57      	ldr	r2, [pc, #348]	@ (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d050      	beq.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	@ (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d049      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a54      	ldr	r2, [pc, #336]	@ (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d042      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a52      	ldr	r2, [pc, #328]	@ (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03a      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a51      	ldr	r2, [pc, #324]	@ (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d032      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	@ (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02a      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4e      	ldr	r2, [pc, #312]	@ (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	@ (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d012      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00a      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002c50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c54:	e01e      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c5a:	e01b      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c60:	e018      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c62:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c66:	e015      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c6c:	e012      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c72:	e00f      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c78:	e00c      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c7e:	e009      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c84:	e006      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c86:	2310      	movs	r3, #16
 8002c88:	e004      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	e002      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c8e:	2310      	movs	r3, #16
 8002c90:	e000      	b.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c92:	2310      	movs	r3, #16
 8002c94:	4a36      	ldr	r2, [pc, #216]	@ (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002c96:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b35      	ldr	r3, [pc, #212]	@ (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f240 8082 	bls.w	8002daa <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a25      	ldr	r2, [pc, #148]	@ (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d078      	beq.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d071      	beq.n	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a22      	ldr	r2, [pc, #136]	@ (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d06a      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	@ (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d063      	beq.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d05b      	beq.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d053      	beq.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04b      	beq.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d043      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a19      	ldr	r2, [pc, #100]	@ (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03b      	beq.n	8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d012      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a16      	ldr	r2, [pc, #88]	@ (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00a      	beq.n	8002d2a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d102      	bne.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002d1e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d22:	e03f      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d28:	e03c      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d2a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d2e:	e039      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d34:	e036      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d36:	bf00      	nop
 8002d38:	40026400 	.word	0x40026400
 8002d3c:	40026058 	.word	0x40026058
 8002d40:	40026010 	.word	0x40026010
 8002d44:	40026410 	.word	0x40026410
 8002d48:	40026070 	.word	0x40026070
 8002d4c:	40026470 	.word	0x40026470
 8002d50:	40026028 	.word	0x40026028
 8002d54:	40026428 	.word	0x40026428
 8002d58:	40026088 	.word	0x40026088
 8002d5c:	40026488 	.word	0x40026488
 8002d60:	40026040 	.word	0x40026040
 8002d64:	40026440 	.word	0x40026440
 8002d68:	400260a0 	.word	0x400260a0
 8002d6c:	400264a0 	.word	0x400264a0
 8002d70:	40026000 	.word	0x40026000
 8002d74:	40026458 	.word	0x40026458
 8002d78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d7c:	e012      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d82:	e00f      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d88:	e00c      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d8e:	e009      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d94:	e006      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d96:	2308      	movs	r3, #8
 8002d98:	e004      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e002      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e000      	b.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002da2:	2308      	movs	r3, #8
 8002da4:	4a8c      	ldr	r2, [pc, #560]	@ (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002da6:	60d3      	str	r3, [r2, #12]
 8002da8:	e14e      	b.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d960      	bls.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a89      	ldr	r2, [pc, #548]	@ (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d057      	beq.n	8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a87      	ldr	r2, [pc, #540]	@ (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d050      	beq.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a86      	ldr	r2, [pc, #536]	@ (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d049      	beq.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a84      	ldr	r2, [pc, #528]	@ (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d042      	beq.n	8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a83      	ldr	r2, [pc, #524]	@ (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d03a      	beq.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a81      	ldr	r2, [pc, #516]	@ (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d032      	beq.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a80      	ldr	r2, [pc, #512]	@ (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d02a      	beq.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7e      	ldr	r2, [pc, #504]	@ (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01a      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7b      	ldr	r2, [pc, #492]	@ (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d012      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7a      	ldr	r2, [pc, #488]	@ (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00a      	beq.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a78      	ldr	r2, [pc, #480]	@ (800300c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d102      	bne.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002e2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e32:	e01e      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e38:	e01b      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e3e:	e018      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e44:	e015      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e46:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e4a:	e012      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e50:	e00f      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e56:	e00c      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e5c:	e009      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e62:	e006      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e64:	2308      	movs	r3, #8
 8002e66:	e004      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e68:	2308      	movs	r3, #8
 8002e6a:	e002      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	e000      	b.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e70:	2308      	movs	r3, #8
 8002e72:	4a59      	ldr	r2, [pc, #356]	@ (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	e0e7      	b.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b64      	ldr	r3, [pc, #400]	@ (8003010 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d960      	bls.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a55      	ldr	r2, [pc, #340]	@ (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d057      	beq.n	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a54      	ldr	r2, [pc, #336]	@ (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d050      	beq.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	@ (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d049      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d042      	beq.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03a      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d032      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02a      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4b      	ldr	r2, [pc, #300]	@ (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01a      	beq.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d012      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a46      	ldr	r2, [pc, #280]	@ (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00a      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a45      	ldr	r2, [pc, #276]	@ (800300c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002efc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f00:	e01e      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f06:	e01b      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f0c:	e018      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f0e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f12:	e015      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f18:	e012      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f1e:	e00f      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f24:	e00c      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f2a:	e009      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f30:	e006      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f32:	2308      	movs	r3, #8
 8002f34:	e004      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e002      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	e000      	b.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	4a34      	ldr	r2, [pc, #208]	@ (8003014 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002f42:	60d3      	str	r3, [r2, #12]
 8002f44:	e080      	b.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	@ (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d078      	beq.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a23      	ldr	r2, [pc, #140]	@ (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d071      	beq.n	800303e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d06a      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a20      	ldr	r2, [pc, #128]	@ (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d063      	beq.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d05b      	beq.n	8003030 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d053      	beq.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04b      	beq.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d043      	beq.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d012      	beq.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00a      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d102      	bne.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002fbe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fc2:	e03f      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc8:	e03c      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fce:	e039      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fd4:	e036      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fd6:	bf00      	nop
 8002fd8:	40026400 	.word	0x40026400
 8002fdc:	400260b8 	.word	0x400260b8
 8002fe0:	40026010 	.word	0x40026010
 8002fe4:	40026410 	.word	0x40026410
 8002fe8:	40026070 	.word	0x40026070
 8002fec:	40026470 	.word	0x40026470
 8002ff0:	40026028 	.word	0x40026028
 8002ff4:	40026428 	.word	0x40026428
 8002ff8:	40026088 	.word	0x40026088
 8002ffc:	40026488 	.word	0x40026488
 8003000:	40026040 	.word	0x40026040
 8003004:	40026440 	.word	0x40026440
 8003008:	400260a0 	.word	0x400260a0
 800300c:	400264a0 	.word	0x400264a0
 8003010:	40026058 	.word	0x40026058
 8003014:	40026000 	.word	0x40026000
 8003018:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800301c:	e012      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800301e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003022:	e00f      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003028:	e00c      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800302a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800302e:	e009      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003034:	e006      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003036:	2308      	movs	r3, #8
 8003038:	e004      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800303a:	2308      	movs	r3, #8
 800303c:	e002      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800303e:	2308      	movs	r3, #8
 8003040:	e000      	b.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003042:	2308      	movs	r3, #8
 8003044:	4a8a      	ldr	r2, [pc, #552]	@ (8003270 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003046:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b89      	ldr	r3, [pc, #548]	@ (8003274 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003050:	429a      	cmp	r2, r3
 8003052:	d960      	bls.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a87      	ldr	r2, [pc, #540]	@ (8003278 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d057      	beq.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a86      	ldr	r2, [pc, #536]	@ (800327c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d050      	beq.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a84      	ldr	r2, [pc, #528]	@ (8003280 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d049      	beq.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a83      	ldr	r2, [pc, #524]	@ (8003284 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d042      	beq.n	8003102 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a81      	ldr	r2, [pc, #516]	@ (8003288 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03a      	beq.n	80030fc <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a80      	ldr	r2, [pc, #512]	@ (800328c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d032      	beq.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7e      	ldr	r2, [pc, #504]	@ (8003290 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02a      	beq.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7d      	ldr	r2, [pc, #500]	@ (8003294 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7b      	ldr	r2, [pc, #492]	@ (8003298 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01a      	beq.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7a      	ldr	r2, [pc, #488]	@ (800329c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d012      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a78      	ldr	r2, [pc, #480]	@ (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00a      	beq.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a77      	ldr	r2, [pc, #476]	@ (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d102      	bne.n	80030d2 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80030cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030d0:	e01e      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d6:	e01b      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030dc:	e018      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030e2:	e015      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030e8:	e012      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ee:	e00f      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030f4:	e00c      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030fa:	e009      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003100:	e006      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003102:	2304      	movs	r3, #4
 8003104:	e004      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003106:	2304      	movs	r3, #4
 8003108:	e002      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800310a:	2304      	movs	r3, #4
 800310c:	e000      	b.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800310e:	2304      	movs	r3, #4
 8003110:	4a65      	ldr	r2, [pc, #404]	@ (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003112:	60d3      	str	r3, [r2, #12]
 8003114:	e150      	b.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800311e:	429a      	cmp	r2, r3
 8003120:	d960      	bls.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a54      	ldr	r2, [pc, #336]	@ (8003278 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d057      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d050      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a51      	ldr	r2, [pc, #324]	@ (8003280 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d049      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4f      	ldr	r2, [pc, #316]	@ (8003284 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d042      	beq.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4e      	ldr	r2, [pc, #312]	@ (8003288 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d03a      	beq.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4c      	ldr	r2, [pc, #304]	@ (800328c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d032      	beq.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4b      	ldr	r2, [pc, #300]	@ (8003290 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d02a      	beq.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a49      	ldr	r2, [pc, #292]	@ (8003294 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d01a      	beq.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a46      	ldr	r2, [pc, #280]	@ (800329c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d012      	beq.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a45      	ldr	r2, [pc, #276]	@ (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00a      	beq.n	80031a6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a43      	ldr	r2, [pc, #268]	@ (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d102      	bne.n	80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800319a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800319e:	e01e      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a4:	e01b      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031a6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031aa:	e018      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031b0:	e015      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031b6:	e012      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031bc:	e00f      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c2:	e00c      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c8:	e009      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031ce:	e006      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e004      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031d4:	2304      	movs	r3, #4
 80031d6:	e002      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031d8:	2304      	movs	r3, #4
 80031da:	e000      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80031dc:	2304      	movs	r3, #4
 80031de:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e0e9      	b.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f240 8083 	bls.w	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a20      	ldr	r2, [pc, #128]	@ (8003278 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d079      	beq.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	@ (800327c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d072      	beq.n	80032ec <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d06b      	beq.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d064      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1a      	ldr	r2, [pc, #104]	@ (8003288 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d05c      	beq.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	@ (800328c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d054      	beq.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04c      	beq.n	80032d2 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d044      	beq.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d03c      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d034      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a11      	ldr	r2, [pc, #68]	@ (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0f      	ldr	r2, [pc, #60]	@ (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d124      	bne.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800326a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800326e:	e040      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003270:	40026000 	.word	0x40026000
 8003274:	40026458 	.word	0x40026458
 8003278:	40026010 	.word	0x40026010
 800327c:	40026410 	.word	0x40026410
 8003280:	40026070 	.word	0x40026070
 8003284:	40026470 	.word	0x40026470
 8003288:	40026028 	.word	0x40026028
 800328c:	40026428 	.word	0x40026428
 8003290:	40026088 	.word	0x40026088
 8003294:	40026488 	.word	0x40026488
 8003298:	40026040 	.word	0x40026040
 800329c:	40026440 	.word	0x40026440
 80032a0:	400260a0 	.word	0x400260a0
 80032a4:	400264a0 	.word	0x400264a0
 80032a8:	40026400 	.word	0x40026400
 80032ac:	400260b8 	.word	0x400260b8
 80032b0:	40026058 	.word	0x40026058
 80032b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032b8:	e01b      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032be:	e018      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032c4:	e015      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032c6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032ca:	e012      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d0:	e00f      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d6:	e00c      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032dc:	e009      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e2:	e006      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032e4:	2304      	movs	r3, #4
 80032e6:	e004      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e002      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e000      	b.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80032f0:	2304      	movs	r3, #4
 80032f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80032f4:	60d3      	str	r3, [r2, #12]
 80032f6:	e05f      	b.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a89      	ldr	r2, [pc, #548]	@ (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d057      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a88      	ldr	r2, [pc, #544]	@ (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d050      	beq.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a86      	ldr	r2, [pc, #536]	@ (800352c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d049      	beq.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a85      	ldr	r2, [pc, #532]	@ (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d042      	beq.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	@ (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d03a      	beq.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a82      	ldr	r2, [pc, #520]	@ (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d032      	beq.n	800339a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a80      	ldr	r2, [pc, #512]	@ (800353c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02a      	beq.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7f      	ldr	r2, [pc, #508]	@ (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7d      	ldr	r2, [pc, #500]	@ (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01a      	beq.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d012      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7a      	ldr	r2, [pc, #488]	@ (800354c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00a      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a79      	ldr	r2, [pc, #484]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d102      	bne.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003370:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003374:	e01e      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003376:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800337a:	e01b      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800337c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003380:	e018      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003382:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003386:	e015      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003388:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800338c:	e012      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800338e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003392:	e00f      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003398:	e00c      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800339a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800339e:	e009      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80033a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033a4:	e006      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80033a6:	2304      	movs	r3, #4
 80033a8:	e004      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e002      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e000      	b.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80033b2:	2304      	movs	r3, #4
 80033b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80033b6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d95c      	bls.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d053      	beq.n	8003476 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a55      	ldr	r2, [pc, #340]	@ (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04c      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a53      	ldr	r2, [pc, #332]	@ (800352c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d045      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a52      	ldr	r2, [pc, #328]	@ (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03e      	beq.n	800346a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a50      	ldr	r2, [pc, #320]	@ (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d037      	beq.n	8003466 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d030      	beq.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a4d      	ldr	r2, [pc, #308]	@ (800353c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d029      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4c      	ldr	r2, [pc, #304]	@ (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a4a      	ldr	r2, [pc, #296]	@ (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01a      	beq.n	8003454 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a49      	ldr	r2, [pc, #292]	@ (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d012      	beq.n	800344e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a47      	ldr	r2, [pc, #284]	@ (800354c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00a      	beq.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a46      	ldr	r2, [pc, #280]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d102      	bne.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800343c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003440:	e01a      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003442:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003446:	e017      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800344c:	e014      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800344e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003452:	e011      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003458:	e00e      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800345a:	2340      	movs	r3, #64	@ 0x40
 800345c:	e00c      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800345e:	2340      	movs	r3, #64	@ 0x40
 8003460:	e00a      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003462:	2340      	movs	r3, #64	@ 0x40
 8003464:	e008      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003466:	2340      	movs	r3, #64	@ 0x40
 8003468:	e006      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800346a:	2301      	movs	r3, #1
 800346c:	e004      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800346e:	2301      	movs	r3, #1
 8003470:	e002      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003476:	2301      	movs	r3, #1
 8003478:	4a37      	ldr	r2, [pc, #220]	@ (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e141      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b35      	ldr	r3, [pc, #212]	@ (800355c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003486:	429a      	cmp	r2, r3
 8003488:	d97c      	bls.n	8003584 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	@ (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d073      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d06c      	beq.n	8003578 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	@ (800352c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d065      	beq.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d05e      	beq.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d057      	beq.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d050      	beq.n	8003568 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d049      	beq.n	8003564 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d042      	beq.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01a      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d012      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a16      	ldr	r2, [pc, #88]	@ (800354c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00a      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d102      	bne.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003502:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003506:	e03a      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003508:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800350c:	e037      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800350e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003512:	e034      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003518:	e031      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800351a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800351e:	e02e      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003520:	40026000 	.word	0x40026000
 8003524:	40026010 	.word	0x40026010
 8003528:	40026410 	.word	0x40026410
 800352c:	40026070 	.word	0x40026070
 8003530:	40026470 	.word	0x40026470
 8003534:	40026028 	.word	0x40026028
 8003538:	40026428 	.word	0x40026428
 800353c:	40026088 	.word	0x40026088
 8003540:	40026488 	.word	0x40026488
 8003544:	40026040 	.word	0x40026040
 8003548:	40026440 	.word	0x40026440
 800354c:	400260a0 	.word	0x400260a0
 8003550:	400264a0 	.word	0x400264a0
 8003554:	40026458 	.word	0x40026458
 8003558:	40026400 	.word	0x40026400
 800355c:	400260b8 	.word	0x400260b8
 8003560:	2340      	movs	r3, #64	@ 0x40
 8003562:	e00c      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003564:	2340      	movs	r3, #64	@ 0x40
 8003566:	e00a      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003568:	2340      	movs	r3, #64	@ 0x40
 800356a:	e008      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800356c:	2340      	movs	r3, #64	@ 0x40
 800356e:	e006      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003570:	2301      	movs	r3, #1
 8003572:	e004      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003574:	2301      	movs	r3, #1
 8003576:	e002      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800357c:	2301      	movs	r3, #1
 800357e:	4a7b      	ldr	r2, [pc, #492]	@ (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003580:	6093      	str	r3, [r2, #8]
 8003582:	e0be      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b79      	ldr	r3, [pc, #484]	@ (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d95c      	bls.n	800364a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a77      	ldr	r2, [pc, #476]	@ (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d053      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a76      	ldr	r2, [pc, #472]	@ (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04c      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a74      	ldr	r2, [pc, #464]	@ (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d045      	beq.n	800363a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	@ (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d03e      	beq.n	8003636 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a71      	ldr	r2, [pc, #452]	@ (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a70      	ldr	r2, [pc, #448]	@ (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d030      	beq.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	@ (800378c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d029      	beq.n	800362a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6d      	ldr	r2, [pc, #436]	@ (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01a      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003798 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d012      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	@ (800379c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00a      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a67      	ldr	r2, [pc, #412]	@ (80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d102      	bne.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800360c:	e01a      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800360e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003612:	e017      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003618:	e014      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800361a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800361e:	e011      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003624:	e00e      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003626:	2340      	movs	r3, #64	@ 0x40
 8003628:	e00c      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800362a:	2340      	movs	r3, #64	@ 0x40
 800362c:	e00a      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800362e:	2340      	movs	r3, #64	@ 0x40
 8003630:	e008      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003632:	2340      	movs	r3, #64	@ 0x40
 8003634:	e006      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003636:	2301      	movs	r3, #1
 8003638:	e004      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800363a:	2301      	movs	r3, #1
 800363c:	e002      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003642:	2301      	movs	r3, #1
 8003644:	4a57      	ldr	r2, [pc, #348]	@ (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e05b      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a49      	ldr	r2, [pc, #292]	@ (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d053      	beq.n	80036fc <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a47      	ldr	r2, [pc, #284]	@ (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04c      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a44      	ldr	r2, [pc, #272]	@ (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03e      	beq.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a43      	ldr	r2, [pc, #268]	@ (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d037      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d030      	beq.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d029      	beq.n	80036e4 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a3e      	ldr	r2, [pc, #248]	@ (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3d      	ldr	r2, [pc, #244]	@ (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01a      	beq.n	80036da <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003798 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d012      	beq.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3a      	ldr	r2, [pc, #232]	@ (800379c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00a      	beq.n	80036ce <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a38      	ldr	r2, [pc, #224]	@ (80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80036c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c6:	e01a      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036cc:	e017      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d2:	e014      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d8:	e011      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036de:	e00e      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036e0:	2340      	movs	r3, #64	@ 0x40
 80036e2:	e00c      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036e4:	2340      	movs	r3, #64	@ 0x40
 80036e6:	e00a      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036e8:	2340      	movs	r3, #64	@ 0x40
 80036ea:	e008      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036ec:	2340      	movs	r3, #64	@ 0x40
 80036ee:	e006      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e004      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e002      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80036fc:	2301      	movs	r3, #1
 80036fe:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003700:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0216 	orr.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0208 	orr.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e005      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40026400 	.word	0x40026400
 8003770:	40026058 	.word	0x40026058
 8003774:	40026010 	.word	0x40026010
 8003778:	40026410 	.word	0x40026410
 800377c:	40026070 	.word	0x40026070
 8003780:	40026470 	.word	0x40026470
 8003784:	40026028 	.word	0x40026028
 8003788:	40026428 	.word	0x40026428
 800378c:	40026088 	.word	0x40026088
 8003790:	40026488 	.word	0x40026488
 8003794:	40026040 	.word	0x40026040
 8003798:	40026440 	.word	0x40026440
 800379c:	400260a0 	.word	0x400260a0
 80037a0:	400264a0 	.word	0x400264a0
 80037a4:	40026000 	.word	0x40026000

080037a8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	e003      	b.n	80037ce <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b40      	cmp	r3, #64	@ 0x40
 80037f8:	d108      	bne.n	800380c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800380a:	e007      	b.n	800381c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e16b      	b.n	8003b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 815a 	bne.w	8003b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d005      	beq.n	800387a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003876:	2b02      	cmp	r3, #2
 8003878:	d130      	bne.n	80038dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b0:	2201      	movs	r2, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 0201 	and.w	r2, r3, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d017      	beq.n	8003918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80b4 	beq.w	8003b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b60      	ldr	r3, [pc, #384]	@ (8003b34 <HAL_GPIO_Init+0x30c>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b34 <HAL_GPIO_Init+0x30c>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039be:	4b5d      	ldr	r3, [pc, #372]	@ (8003b34 <HAL_GPIO_Init+0x30c>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003b38 <HAL_GPIO_Init+0x310>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	@ (8003b3c <HAL_GPIO_Init+0x314>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02b      	beq.n	8003a4e <HAL_GPIO_Init+0x226>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a51      	ldr	r2, [pc, #324]	@ (8003b40 <HAL_GPIO_Init+0x318>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d025      	beq.n	8003a4a <HAL_GPIO_Init+0x222>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a50      	ldr	r2, [pc, #320]	@ (8003b44 <HAL_GPIO_Init+0x31c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <HAL_GPIO_Init+0x21e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	@ (8003b48 <HAL_GPIO_Init+0x320>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x21a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4e      	ldr	r2, [pc, #312]	@ (8003b4c <HAL_GPIO_Init+0x324>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x216>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4d      	ldr	r2, [pc, #308]	@ (8003b50 <HAL_GPIO_Init+0x328>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x212>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4c      	ldr	r2, [pc, #304]	@ (8003b54 <HAL_GPIO_Init+0x32c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	@ (8003b58 <HAL_GPIO_Init+0x330>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x20a>
 8003a2e:	2307      	movs	r3, #7
 8003a30:	e00e      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a32:	2308      	movs	r3, #8
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	@ (8003b38 <HAL_GPIO_Init+0x310>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a32      	ldr	r2, [pc, #200]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b30      	ldr	r3, [pc, #192]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac2:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b10:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f67f ae90 	bls.w	8003844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40021400 	.word	0x40021400
 8003b54:	40021800 	.word	0x40021800
 8003b58:	40021c00 	.word	0x40021c00
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e12b      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fa98 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	@ 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f001 fe2e 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a81      	ldr	r2, [pc, #516]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d807      	bhi.n	8003c18 <HAL_I2C_Init+0x84>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a80      	ldr	r2, [pc, #512]	@ (8003e0c <HAL_I2C_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e006      	b.n	8003c26 <HAL_I2C_Init+0x92>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e10 <HAL_I2C_Init+0x27c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0e7      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a78      	ldr	r2, [pc, #480]	@ (8003e14 <HAL_I2C_Init+0x280>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d802      	bhi.n	8003c68 <HAL_I2C_Init+0xd4>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	e009      	b.n	8003c7c <HAL_I2C_Init+0xe8>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a69      	ldr	r2, [pc, #420]	@ (8003e18 <HAL_I2C_Init+0x284>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	495c      	ldr	r1, [pc, #368]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d819      	bhi.n	8003cd0 <HAL_I2C_Init+0x13c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e59      	subs	r1, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_I2C_Init+0x138>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e59      	subs	r1, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	e051      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	e04f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <HAL_I2C_Init+0x168>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e012      	b.n	8003d22 <HAL_I2C_Init+0x18e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Init+0x196>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <HAL_I2C_Init+0x1bc>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e58      	subs	r0, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	e00f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6809      	ldr	r1, [r1, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6911      	ldr	r1, [r2, #16]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	000186a0 	.word	0x000186a0
 8003e0c:	001e847f 	.word	0x001e847f
 8003e10:	003d08ff 	.word	0x003d08ff
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	10624dd3 	.word	0x10624dd3

08003e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7fd fb86 	bl	8001540 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 80e0 	bne.w	8004004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4970      	ldr	r1, [pc, #448]	@ (8004010 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fdf4 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0d3      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2C_Master_Transmit+0x50>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0cc      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	@ 0x21
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2210      	movs	r2, #16
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	@ (8004014 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed4:	8979      	ldrh	r1, [r7, #10]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fbc8 	bl	8004670 <I2C_MasterRequestWrite>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e08d      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f00:	e066      	b.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 feb2 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	6a39      	ldr	r1, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fea9 	bl	8004d00 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e01a      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d194      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000

08004018 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	@ 0x30
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
 8004028:	4613      	mov	r3, r2
 800402a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7fd fa88 	bl	8001540 <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 8217 	bne.w	800446e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	497c      	ldr	r1, [pc, #496]	@ (800423c <HAL_I2C_Master_Receive+0x224>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fcf6 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e20a      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2C_Master_Receive+0x50>
 8004064:	2302      	movs	r3, #2
 8004066:	e203      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d007      	beq.n	800408e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800409c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2222      	movs	r2, #34	@ 0x22
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	893a      	ldrh	r2, [r7, #8]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a5c      	ldr	r2, [pc, #368]	@ (8004240 <HAL_I2C_Master_Receive+0x228>)
 80040ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fb4c 	bl	8004774 <I2C_MasterRequestRead>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1c4      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e198      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11b      	bne.n	8004156 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e178      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415a:	2b02      	cmp	r3, #2
 800415c:	d11b      	bne.n	8004196 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	e158      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041bc:	e144      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	f200 80f1 	bhi.w	80043aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d123      	bne.n	8004218 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fddb 	bl	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e145      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004216:	e117      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421c:	2b02      	cmp	r3, #2
 800421e:	d14e      	bne.n	80042be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	2200      	movs	r2, #0
 8004228:	4906      	ldr	r1, [pc, #24]	@ (8004244 <HAL_I2C_Master_Receive+0x22c>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fc06 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e11a      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
 800423a:	bf00      	nop
 800423c:	00100002 	.word	0x00100002
 8004240:	ffff0000 	.word	0xffff0000
 8004244:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042bc:	e0c4      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	2200      	movs	r2, #0
 80042c6:	496c      	ldr	r1, [pc, #432]	@ (8004478 <HAL_I2C_Master_Receive+0x460>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fbb7 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cb      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	4955      	ldr	r1, [pc, #340]	@ (8004478 <HAL_I2C_Master_Receive+0x460>)
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fb89 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e09d      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a8:	e04e      	b.n	8004448 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fcee 	bl	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e058      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d124      	bne.n	8004448 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	2b03      	cmp	r3, #3
 8004404:	d107      	bne.n	8004416 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004414:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f aeb6 	bne.w	80041be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3728      	adds	r7, #40	@ 0x28
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	00010004 	.word	0x00010004

0800447c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004496:	f7fd f853 	bl	8001540 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	f040 80d9 	bne.w	800465c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2319      	movs	r3, #25
 80044b0:	2201      	movs	r2, #1
 80044b2:	496d      	ldr	r1, [pc, #436]	@ (8004668 <HAL_I2C_Mem_Write+0x1ec>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fac1 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	e0cc      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Mem_Write+0x56>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0c5      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d007      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2221      	movs	r2, #33	@ 0x21
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a4d      	ldr	r2, [pc, #308]	@ (800466c <HAL_I2C_Mem_Write+0x1f0>)
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800453a:	88f8      	ldrh	r0, [r7, #6]
 800453c:	893a      	ldrh	r2, [r7, #8]
 800453e:	8979      	ldrh	r1, [r7, #10]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f9e0 	bl	8004910 <I2C_RequestMemoryWrite>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d052      	beq.n	80045fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e081      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fb86 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b04      	cmp	r3, #4
 8004570:	d107      	bne.n	8004582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06b      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d11b      	bne.n	80045fc <HAL_I2C_Mem_Write+0x180>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1aa      	bne.n	800455a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fb79 	bl	8004d00 <I2C_WaitOnBTFFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e016      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	00100002 	.word	0x00100002
 800466c:	ffff0000 	.word	0xffff0000

08004670 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	460b      	mov	r3, r1
 800467e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d006      	beq.n	800469a <I2C_MasterRequestWrite+0x2a>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d003      	beq.n	800469a <I2C_MasterRequestWrite+0x2a>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004698:	d108      	bne.n	80046ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e00b      	b.n	80046c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	2b12      	cmp	r3, #18
 80046b2:	d107      	bne.n	80046c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f9b3 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ea:	d103      	bne.n	80046f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e035      	b.n	8004764 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004700:	d108      	bne.n	8004714 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004710:	611a      	str	r2, [r3, #16]
 8004712:	e01b      	b.n	800474c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004714:	897b      	ldrh	r3, [r7, #10]
 8004716:	11db      	asrs	r3, r3, #7
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0306 	and.w	r3, r3, #6
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f063 030f 	orn	r3, r3, #15
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	490e      	ldr	r1, [pc, #56]	@ (800476c <I2C_MasterRequestWrite+0xfc>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f9fc 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e010      	b.n	8004764 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004742:	897b      	ldrh	r3, [r7, #10]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <I2C_MasterRequestWrite+0x100>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9ec 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	00010008 	.word	0x00010008
 8004770:	00010002 	.word	0x00010002

08004774 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	460b      	mov	r3, r1
 8004782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004798:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d006      	beq.n	80047ae <I2C_MasterRequestRead+0x3a>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d003      	beq.n	80047ae <I2C_MasterRequestRead+0x3a>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047ac:	d108      	bne.n	80047c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e00b      	b.n	80047d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	2b11      	cmp	r3, #17
 80047c6:	d107      	bne.n	80047d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f929 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fe:	d103      	bne.n	8004808 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e079      	b.n	8004900 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004814:	d108      	bne.n	8004828 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004816:	897b      	ldrh	r3, [r7, #10]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]
 8004826:	e05f      	b.n	80048e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004828:	897b      	ldrh	r3, [r7, #10]
 800482a:	11db      	asrs	r3, r3, #7
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0306 	and.w	r3, r3, #6
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f063 030f 	orn	r3, r3, #15
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4930      	ldr	r1, [pc, #192]	@ (8004908 <I2C_MasterRequestRead+0x194>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f972 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e054      	b.n	8004900 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4929      	ldr	r1, [pc, #164]	@ (800490c <I2C_MasterRequestRead+0x198>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f962 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e044      	b.n	8004900 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f8c7 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c2:	d103      	bne.n	80048cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e017      	b.n	8004900 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	11db      	asrs	r3, r3, #7
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f063 030e 	orn	r3, r3, #14
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <I2C_MasterRequestRead+0x198>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f91e 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00010008 	.word	0x00010008
 800490c:	00010002 	.word	0x00010002

08004910 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	460b      	mov	r3, r1
 8004924:	813b      	strh	r3, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004938:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2200      	movs	r2, #0
 8004942:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f878 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004960:	d103      	bne.n	800496a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e05f      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800497c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <I2C_RequestMemoryWrite+0x128>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f8d3 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e04c      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ac:	6a39      	ldr	r1, [r7, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f95e 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e02b      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e021      	b.n	8004a2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f938 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d107      	bne.n	8004a1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e005      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	e048      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a54:	d044      	beq.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fc fd73 	bl	8001540 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d139      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10d      	bne.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	e00c      	b.n	8004aac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d116      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e023      	b.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10d      	bne.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	e00c      	b.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d093      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b3e:	e071      	b.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4e:	d123      	bne.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e067      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b9e:	d041      	beq.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7fc fcce 	bl	8001540 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d136      	bne.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e00b      	b.n	8004bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e021      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10c      	bne.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e00b      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af6d 	bne.w	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c7c:	e034      	b.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8e3 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e034      	b.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c94:	d028      	beq.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc fc53 	bl	8001540 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d016      	beq.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e007      	b.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b80      	cmp	r3, #128	@ 0x80
 8004cf4:	d1c3      	bne.n	8004c7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f89b 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e034      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d24:	d028      	beq.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fc fc0b 	bl	8001540 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11d      	bne.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d016      	beq.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d1c3      	bne.n	8004d0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9c:	e049      	b.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d119      	bne.n	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0210 	mvn.w	r2, #16
 8004db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e030      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de0:	f7fc fbae 	bl	8001540 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11d      	bne.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	d016      	beq.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e007      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d1ae      	bne.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e60:	d11b      	bne.n	8004e9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e267      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4b85      	ldr	r3, [pc, #532]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b82      	ldr	r3, [pc, #520]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b7e      	ldr	r3, [pc, #504]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e242      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b70      	ldr	r3, [pc, #448]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b6d      	ldr	r3, [pc, #436]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a6c      	ldr	r2, [pc, #432]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b69      	ldr	r3, [pc, #420]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a68      	ldr	r2, [pc, #416]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b66      	ldr	r3, [pc, #408]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a65      	ldr	r2, [pc, #404]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc faee 	bl	8001540 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc faea 	bl	8001540 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	@ 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e207      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fc fada 	bl	8001540 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fc fad6 	bl	8001540 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	@ 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1f3      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b51      	ldr	r3, [pc, #324]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b47      	ldr	r3, [pc, #284]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b41      	ldr	r3, [pc, #260]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1c7      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4937      	ldr	r1, [pc, #220]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b34      	ldr	r3, [pc, #208]	@ (80050ec <HAL_RCC_OscConfig+0x244>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc fa8f 	bl	8001540 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fc fa8b 	bl	8001540 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a8      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b28      	ldr	r3, [pc, #160]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4925      	ldr	r1, [pc, #148]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_RCC_OscConfig+0x244>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fc fa6e 	bl	8001540 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fc fa6a 	bl	8001540 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e187      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d036      	beq.n	8005100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <HAL_RCC_OscConfig+0x248>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc fa4e 	bl	8001540 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fc fa4a 	bl	8001540 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e167      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_OscConfig+0x240>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e01b      	b.n	8005100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_OscConfig+0x248>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fc fa37 	bl	8001540 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e00e      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fc fa33 	bl	8001540 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e150      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000
 80050f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b88      	ldr	r3, [pc, #544]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ea      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8097 	beq.w	800523c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b81      	ldr	r3, [pc, #516]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	4b7d      	ldr	r3, [pc, #500]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	4a7c      	ldr	r2, [pc, #496]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6413      	str	r3, [r2, #64]	@ 0x40
 800512e:	4b7a      	ldr	r3, [pc, #488]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b77      	ldr	r3, [pc, #476]	@ (800531c <HAL_RCC_OscConfig+0x474>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b74      	ldr	r3, [pc, #464]	@ (800531c <HAL_RCC_OscConfig+0x474>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a73      	ldr	r2, [pc, #460]	@ (800531c <HAL_RCC_OscConfig+0x474>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7fc f9f3 	bl	8001540 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fc f9ef 	bl	8001540 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e10c      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <HAL_RCC_OscConfig+0x474>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x2ea>
 8005184:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005188:	4a63      	ldr	r2, [pc, #396]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x324>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x30c>
 800519a:	4b5f      	ldr	r3, [pc, #380]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	4a5e      	ldr	r2, [pc, #376]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x324>
 80051b4:	4b58      	ldr	r3, [pc, #352]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a57      	ldr	r2, [pc, #348]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c0:	4b55      	ldr	r3, [pc, #340]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	4a54      	ldr	r2, [pc, #336]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc f9b4 	bl	8001540 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fc f9b0 	bl	8001540 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0cb      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b49      	ldr	r3, [pc, #292]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x334>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005200:	f7fc f99e 	bl	8001540 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fc f99a 	bl	8001540 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0b5      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	4b3e      	ldr	r3, [pc, #248]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b39      	ldr	r3, [pc, #228]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	4a38      	ldr	r2, [pc, #224]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a1 	beq.w	8005388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d05c      	beq.n	800530c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d141      	bne.n	80052de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b31      	ldr	r3, [pc, #196]	@ (8005320 <HAL_RCC_OscConfig+0x478>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fc f96e 	bl	8001540 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fc f96a 	bl	8001540 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e087      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b27      	ldr	r3, [pc, #156]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	491b      	ldr	r1, [pc, #108]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x478>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fc f943 	bl	8001540 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fc f93f 	bl	8001540 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e05c      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d0:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x416>
 80052dc:	e054      	b.n	8005388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052de:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <HAL_RCC_OscConfig+0x478>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fc f92c 	bl	8001540 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fc f928 	bl	8001540 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e045      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <HAL_RCC_OscConfig+0x470>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x444>
 800530a:	e03d      	b.n	8005388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e038      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
 8005318:	40023800 	.word	0x40023800
 800531c:	40007000 	.word	0x40007000
 8005320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005324:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <HAL_RCC_OscConfig+0x4ec>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d028      	beq.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d121      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d11a      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800535a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800535c:	4293      	cmp	r3, r2
 800535e:	d111      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	3b01      	subs	r3, #1
 800536e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d107      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40023800 	.word	0x40023800

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cc      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4b68      	ldr	r3, [pc, #416]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90c      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b65      	ldr	r3, [pc, #404]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d044      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d003      	beq.n	8005456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005452:	2b03      	cmp	r3, #3
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3f      	ldr	r3, [pc, #252]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	4b3b      	ldr	r3, [pc, #236]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e067      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b37      	ldr	r3, [pc, #220]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4934      	ldr	r1, [pc, #208]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005488:	f7fc f85a 	bl	8001540 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005490:	f7fc f856 	bl	8001540 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 020c 	and.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1eb      	bne.n	8005490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20c      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b22      	ldr	r3, [pc, #136]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f889 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	@ (8005558 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	@ (800555c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	@ (8005560 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fb ffba 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	080069dc 	.word	0x080069dc
 800555c:	20000000 	.word	0x20000000
 8005560:	20000004 	.word	0x20000004

08005564 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	@ 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d129      	bne.n	80055ca <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	4b2b      	ldr	r3, [pc, #172]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	6313      	str	r3, [r2, #48]	@ 0x30
 8005586:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559c:	2303      	movs	r3, #3
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	4619      	mov	r1, r3
 80055ae:	481f      	ldr	r0, [pc, #124]	@ (800562c <HAL_RCC_MCOConfig+0xc8>)
 80055b0:	f7fe f93a 	bl	8003828 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80055b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	4919      	ldr	r1, [pc, #100]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80055c8:	e029      	b.n	800561e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4b16      	ldr	r3, [pc, #88]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055da:	4b13      	ldr	r3, [pc, #76]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80055e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f0:	2303      	movs	r3, #3
 80055f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80055fc:	f107 031c 	add.w	r3, r7, #28
 8005600:	4619      	mov	r1, r3
 8005602:	480b      	ldr	r0, [pc, #44]	@ (8005630 <HAL_RCC_MCOConfig+0xcc>)
 8005604:	f7fe f910 	bl	8003828 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005608:	4b07      	ldr	r3, [pc, #28]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	00d9      	lsls	r1, r3, #3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	430b      	orrs	r3, r1
 8005618:	4903      	ldr	r1, [pc, #12]	@ (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
}
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	@ 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40023800 	.word	0x40023800
 800562c:	40020000 	.word	0x40020000
 8005630:	40020800 	.word	0x40020800

08005634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b094      	sub	sp, #80	@ 0x50
 800563a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005640:	2300      	movs	r3, #0
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005644:	2300      	movs	r3, #0
 8005646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564c:	4b79      	ldr	r3, [pc, #484]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 030c 	and.w	r3, r3, #12
 8005654:	2b08      	cmp	r3, #8
 8005656:	d00d      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x40>
 8005658:	2b08      	cmp	r3, #8
 800565a:	f200 80e1 	bhi.w	8005820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x34>
 8005662:	2b04      	cmp	r3, #4
 8005664:	d003      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x3a>
 8005666:	e0db      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b73      	ldr	r3, [pc, #460]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x204>)
 800566a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800566c:	e0db      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566e:	4b73      	ldr	r3, [pc, #460]	@ (800583c <HAL_RCC_GetSysClockFreq+0x208>)
 8005670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005672:	e0d8      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005674:	4b6f      	ldr	r3, [pc, #444]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567e:	4b6d      	ldr	r3, [pc, #436]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d063      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568a:	4b6a      	ldr	r3, [pc, #424]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	2200      	movs	r2, #0
 8005692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569c:	633b      	str	r3, [r7, #48]	@ 0x30
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056a6:	4622      	mov	r2, r4
 80056a8:	462b      	mov	r3, r5
 80056aa:	f04f 0000 	mov.w	r0, #0
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	0159      	lsls	r1, r3, #5
 80056b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b8:	0150      	lsls	r0, r2, #5
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4621      	mov	r1, r4
 80056c0:	1a51      	subs	r1, r2, r1
 80056c2:	6139      	str	r1, [r7, #16]
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056d8:	4659      	mov	r1, fp
 80056da:	018b      	lsls	r3, r1, #6
 80056dc:	4651      	mov	r1, sl
 80056de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056e2:	4651      	mov	r1, sl
 80056e4:	018a      	lsls	r2, r1, #6
 80056e6:	4651      	mov	r1, sl
 80056e8:	ebb2 0801 	subs.w	r8, r2, r1
 80056ec:	4659      	mov	r1, fp
 80056ee:	eb63 0901 	sbc.w	r9, r3, r1
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005706:	4690      	mov	r8, r2
 8005708:	4699      	mov	r9, r3
 800570a:	4623      	mov	r3, r4
 800570c:	eb18 0303 	adds.w	r3, r8, r3
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	462b      	mov	r3, r5
 8005714:	eb49 0303 	adc.w	r3, r9, r3
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005726:	4629      	mov	r1, r5
 8005728:	024b      	lsls	r3, r1, #9
 800572a:	4621      	mov	r1, r4
 800572c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005730:	4621      	mov	r1, r4
 8005732:	024a      	lsls	r2, r1, #9
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573a:	2200      	movs	r2, #0
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005744:	f7fa fd94 	bl	8000270 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4613      	mov	r3, r2
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e058      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005752:	4b38      	ldr	r3, [pc, #224]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	2200      	movs	r2, #0
 800575a:	4618      	mov	r0, r3
 800575c:	4611      	mov	r1, r2
 800575e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	2300      	movs	r3, #0
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
 8005768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	f04f 0000 	mov.w	r0, #0
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	0159      	lsls	r1, r3, #5
 800577a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800577e:	0150      	lsls	r0, r2, #5
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4641      	mov	r1, r8
 8005786:	ebb2 0a01 	subs.w	sl, r2, r1
 800578a:	4649      	mov	r1, r9
 800578c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800579c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057a4:	ebb2 040a 	subs.w	r4, r2, sl
 80057a8:	eb63 050b 	sbc.w	r5, r3, fp
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	00eb      	lsls	r3, r5, #3
 80057b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ba:	00e2      	lsls	r2, r4, #3
 80057bc:	4614      	mov	r4, r2
 80057be:	461d      	mov	r5, r3
 80057c0:	4643      	mov	r3, r8
 80057c2:	18e3      	adds	r3, r4, r3
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	464b      	mov	r3, r9
 80057c8:	eb45 0303 	adc.w	r3, r5, r3
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057da:	4629      	mov	r1, r5
 80057dc:	028b      	lsls	r3, r1, #10
 80057de:	4621      	mov	r1, r4
 80057e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057e4:	4621      	mov	r1, r4
 80057e6:	028a      	lsls	r2, r1, #10
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ee:	2200      	movs	r2, #0
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f8:	f7fa fd3a 	bl	8000270 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4613      	mov	r3, r2
 8005802:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	3301      	adds	r3, #1
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800581e:	e002      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005820:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x204>)
 8005822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005828:	4618      	mov	r0, r3
 800582a:	3750      	adds	r7, #80	@ 0x50
 800582c:	46bd      	mov	sp, r7
 800582e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	00f42400 	.word	0x00f42400
 800583c:	007a1200 	.word	0x007a1200

08005840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000000 	.word	0x20000000

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	080069ec 	.word	0x080069ec

08005880 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e038      	b.n	8005908 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7fb fcb4 	bl	8001218 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3308      	adds	r3, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 f828 	bl	8005910 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	f000 f88a 	bl	80059e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6858      	ldr	r0, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	f000 f8b7 	bl	8005a50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	6892      	ldr	r2, [r2, #8]
 80058ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6892      	ldr	r2, [r2, #8]
 80058f6:	f041 0101 	orr.w	r1, r1, #1
 80058fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	f023 0101 	bic.w	r1, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d102      	bne.n	8005940 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800593a:	2340      	movs	r3, #64	@ 0x40
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e001      	b.n	8005944 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005950:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005956:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800595c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005962:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005968:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800596e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005974:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800597a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005980:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800599e:	4b10      	ldr	r3, [pc, #64]	@ (80059e0 <FSMC_NORSRAM_Init+0xd0>)
 80059a0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059a8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80059b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	43db      	mvns	r3, r3
 80059c0:	ea02 0103 	and.w	r1, r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4319      	orrs	r1, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	0008fb7f 	.word	0x0008fb7f

080059e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fa:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	051b      	lsls	r3, r3, #20
 8005a22:	431a      	orrs	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	3b02      	subs	r3, #2
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	3201      	adds	r2, #1
 8005a38:	4319      	orrs	r1, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a64:	d11d      	bne.n	8005aa2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a6e:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	6852      	ldr	r2, [r2, #4]
 8005a7a:	0112      	lsls	r2, r2, #4
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	0212      	lsls	r2, r2, #8
 8005a84:	4311      	orrs	r1, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	6992      	ldr	r2, [r2, #24]
 8005a8a:	4311      	orrs	r1, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	68d2      	ldr	r2, [r2, #12]
 8005a90:	0412      	lsls	r2, r2, #16
 8005a92:	430a      	orrs	r2, r1
 8005a94:	ea43 0102 	orr.w	r1, r3, r2
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005aa0:	e005      	b.n	8005aae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	cff00000 	.word	0xcff00000

08005ac0 <std>:
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	b510      	push	{r4, lr}
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ace:	6083      	str	r3, [r0, #8]
 8005ad0:	8181      	strh	r1, [r0, #12]
 8005ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ad4:	81c2      	strh	r2, [r0, #14]
 8005ad6:	6183      	str	r3, [r0, #24]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	2208      	movs	r2, #8
 8005adc:	305c      	adds	r0, #92	@ 0x5c
 8005ade:	f000 f906 	bl	8005cee <memset>
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <std+0x58>)
 8005ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x5c>)
 8005ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x60>)
 8005aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <std+0x64>)
 8005af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <std+0x68>)
 8005af4:	6224      	str	r4, [r4, #32]
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d006      	beq.n	8005b08 <std+0x48>
 8005afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005afe:	4294      	cmp	r4, r2
 8005b00:	d002      	beq.n	8005b08 <std+0x48>
 8005b02:	33d0      	adds	r3, #208	@ 0xd0
 8005b04:	429c      	cmp	r4, r3
 8005b06:	d105      	bne.n	8005b14 <std+0x54>
 8005b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f000 b966 	b.w	8005de0 <__retarget_lock_init_recursive>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	08005c69 	.word	0x08005c69
 8005b1c:	08005c8b 	.word	0x08005c8b
 8005b20:	08005cc3 	.word	0x08005cc3
 8005b24:	08005ce7 	.word	0x08005ce7
 8005b28:	20012df4 	.word	0x20012df4

08005b2c <stdio_exit_handler>:
 8005b2c:	4a02      	ldr	r2, [pc, #8]	@ (8005b38 <stdio_exit_handler+0xc>)
 8005b2e:	4903      	ldr	r1, [pc, #12]	@ (8005b3c <stdio_exit_handler+0x10>)
 8005b30:	4803      	ldr	r0, [pc, #12]	@ (8005b40 <stdio_exit_handler+0x14>)
 8005b32:	f000 b869 	b.w	8005c08 <_fwalk_sglue>
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	08006681 	.word	0x08006681
 8005b40:	2000001c 	.word	0x2000001c

08005b44 <cleanup_stdio>:
 8005b44:	6841      	ldr	r1, [r0, #4]
 8005b46:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <cleanup_stdio+0x34>)
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d001      	beq.n	8005b54 <cleanup_stdio+0x10>
 8005b50:	f000 fd96 	bl	8006680 <_fflush_r>
 8005b54:	68a1      	ldr	r1, [r4, #8]
 8005b56:	4b09      	ldr	r3, [pc, #36]	@ (8005b7c <cleanup_stdio+0x38>)
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d002      	beq.n	8005b62 <cleanup_stdio+0x1e>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fd8f 	bl	8006680 <_fflush_r>
 8005b62:	68e1      	ldr	r1, [r4, #12]
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <cleanup_stdio+0x3c>)
 8005b66:	4299      	cmp	r1, r3
 8005b68:	d004      	beq.n	8005b74 <cleanup_stdio+0x30>
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	f000 bd86 	b.w	8006680 <_fflush_r>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	20012df4 	.word	0x20012df4
 8005b7c:	20012e5c 	.word	0x20012e5c
 8005b80:	20012ec4 	.word	0x20012ec4

08005b84 <global_stdio_init.part.0>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <global_stdio_init.part.0+0x30>)
 8005b88:	4c0b      	ldr	r4, [pc, #44]	@ (8005bb8 <global_stdio_init.part.0+0x34>)
 8005b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bbc <global_stdio_init.part.0+0x38>)
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	2200      	movs	r2, #0
 8005b92:	2104      	movs	r1, #4
 8005b94:	f7ff ff94 	bl	8005ac0 <std>
 8005b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2109      	movs	r1, #9
 8005ba0:	f7ff ff8e 	bl	8005ac0 <std>
 8005ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ba8:	2202      	movs	r2, #2
 8005baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bae:	2112      	movs	r1, #18
 8005bb0:	f7ff bf86 	b.w	8005ac0 <std>
 8005bb4:	20012f2c 	.word	0x20012f2c
 8005bb8:	20012df4 	.word	0x20012df4
 8005bbc:	08005b2d 	.word	0x08005b2d

08005bc0 <__sfp_lock_acquire>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__sfp_lock_acquire+0x8>)
 8005bc2:	f000 b90e 	b.w	8005de2 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	20012f35 	.word	0x20012f35

08005bcc <__sfp_lock_release>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__sfp_lock_release+0x8>)
 8005bce:	f000 b909 	b.w	8005de4 <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	20012f35 	.word	0x20012f35

08005bd8 <__sinit>:
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	4604      	mov	r4, r0
 8005bdc:	f7ff fff0 	bl	8005bc0 <__sfp_lock_acquire>
 8005be0:	6a23      	ldr	r3, [r4, #32]
 8005be2:	b11b      	cbz	r3, 8005bec <__sinit+0x14>
 8005be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be8:	f7ff bff0 	b.w	8005bcc <__sfp_lock_release>
 8005bec:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <__sinit+0x28>)
 8005bee:	6223      	str	r3, [r4, #32]
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <__sinit+0x2c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f5      	bne.n	8005be4 <__sinit+0xc>
 8005bf8:	f7ff ffc4 	bl	8005b84 <global_stdio_init.part.0>
 8005bfc:	e7f2      	b.n	8005be4 <__sinit+0xc>
 8005bfe:	bf00      	nop
 8005c00:	08005b45 	.word	0x08005b45
 8005c04:	20012f2c 	.word	0x20012f2c

08005c08 <_fwalk_sglue>:
 8005c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	4688      	mov	r8, r1
 8005c10:	4614      	mov	r4, r2
 8005c12:	2600      	movs	r6, #0
 8005c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c18:	f1b9 0901 	subs.w	r9, r9, #1
 8005c1c:	d505      	bpl.n	8005c2a <_fwalk_sglue+0x22>
 8005c1e:	6824      	ldr	r4, [r4, #0]
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	d1f7      	bne.n	8005c14 <_fwalk_sglue+0xc>
 8005c24:	4630      	mov	r0, r6
 8005c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d907      	bls.n	8005c40 <_fwalk_sglue+0x38>
 8005c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c34:	3301      	adds	r3, #1
 8005c36:	d003      	beq.n	8005c40 <_fwalk_sglue+0x38>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	4306      	orrs	r6, r0
 8005c40:	3568      	adds	r5, #104	@ 0x68
 8005c42:	e7e9      	b.n	8005c18 <_fwalk_sglue+0x10>

08005c44 <iprintf>:
 8005c44:	b40f      	push	{r0, r1, r2, r3}
 8005c46:	b507      	push	{r0, r1, r2, lr}
 8005c48:	4906      	ldr	r1, [pc, #24]	@ (8005c64 <iprintf+0x20>)
 8005c4a:	ab04      	add	r3, sp, #16
 8005c4c:	6808      	ldr	r0, [r1, #0]
 8005c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c52:	6881      	ldr	r1, [r0, #8]
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	f000 f9e9 	bl	800602c <_vfiprintf_r>
 8005c5a:	b003      	add	sp, #12
 8005c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c60:	b004      	add	sp, #16
 8005c62:	4770      	bx	lr
 8005c64:	20000018 	.word	0x20000018

08005c68 <__sread>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c70:	f000 f868 	bl	8005d44 <_read_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	bfab      	itete	ge
 8005c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c7c:	181b      	addge	r3, r3, r0
 8005c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c82:	bfac      	ite	ge
 8005c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c86:	81a3      	strhlt	r3, [r4, #12]
 8005c88:	bd10      	pop	{r4, pc}

08005c8a <__swrite>:
 8005c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	461f      	mov	r7, r3
 8005c90:	898b      	ldrh	r3, [r1, #12]
 8005c92:	05db      	lsls	r3, r3, #23
 8005c94:	4605      	mov	r5, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4616      	mov	r6, r2
 8005c9a:	d505      	bpl.n	8005ca8 <__swrite+0x1e>
 8005c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f000 f83c 	bl	8005d20 <_lseek_r>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	f000 b853 	b.w	8005d68 <_write_r>

08005cc2 <__sseek>:
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cca:	f000 f829 	bl	8005d20 <_lseek_r>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	bf15      	itete	ne
 8005cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cde:	81a3      	strheq	r3, [r4, #12]
 8005ce0:	bf18      	it	ne
 8005ce2:	81a3      	strhne	r3, [r4, #12]
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <__sclose>:
 8005ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cea:	f000 b809 	b.w	8005d00 <_close_r>

08005cee <memset>:
 8005cee:	4402      	add	r2, r0
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d100      	bne.n	8005cf8 <memset+0xa>
 8005cf6:	4770      	bx	lr
 8005cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfc:	e7f9      	b.n	8005cf2 <memset+0x4>
	...

08005d00 <_close_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d06      	ldr	r5, [pc, #24]	@ (8005d1c <_close_r+0x1c>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fb fb0b 	bl	8001326 <_close>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_close_r+0x1a>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_close_r+0x1a>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20012f30 	.word	0x20012f30

08005d20 <_lseek_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d07      	ldr	r5, [pc, #28]	@ (8005d40 <_lseek_r+0x20>)
 8005d24:	4604      	mov	r4, r0
 8005d26:	4608      	mov	r0, r1
 8005d28:	4611      	mov	r1, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	602a      	str	r2, [r5, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fb fb20 	bl	8001374 <_lseek>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_lseek_r+0x1e>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_lseek_r+0x1e>
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	20012f30 	.word	0x20012f30

08005d44 <_read_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	@ (8005d64 <_read_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fb faae 	bl	80012b4 <_read>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_read_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_read_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20012f30 	.word	0x20012f30

08005d68 <_write_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	@ (8005d88 <_write_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fb fab9 	bl	80012ee <_write>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_write_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_write_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20012f30 	.word	0x20012f30

08005d8c <__errno>:
 8005d8c:	4b01      	ldr	r3, [pc, #4]	@ (8005d94 <__errno+0x8>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000018 	.word	0x20000018

08005d98 <__libc_init_array>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005dd0 <__libc_init_array+0x38>)
 8005d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005dd4 <__libc_init_array+0x3c>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	2600      	movs	r6, #0
 8005da4:	42a6      	cmp	r6, r4
 8005da6:	d109      	bne.n	8005dbc <__libc_init_array+0x24>
 8005da8:	4d0b      	ldr	r5, [pc, #44]	@ (8005dd8 <__libc_init_array+0x40>)
 8005daa:	4c0c      	ldr	r4, [pc, #48]	@ (8005ddc <__libc_init_array+0x44>)
 8005dac:	f000 fdb8 	bl	8006920 <_init>
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	2600      	movs	r6, #0
 8005db6:	42a6      	cmp	r6, r4
 8005db8:	d105      	bne.n	8005dc6 <__libc_init_array+0x2e>
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc0:	4798      	blx	r3
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7ee      	b.n	8005da4 <__libc_init_array+0xc>
 8005dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dca:	4798      	blx	r3
 8005dcc:	3601      	adds	r6, #1
 8005dce:	e7f2      	b.n	8005db6 <__libc_init_array+0x1e>
 8005dd0:	08006a38 	.word	0x08006a38
 8005dd4:	08006a38 	.word	0x08006a38
 8005dd8:	08006a38 	.word	0x08006a38
 8005ddc:	08006a3c 	.word	0x08006a3c

08005de0 <__retarget_lock_init_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <__retarget_lock_acquire_recursive>:
 8005de2:	4770      	bx	lr

08005de4 <__retarget_lock_release_recursive>:
 8005de4:	4770      	bx	lr
	...

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d041      	beq.n	8005e74 <_free_r+0x8c>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f000 f8e0 	bl	8005fc0 <__malloc_lock>
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <_free_r+0x90>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f000 b8dc 	b.w	8005fcc <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4408      	add	r0, r1
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x22>
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20012f3c 	.word	0x20012f3c

08005e7c <sbrk_aligned>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ebc <sbrk_aligned+0x40>)
 8005e80:	460c      	mov	r4, r1
 8005e82:	6831      	ldr	r1, [r6, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	b911      	cbnz	r1, 8005e8e <sbrk_aligned+0x12>
 8005e88:	f000 fcb6 	bl	80067f8 <_sbrk_r>
 8005e8c:	6030      	str	r0, [r6, #0]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fcb1 	bl	80067f8 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d103      	bne.n	8005ea2 <sbrk_aligned+0x26>
 8005e9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d0f8      	beq.n	8005e9e <sbrk_aligned+0x22>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fca2 	bl	80067f8 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d1f2      	bne.n	8005e9e <sbrk_aligned+0x22>
 8005eb8:	e7ef      	b.n	8005e9a <sbrk_aligned+0x1e>
 8005eba:	bf00      	nop
 8005ebc:	20012f38 	.word	0x20012f38

08005ec0 <_malloc_r>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	1ccd      	adds	r5, r1, #3
 8005ec6:	f025 0503 	bic.w	r5, r5, #3
 8005eca:	3508      	adds	r5, #8
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	bf38      	it	cc
 8005ed0:	250c      	movcc	r5, #12
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	db01      	blt.n	8005edc <_malloc_r+0x1c>
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d904      	bls.n	8005ee6 <_malloc_r+0x26>
 8005edc:	230c      	movs	r3, #12
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fbc <_malloc_r+0xfc>
 8005eea:	f000 f869 	bl	8005fc0 <__malloc_lock>
 8005eee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef2:	461c      	mov	r4, r3
 8005ef4:	bb44      	cbnz	r4, 8005f48 <_malloc_r+0x88>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff ffbf 	bl	8005e7c <sbrk_aligned>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	4604      	mov	r4, r0
 8005f02:	d158      	bne.n	8005fb6 <_malloc_r+0xf6>
 8005f04:	f8d8 4000 	ldr.w	r4, [r8]
 8005f08:	4627      	mov	r7, r4
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	d143      	bne.n	8005f96 <_malloc_r+0xd6>
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d04b      	beq.n	8005faa <_malloc_r+0xea>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4639      	mov	r1, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	eb04 0903 	add.w	r9, r4, r3
 8005f1c:	f000 fc6c 	bl	80067f8 <_sbrk_r>
 8005f20:	4581      	cmp	r9, r0
 8005f22:	d142      	bne.n	8005faa <_malloc_r+0xea>
 8005f24:	6821      	ldr	r1, [r4, #0]
 8005f26:	1a6d      	subs	r5, r5, r1
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ffa6 	bl	8005e7c <sbrk_aligned>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d03a      	beq.n	8005faa <_malloc_r+0xea>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	442b      	add	r3, r5
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	bb62      	cbnz	r2, 8005f9c <_malloc_r+0xdc>
 8005f42:	f8c8 7000 	str.w	r7, [r8]
 8005f46:	e00f      	b.n	8005f68 <_malloc_r+0xa8>
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	1b52      	subs	r2, r2, r5
 8005f4c:	d420      	bmi.n	8005f90 <_malloc_r+0xd0>
 8005f4e:	2a0b      	cmp	r2, #11
 8005f50:	d917      	bls.n	8005f82 <_malloc_r+0xc2>
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	6025      	str	r5, [r4, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	6059      	strne	r1, [r3, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	bf08      	it	eq
 8005f60:	f8c8 1000 	streq.w	r1, [r8]
 8005f64:	5162      	str	r2, [r4, r5]
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f82f 	bl	8005fcc <__malloc_unlock>
 8005f6e:	f104 000b 	add.w	r0, r4, #11
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f020 0007 	bic.w	r0, r0, #7
 8005f78:	1ac2      	subs	r2, r0, r3
 8005f7a:	bf1c      	itt	ne
 8005f7c:	1a1b      	subne	r3, r3, r0
 8005f7e:	50a3      	strne	r3, [r4, r2]
 8005f80:	e7af      	b.n	8005ee2 <_malloc_r+0x22>
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	bf0c      	ite	eq
 8005f88:	f8c8 2000 	streq.w	r2, [r8]
 8005f8c:	605a      	strne	r2, [r3, #4]
 8005f8e:	e7eb      	b.n	8005f68 <_malloc_r+0xa8>
 8005f90:	4623      	mov	r3, r4
 8005f92:	6864      	ldr	r4, [r4, #4]
 8005f94:	e7ae      	b.n	8005ef4 <_malloc_r+0x34>
 8005f96:	463c      	mov	r4, r7
 8005f98:	687f      	ldr	r7, [r7, #4]
 8005f9a:	e7b6      	b.n	8005f0a <_malloc_r+0x4a>
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d1fb      	bne.n	8005f9c <_malloc_r+0xdc>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e7de      	b.n	8005f68 <_malloc_r+0xa8>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f80c 	bl	8005fcc <__malloc_unlock>
 8005fb4:	e794      	b.n	8005ee0 <_malloc_r+0x20>
 8005fb6:	6005      	str	r5, [r0, #0]
 8005fb8:	e7d6      	b.n	8005f68 <_malloc_r+0xa8>
 8005fba:	bf00      	nop
 8005fbc:	20012f3c 	.word	0x20012f3c

08005fc0 <__malloc_lock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__malloc_lock+0x8>)
 8005fc2:	f7ff bf0e 	b.w	8005de2 <__retarget_lock_acquire_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20012f34 	.word	0x20012f34

08005fcc <__malloc_unlock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__malloc_unlock+0x8>)
 8005fce:	f7ff bf09 	b.w	8005de4 <__retarget_lock_release_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	20012f34 	.word	0x20012f34

08005fd8 <__sfputc_r>:
 8005fd8:	6893      	ldr	r3, [r2, #8]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	b410      	push	{r4}
 8005fe0:	6093      	str	r3, [r2, #8]
 8005fe2:	da08      	bge.n	8005ff6 <__sfputc_r+0x1e>
 8005fe4:	6994      	ldr	r4, [r2, #24]
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	db01      	blt.n	8005fee <__sfputc_r+0x16>
 8005fea:	290a      	cmp	r1, #10
 8005fec:	d103      	bne.n	8005ff6 <__sfputc_r+0x1e>
 8005fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff2:	f000 bb6d 	b.w	80066d0 <__swbuf_r>
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	1c58      	adds	r0, r3, #1
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	7019      	strb	r1, [r3, #0]
 8005ffe:	4608      	mov	r0, r1
 8006000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006004:	4770      	bx	lr

08006006 <__sfputs_r>:
 8006006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	4614      	mov	r4, r2
 800600e:	18d5      	adds	r5, r2, r3
 8006010:	42ac      	cmp	r4, r5
 8006012:	d101      	bne.n	8006018 <__sfputs_r+0x12>
 8006014:	2000      	movs	r0, #0
 8006016:	e007      	b.n	8006028 <__sfputs_r+0x22>
 8006018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601c:	463a      	mov	r2, r7
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff ffda 	bl	8005fd8 <__sfputc_r>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d1f3      	bne.n	8006010 <__sfputs_r+0xa>
 8006028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800602c <_vfiprintf_r>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	460d      	mov	r5, r1
 8006032:	b09d      	sub	sp, #116	@ 0x74
 8006034:	4614      	mov	r4, r2
 8006036:	4698      	mov	r8, r3
 8006038:	4606      	mov	r6, r0
 800603a:	b118      	cbz	r0, 8006044 <_vfiprintf_r+0x18>
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b90b      	cbnz	r3, 8006044 <_vfiprintf_r+0x18>
 8006040:	f7ff fdca 	bl	8005bd8 <__sinit>
 8006044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006046:	07d9      	lsls	r1, r3, #31
 8006048:	d405      	bmi.n	8006056 <_vfiprintf_r+0x2a>
 800604a:	89ab      	ldrh	r3, [r5, #12]
 800604c:	059a      	lsls	r2, r3, #22
 800604e:	d402      	bmi.n	8006056 <_vfiprintf_r+0x2a>
 8006050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006052:	f7ff fec6 	bl	8005de2 <__retarget_lock_acquire_recursive>
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	071b      	lsls	r3, r3, #28
 800605a:	d501      	bpl.n	8006060 <_vfiprintf_r+0x34>
 800605c:	692b      	ldr	r3, [r5, #16]
 800605e:	b99b      	cbnz	r3, 8006088 <_vfiprintf_r+0x5c>
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f000 fb72 	bl	800674c <__swsetup_r>
 8006068:	b170      	cbz	r0, 8006088 <_vfiprintf_r+0x5c>
 800606a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800606c:	07dc      	lsls	r4, r3, #31
 800606e:	d504      	bpl.n	800607a <_vfiprintf_r+0x4e>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006074:	b01d      	add	sp, #116	@ 0x74
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	0598      	lsls	r0, r3, #22
 800607e:	d4f7      	bmi.n	8006070 <_vfiprintf_r+0x44>
 8006080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006082:	f7ff feaf 	bl	8005de4 <__retarget_lock_release_recursive>
 8006086:	e7f3      	b.n	8006070 <_vfiprintf_r+0x44>
 8006088:	2300      	movs	r3, #0
 800608a:	9309      	str	r3, [sp, #36]	@ 0x24
 800608c:	2320      	movs	r3, #32
 800608e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006092:	f8cd 800c 	str.w	r8, [sp, #12]
 8006096:	2330      	movs	r3, #48	@ 0x30
 8006098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006248 <_vfiprintf_r+0x21c>
 800609c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060a0:	f04f 0901 	mov.w	r9, #1
 80060a4:	4623      	mov	r3, r4
 80060a6:	469a      	mov	sl, r3
 80060a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ac:	b10a      	cbz	r2, 80060b2 <_vfiprintf_r+0x86>
 80060ae:	2a25      	cmp	r2, #37	@ 0x25
 80060b0:	d1f9      	bne.n	80060a6 <_vfiprintf_r+0x7a>
 80060b2:	ebba 0b04 	subs.w	fp, sl, r4
 80060b6:	d00b      	beq.n	80060d0 <_vfiprintf_r+0xa4>
 80060b8:	465b      	mov	r3, fp
 80060ba:	4622      	mov	r2, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ffa1 	bl	8006006 <__sfputs_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	f000 80a7 	beq.w	8006218 <_vfiprintf_r+0x1ec>
 80060ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060cc:	445a      	add	r2, fp
 80060ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80060d0:	f89a 3000 	ldrb.w	r3, [sl]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 809f 	beq.w	8006218 <_vfiprintf_r+0x1ec>
 80060da:	2300      	movs	r3, #0
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e4:	f10a 0a01 	add.w	sl, sl, #1
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80060f2:	4654      	mov	r4, sl
 80060f4:	2205      	movs	r2, #5
 80060f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fa:	4853      	ldr	r0, [pc, #332]	@ (8006248 <_vfiprintf_r+0x21c>)
 80060fc:	f7fa f868 	bl	80001d0 <memchr>
 8006100:	9a04      	ldr	r2, [sp, #16]
 8006102:	b9d8      	cbnz	r0, 800613c <_vfiprintf_r+0x110>
 8006104:	06d1      	lsls	r1, r2, #27
 8006106:	bf44      	itt	mi
 8006108:	2320      	movmi	r3, #32
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610e:	0713      	lsls	r3, r2, #28
 8006110:	bf44      	itt	mi
 8006112:	232b      	movmi	r3, #43	@ 0x2b
 8006114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006118:	f89a 3000 	ldrb.w	r3, [sl]
 800611c:	2b2a      	cmp	r3, #42	@ 0x2a
 800611e:	d015      	beq.n	800614c <_vfiprintf_r+0x120>
 8006120:	9a07      	ldr	r2, [sp, #28]
 8006122:	4654      	mov	r4, sl
 8006124:	2000      	movs	r0, #0
 8006126:	f04f 0c0a 	mov.w	ip, #10
 800612a:	4621      	mov	r1, r4
 800612c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006130:	3b30      	subs	r3, #48	@ 0x30
 8006132:	2b09      	cmp	r3, #9
 8006134:	d94b      	bls.n	80061ce <_vfiprintf_r+0x1a2>
 8006136:	b1b0      	cbz	r0, 8006166 <_vfiprintf_r+0x13a>
 8006138:	9207      	str	r2, [sp, #28]
 800613a:	e014      	b.n	8006166 <_vfiprintf_r+0x13a>
 800613c:	eba0 0308 	sub.w	r3, r0, r8
 8006140:	fa09 f303 	lsl.w	r3, r9, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	46a2      	mov	sl, r4
 800614a:	e7d2      	b.n	80060f2 <_vfiprintf_r+0xc6>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	1d19      	adds	r1, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9103      	str	r1, [sp, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfbb      	ittet	lt
 8006158:	425b      	neglt	r3, r3
 800615a:	f042 0202 	orrlt.w	r2, r2, #2
 800615e:	9307      	strge	r3, [sp, #28]
 8006160:	9307      	strlt	r3, [sp, #28]
 8006162:	bfb8      	it	lt
 8006164:	9204      	strlt	r2, [sp, #16]
 8006166:	7823      	ldrb	r3, [r4, #0]
 8006168:	2b2e      	cmp	r3, #46	@ 0x2e
 800616a:	d10a      	bne.n	8006182 <_vfiprintf_r+0x156>
 800616c:	7863      	ldrb	r3, [r4, #1]
 800616e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006170:	d132      	bne.n	80061d8 <_vfiprintf_r+0x1ac>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	1d1a      	adds	r2, r3, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	9203      	str	r2, [sp, #12]
 800617a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800617e:	3402      	adds	r4, #2
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006258 <_vfiprintf_r+0x22c>
 8006186:	7821      	ldrb	r1, [r4, #0]
 8006188:	2203      	movs	r2, #3
 800618a:	4650      	mov	r0, sl
 800618c:	f7fa f820 	bl	80001d0 <memchr>
 8006190:	b138      	cbz	r0, 80061a2 <_vfiprintf_r+0x176>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	eba0 000a 	sub.w	r0, r0, sl
 8006198:	2240      	movs	r2, #64	@ 0x40
 800619a:	4082      	lsls	r2, r0
 800619c:	4313      	orrs	r3, r2
 800619e:	3401      	adds	r4, #1
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a6:	4829      	ldr	r0, [pc, #164]	@ (800624c <_vfiprintf_r+0x220>)
 80061a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061ac:	2206      	movs	r2, #6
 80061ae:	f7fa f80f 	bl	80001d0 <memchr>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d03f      	beq.n	8006236 <_vfiprintf_r+0x20a>
 80061b6:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <_vfiprintf_r+0x224>)
 80061b8:	bb1b      	cbnz	r3, 8006202 <_vfiprintf_r+0x1d6>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	3307      	adds	r3, #7
 80061be:	f023 0307 	bic.w	r3, r3, #7
 80061c2:	3308      	adds	r3, #8
 80061c4:	9303      	str	r3, [sp, #12]
 80061c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c8:	443b      	add	r3, r7
 80061ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80061cc:	e76a      	b.n	80060a4 <_vfiprintf_r+0x78>
 80061ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d2:	460c      	mov	r4, r1
 80061d4:	2001      	movs	r0, #1
 80061d6:	e7a8      	b.n	800612a <_vfiprintf_r+0xfe>
 80061d8:	2300      	movs	r3, #0
 80061da:	3401      	adds	r4, #1
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 0c0a 	mov.w	ip, #10
 80061e4:	4620      	mov	r0, r4
 80061e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ea:	3a30      	subs	r2, #48	@ 0x30
 80061ec:	2a09      	cmp	r2, #9
 80061ee:	d903      	bls.n	80061f8 <_vfiprintf_r+0x1cc>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0c6      	beq.n	8006182 <_vfiprintf_r+0x156>
 80061f4:	9105      	str	r1, [sp, #20]
 80061f6:	e7c4      	b.n	8006182 <_vfiprintf_r+0x156>
 80061f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fc:	4604      	mov	r4, r0
 80061fe:	2301      	movs	r3, #1
 8006200:	e7f0      	b.n	80061e4 <_vfiprintf_r+0x1b8>
 8006202:	ab03      	add	r3, sp, #12
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	462a      	mov	r2, r5
 8006208:	4b12      	ldr	r3, [pc, #72]	@ (8006254 <_vfiprintf_r+0x228>)
 800620a:	a904      	add	r1, sp, #16
 800620c:	4630      	mov	r0, r6
 800620e:	f3af 8000 	nop.w
 8006212:	4607      	mov	r7, r0
 8006214:	1c78      	adds	r0, r7, #1
 8006216:	d1d6      	bne.n	80061c6 <_vfiprintf_r+0x19a>
 8006218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	d405      	bmi.n	800622a <_vfiprintf_r+0x1fe>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	059a      	lsls	r2, r3, #22
 8006222:	d402      	bmi.n	800622a <_vfiprintf_r+0x1fe>
 8006224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006226:	f7ff fddd 	bl	8005de4 <__retarget_lock_release_recursive>
 800622a:	89ab      	ldrh	r3, [r5, #12]
 800622c:	065b      	lsls	r3, r3, #25
 800622e:	f53f af1f 	bmi.w	8006070 <_vfiprintf_r+0x44>
 8006232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006234:	e71e      	b.n	8006074 <_vfiprintf_r+0x48>
 8006236:	ab03      	add	r3, sp, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	462a      	mov	r2, r5
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <_vfiprintf_r+0x228>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	4630      	mov	r0, r6
 8006242:	f000 f879 	bl	8006338 <_printf_i>
 8006246:	e7e4      	b.n	8006212 <_vfiprintf_r+0x1e6>
 8006248:	080069fc 	.word	0x080069fc
 800624c:	08006a06 	.word	0x08006a06
 8006250:	00000000 	.word	0x00000000
 8006254:	08006007 	.word	0x08006007
 8006258:	08006a02 	.word	0x08006a02

0800625c <_printf_common>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	4616      	mov	r6, r2
 8006262:	4698      	mov	r8, r3
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006278:	4607      	mov	r7, r0
 800627a:	460c      	mov	r4, r1
 800627c:	b10a      	cbz	r2, 8006282 <_printf_common+0x26>
 800627e:	3301      	adds	r3, #1
 8006280:	6033      	str	r3, [r6, #0]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	0699      	lsls	r1, r3, #26
 8006286:	bf42      	ittt	mi
 8006288:	6833      	ldrmi	r3, [r6, #0]
 800628a:	3302      	addmi	r3, #2
 800628c:	6033      	strmi	r3, [r6, #0]
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	f015 0506 	ands.w	r5, r5, #6
 8006294:	d106      	bne.n	80062a4 <_printf_common+0x48>
 8006296:	f104 0a19 	add.w	sl, r4, #25
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	6832      	ldr	r2, [r6, #0]
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dc26      	bgt.n	80062f2 <_printf_common+0x96>
 80062a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	3b00      	subs	r3, #0
 80062ac:	bf18      	it	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	0692      	lsls	r2, r2, #26
 80062b2:	d42b      	bmi.n	800630c <_printf_common+0xb0>
 80062b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062b8:	4641      	mov	r1, r8
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c8      	blx	r9
 80062be:	3001      	adds	r0, #1
 80062c0:	d01e      	beq.n	8006300 <_printf_common+0xa4>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	f003 0306 	and.w	r3, r3, #6
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf02      	ittt	eq
 80062ce:	68e5      	ldreq	r5, [r4, #12]
 80062d0:	6833      	ldreq	r3, [r6, #0]
 80062d2:	1aed      	subeq	r5, r5, r3
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	bf0c      	ite	eq
 80062d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062dc:	2500      	movne	r5, #0
 80062de:	4293      	cmp	r3, r2
 80062e0:	bfc4      	itt	gt
 80062e2:	1a9b      	subgt	r3, r3, r2
 80062e4:	18ed      	addgt	r5, r5, r3
 80062e6:	2600      	movs	r6, #0
 80062e8:	341a      	adds	r4, #26
 80062ea:	42b5      	cmp	r5, r6
 80062ec:	d11a      	bne.n	8006324 <_printf_common+0xc8>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e008      	b.n	8006304 <_printf_common+0xa8>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4652      	mov	r2, sl
 80062f6:	4641      	mov	r1, r8
 80062f8:	4638      	mov	r0, r7
 80062fa:	47c8      	blx	r9
 80062fc:	3001      	adds	r0, #1
 80062fe:	d103      	bne.n	8006308 <_printf_common+0xac>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006308:	3501      	adds	r5, #1
 800630a:	e7c6      	b.n	800629a <_printf_common+0x3e>
 800630c:	18e1      	adds	r1, r4, r3
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	2030      	movs	r0, #48	@ 0x30
 8006312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006316:	4422      	add	r2, r4
 8006318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800631c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006320:	3302      	adds	r3, #2
 8006322:	e7c7      	b.n	80062b4 <_printf_common+0x58>
 8006324:	2301      	movs	r3, #1
 8006326:	4622      	mov	r2, r4
 8006328:	4641      	mov	r1, r8
 800632a:	4638      	mov	r0, r7
 800632c:	47c8      	blx	r9
 800632e:	3001      	adds	r0, #1
 8006330:	d0e6      	beq.n	8006300 <_printf_common+0xa4>
 8006332:	3601      	adds	r6, #1
 8006334:	e7d9      	b.n	80062ea <_printf_common+0x8e>
	...

08006338 <_printf_i>:
 8006338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	7e0f      	ldrb	r7, [r1, #24]
 800633e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006340:	2f78      	cmp	r7, #120	@ 0x78
 8006342:	4691      	mov	r9, r2
 8006344:	4680      	mov	r8, r0
 8006346:	460c      	mov	r4, r1
 8006348:	469a      	mov	sl, r3
 800634a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800634e:	d807      	bhi.n	8006360 <_printf_i+0x28>
 8006350:	2f62      	cmp	r7, #98	@ 0x62
 8006352:	d80a      	bhi.n	800636a <_printf_i+0x32>
 8006354:	2f00      	cmp	r7, #0
 8006356:	f000 80d2 	beq.w	80064fe <_printf_i+0x1c6>
 800635a:	2f58      	cmp	r7, #88	@ 0x58
 800635c:	f000 80b9 	beq.w	80064d2 <_printf_i+0x19a>
 8006360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006368:	e03a      	b.n	80063e0 <_printf_i+0xa8>
 800636a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800636e:	2b15      	cmp	r3, #21
 8006370:	d8f6      	bhi.n	8006360 <_printf_i+0x28>
 8006372:	a101      	add	r1, pc, #4	@ (adr r1, 8006378 <_printf_i+0x40>)
 8006374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063e5 	.word	0x080063e5
 8006380:	08006361 	.word	0x08006361
 8006384:	08006361 	.word	0x08006361
 8006388:	08006361 	.word	0x08006361
 800638c:	08006361 	.word	0x08006361
 8006390:	080063e5 	.word	0x080063e5
 8006394:	08006361 	.word	0x08006361
 8006398:	08006361 	.word	0x08006361
 800639c:	08006361 	.word	0x08006361
 80063a0:	08006361 	.word	0x08006361
 80063a4:	080064e5 	.word	0x080064e5
 80063a8:	0800640f 	.word	0x0800640f
 80063ac:	0800649f 	.word	0x0800649f
 80063b0:	08006361 	.word	0x08006361
 80063b4:	08006361 	.word	0x08006361
 80063b8:	08006507 	.word	0x08006507
 80063bc:	08006361 	.word	0x08006361
 80063c0:	0800640f 	.word	0x0800640f
 80063c4:	08006361 	.word	0x08006361
 80063c8:	08006361 	.word	0x08006361
 80063cc:	080064a7 	.word	0x080064a7
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6032      	str	r2, [r6, #0]
 80063d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063e0:	2301      	movs	r3, #1
 80063e2:	e09d      	b.n	8006520 <_printf_i+0x1e8>
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	1d19      	adds	r1, r3, #4
 80063ea:	6031      	str	r1, [r6, #0]
 80063ec:	0606      	lsls	r6, r0, #24
 80063ee:	d501      	bpl.n	80063f4 <_printf_i+0xbc>
 80063f0:	681d      	ldr	r5, [r3, #0]
 80063f2:	e003      	b.n	80063fc <_printf_i+0xc4>
 80063f4:	0645      	lsls	r5, r0, #25
 80063f6:	d5fb      	bpl.n	80063f0 <_printf_i+0xb8>
 80063f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063fc:	2d00      	cmp	r5, #0
 80063fe:	da03      	bge.n	8006408 <_printf_i+0xd0>
 8006400:	232d      	movs	r3, #45	@ 0x2d
 8006402:	426d      	negs	r5, r5
 8006404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006408:	4859      	ldr	r0, [pc, #356]	@ (8006570 <_printf_i+0x238>)
 800640a:	230a      	movs	r3, #10
 800640c:	e011      	b.n	8006432 <_printf_i+0xfa>
 800640e:	6821      	ldr	r1, [r4, #0]
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	0608      	lsls	r0, r1, #24
 8006414:	f853 5b04 	ldr.w	r5, [r3], #4
 8006418:	d402      	bmi.n	8006420 <_printf_i+0xe8>
 800641a:	0649      	lsls	r1, r1, #25
 800641c:	bf48      	it	mi
 800641e:	b2ad      	uxthmi	r5, r5
 8006420:	2f6f      	cmp	r7, #111	@ 0x6f
 8006422:	4853      	ldr	r0, [pc, #332]	@ (8006570 <_printf_i+0x238>)
 8006424:	6033      	str	r3, [r6, #0]
 8006426:	bf14      	ite	ne
 8006428:	230a      	movne	r3, #10
 800642a:	2308      	moveq	r3, #8
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006432:	6866      	ldr	r6, [r4, #4]
 8006434:	60a6      	str	r6, [r4, #8]
 8006436:	2e00      	cmp	r6, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90d      	cbnz	r5, 8006448 <_printf_i+0x110>
 8006444:	2e00      	cmp	r6, #0
 8006446:	d04b      	beq.n	80064e0 <_printf_i+0x1a8>
 8006448:	4616      	mov	r6, r2
 800644a:	fbb5 f1f3 	udiv	r1, r5, r3
 800644e:	fb03 5711 	mls	r7, r3, r1, r5
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006458:	462f      	mov	r7, r5
 800645a:	42bb      	cmp	r3, r7
 800645c:	460d      	mov	r5, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x112>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x144>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07df      	lsls	r7, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x144>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	@ 0x30
 8006474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006478:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800647c:	1b92      	subs	r2, r2, r6
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee6 	bl	800625c <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14a      	bne.n	800652a <_printf_i+0x1f2>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f043 0320 	orr.w	r3, r3, #32
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	4833      	ldr	r0, [pc, #204]	@ (8006574 <_printf_i+0x23c>)
 80064a8:	2778      	movs	r7, #120	@ 0x78
 80064aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	6831      	ldr	r1, [r6, #0]
 80064b2:	061f      	lsls	r7, r3, #24
 80064b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064b8:	d402      	bmi.n	80064c0 <_printf_i+0x188>
 80064ba:	065f      	lsls	r7, r3, #25
 80064bc:	bf48      	it	mi
 80064be:	b2ad      	uxthmi	r5, r5
 80064c0:	6031      	str	r1, [r6, #0]
 80064c2:	07d9      	lsls	r1, r3, #31
 80064c4:	bf44      	itt	mi
 80064c6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ca:	6023      	strmi	r3, [r4, #0]
 80064cc:	b11d      	cbz	r5, 80064d6 <_printf_i+0x19e>
 80064ce:	2310      	movs	r3, #16
 80064d0:	e7ac      	b.n	800642c <_printf_i+0xf4>
 80064d2:	4827      	ldr	r0, [pc, #156]	@ (8006570 <_printf_i+0x238>)
 80064d4:	e7e9      	b.n	80064aa <_printf_i+0x172>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f023 0320 	bic.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	e7f6      	b.n	80064ce <_printf_i+0x196>
 80064e0:	4616      	mov	r6, r2
 80064e2:	e7bd      	b.n	8006460 <_printf_i+0x128>
 80064e4:	6833      	ldr	r3, [r6, #0]
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	6961      	ldr	r1, [r4, #20]
 80064ea:	1d18      	adds	r0, r3, #4
 80064ec:	6030      	str	r0, [r6, #0]
 80064ee:	062e      	lsls	r6, r5, #24
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0x1c0>
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e002      	b.n	80064fe <_printf_i+0x1c6>
 80064f8:	0668      	lsls	r0, r5, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0x1bc>
 80064fc:	8019      	strh	r1, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	4616      	mov	r6, r2
 8006504:	e7bc      	b.n	8006480 <_printf_i+0x148>
 8006506:	6833      	ldr	r3, [r6, #0]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	681e      	ldr	r6, [r3, #0]
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	2100      	movs	r1, #0
 8006512:	4630      	mov	r0, r6
 8006514:	f7f9 fe5c 	bl	80001d0 <memchr>
 8006518:	b108      	cbz	r0, 800651e <_printf_i+0x1e6>
 800651a:	1b80      	subs	r0, r0, r6
 800651c:	6060      	str	r0, [r4, #4]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	2300      	movs	r3, #0
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006528:	e7aa      	b.n	8006480 <_printf_i+0x148>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	4632      	mov	r2, r6
 800652e:	4649      	mov	r1, r9
 8006530:	4640      	mov	r0, r8
 8006532:	47d0      	blx	sl
 8006534:	3001      	adds	r0, #1
 8006536:	d0ad      	beq.n	8006494 <_printf_i+0x15c>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	079b      	lsls	r3, r3, #30
 800653c:	d413      	bmi.n	8006566 <_printf_i+0x22e>
 800653e:	68e0      	ldr	r0, [r4, #12]
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	4298      	cmp	r0, r3
 8006544:	bfb8      	it	lt
 8006546:	4618      	movlt	r0, r3
 8006548:	e7a6      	b.n	8006498 <_printf_i+0x160>
 800654a:	2301      	movs	r3, #1
 800654c:	4632      	mov	r2, r6
 800654e:	4649      	mov	r1, r9
 8006550:	4640      	mov	r0, r8
 8006552:	47d0      	blx	sl
 8006554:	3001      	adds	r0, #1
 8006556:	d09d      	beq.n	8006494 <_printf_i+0x15c>
 8006558:	3501      	adds	r5, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	9903      	ldr	r1, [sp, #12]
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	42ab      	cmp	r3, r5
 8006562:	dcf2      	bgt.n	800654a <_printf_i+0x212>
 8006564:	e7eb      	b.n	800653e <_printf_i+0x206>
 8006566:	2500      	movs	r5, #0
 8006568:	f104 0619 	add.w	r6, r4, #25
 800656c:	e7f5      	b.n	800655a <_printf_i+0x222>
 800656e:	bf00      	nop
 8006570:	08006a0d 	.word	0x08006a0d
 8006574:	08006a1e 	.word	0x08006a1e

08006578 <__sflush_r>:
 8006578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	0716      	lsls	r6, r2, #28
 8006582:	4605      	mov	r5, r0
 8006584:	460c      	mov	r4, r1
 8006586:	d454      	bmi.n	8006632 <__sflush_r+0xba>
 8006588:	684b      	ldr	r3, [r1, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dc02      	bgt.n	8006594 <__sflush_r+0x1c>
 800658e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	dd48      	ble.n	8006626 <__sflush_r+0xae>
 8006594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006596:	2e00      	cmp	r6, #0
 8006598:	d045      	beq.n	8006626 <__sflush_r+0xae>
 800659a:	2300      	movs	r3, #0
 800659c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065a0:	682f      	ldr	r7, [r5, #0]
 80065a2:	6a21      	ldr	r1, [r4, #32]
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	d030      	beq.n	800660a <__sflush_r+0x92>
 80065a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	0759      	lsls	r1, r3, #29
 80065ae:	d505      	bpl.n	80065bc <__sflush_r+0x44>
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065b6:	b10b      	cbz	r3, 80065bc <__sflush_r+0x44>
 80065b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c0:	6a21      	ldr	r1, [r4, #32]
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b0      	blx	r6
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	d106      	bne.n	80065da <__sflush_r+0x62>
 80065cc:	6829      	ldr	r1, [r5, #0]
 80065ce:	291d      	cmp	r1, #29
 80065d0:	d82b      	bhi.n	800662a <__sflush_r+0xb2>
 80065d2:	4a2a      	ldr	r2, [pc, #168]	@ (800667c <__sflush_r+0x104>)
 80065d4:	410a      	asrs	r2, r1
 80065d6:	07d6      	lsls	r6, r2, #31
 80065d8:	d427      	bmi.n	800662a <__sflush_r+0xb2>
 80065da:	2200      	movs	r2, #0
 80065dc:	6062      	str	r2, [r4, #4]
 80065de:	04d9      	lsls	r1, r3, #19
 80065e0:	6922      	ldr	r2, [r4, #16]
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	d504      	bpl.n	80065f0 <__sflush_r+0x78>
 80065e6:	1c42      	adds	r2, r0, #1
 80065e8:	d101      	bne.n	80065ee <__sflush_r+0x76>
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	b903      	cbnz	r3, 80065f0 <__sflush_r+0x78>
 80065ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80065f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065f2:	602f      	str	r7, [r5, #0]
 80065f4:	b1b9      	cbz	r1, 8006626 <__sflush_r+0xae>
 80065f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d002      	beq.n	8006604 <__sflush_r+0x8c>
 80065fe:	4628      	mov	r0, r5
 8006600:	f7ff fbf2 	bl	8005de8 <_free_r>
 8006604:	2300      	movs	r3, #0
 8006606:	6363      	str	r3, [r4, #52]	@ 0x34
 8006608:	e00d      	b.n	8006626 <__sflush_r+0xae>
 800660a:	2301      	movs	r3, #1
 800660c:	4628      	mov	r0, r5
 800660e:	47b0      	blx	r6
 8006610:	4602      	mov	r2, r0
 8006612:	1c50      	adds	r0, r2, #1
 8006614:	d1c9      	bne.n	80065aa <__sflush_r+0x32>
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0c6      	beq.n	80065aa <__sflush_r+0x32>
 800661c:	2b1d      	cmp	r3, #29
 800661e:	d001      	beq.n	8006624 <__sflush_r+0xac>
 8006620:	2b16      	cmp	r3, #22
 8006622:	d11e      	bne.n	8006662 <__sflush_r+0xea>
 8006624:	602f      	str	r7, [r5, #0]
 8006626:	2000      	movs	r0, #0
 8006628:	e022      	b.n	8006670 <__sflush_r+0xf8>
 800662a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662e:	b21b      	sxth	r3, r3
 8006630:	e01b      	b.n	800666a <__sflush_r+0xf2>
 8006632:	690f      	ldr	r7, [r1, #16]
 8006634:	2f00      	cmp	r7, #0
 8006636:	d0f6      	beq.n	8006626 <__sflush_r+0xae>
 8006638:	0793      	lsls	r3, r2, #30
 800663a:	680e      	ldr	r6, [r1, #0]
 800663c:	bf08      	it	eq
 800663e:	694b      	ldreq	r3, [r1, #20]
 8006640:	600f      	str	r7, [r1, #0]
 8006642:	bf18      	it	ne
 8006644:	2300      	movne	r3, #0
 8006646:	eba6 0807 	sub.w	r8, r6, r7
 800664a:	608b      	str	r3, [r1, #8]
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	dde9      	ble.n	8006626 <__sflush_r+0xae>
 8006652:	6a21      	ldr	r1, [r4, #32]
 8006654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006656:	4643      	mov	r3, r8
 8006658:	463a      	mov	r2, r7
 800665a:	4628      	mov	r0, r5
 800665c:	47b0      	blx	r6
 800665e:	2800      	cmp	r0, #0
 8006660:	dc08      	bgt.n	8006674 <__sflush_r+0xfc>
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006674:	4407      	add	r7, r0
 8006676:	eba8 0800 	sub.w	r8, r8, r0
 800667a:	e7e7      	b.n	800664c <__sflush_r+0xd4>
 800667c:	dfbffffe 	.word	0xdfbffffe

08006680 <_fflush_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	b913      	cbnz	r3, 8006690 <_fflush_r+0x10>
 800668a:	2500      	movs	r5, #0
 800668c:	4628      	mov	r0, r5
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	b118      	cbz	r0, 800669a <_fflush_r+0x1a>
 8006692:	6a03      	ldr	r3, [r0, #32]
 8006694:	b90b      	cbnz	r3, 800669a <_fflush_r+0x1a>
 8006696:	f7ff fa9f 	bl	8005bd8 <__sinit>
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f3      	beq.n	800668a <_fflush_r+0xa>
 80066a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066a4:	07d0      	lsls	r0, r2, #31
 80066a6:	d404      	bmi.n	80066b2 <_fflush_r+0x32>
 80066a8:	0599      	lsls	r1, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_fflush_r+0x32>
 80066ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ae:	f7ff fb98 	bl	8005de2 <__retarget_lock_acquire_recursive>
 80066b2:	4628      	mov	r0, r5
 80066b4:	4621      	mov	r1, r4
 80066b6:	f7ff ff5f 	bl	8006578 <__sflush_r>
 80066ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066bc:	07da      	lsls	r2, r3, #31
 80066be:	4605      	mov	r5, r0
 80066c0:	d4e4      	bmi.n	800668c <_fflush_r+0xc>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	059b      	lsls	r3, r3, #22
 80066c6:	d4e1      	bmi.n	800668c <_fflush_r+0xc>
 80066c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ca:	f7ff fb8b 	bl	8005de4 <__retarget_lock_release_recursive>
 80066ce:	e7dd      	b.n	800668c <_fflush_r+0xc>

080066d0 <__swbuf_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	460e      	mov	r6, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	4605      	mov	r5, r0
 80066d8:	b118      	cbz	r0, 80066e2 <__swbuf_r+0x12>
 80066da:	6a03      	ldr	r3, [r0, #32]
 80066dc:	b90b      	cbnz	r3, 80066e2 <__swbuf_r+0x12>
 80066de:	f7ff fa7b 	bl	8005bd8 <__sinit>
 80066e2:	69a3      	ldr	r3, [r4, #24]
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	071a      	lsls	r2, r3, #28
 80066ea:	d501      	bpl.n	80066f0 <__swbuf_r+0x20>
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	b943      	cbnz	r3, 8006702 <__swbuf_r+0x32>
 80066f0:	4621      	mov	r1, r4
 80066f2:	4628      	mov	r0, r5
 80066f4:	f000 f82a 	bl	800674c <__swsetup_r>
 80066f8:	b118      	cbz	r0, 8006702 <__swbuf_r+0x32>
 80066fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80066fe:	4638      	mov	r0, r7
 8006700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	6922      	ldr	r2, [r4, #16]
 8006706:	1a98      	subs	r0, r3, r2
 8006708:	6963      	ldr	r3, [r4, #20]
 800670a:	b2f6      	uxtb	r6, r6
 800670c:	4283      	cmp	r3, r0
 800670e:	4637      	mov	r7, r6
 8006710:	dc05      	bgt.n	800671e <__swbuf_r+0x4e>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f7ff ffb3 	bl	8006680 <_fflush_r>
 800671a:	2800      	cmp	r0, #0
 800671c:	d1ed      	bne.n	80066fa <__swbuf_r+0x2a>
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	3b01      	subs	r3, #1
 8006722:	60a3      	str	r3, [r4, #8]
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	6022      	str	r2, [r4, #0]
 800672a:	701e      	strb	r6, [r3, #0]
 800672c:	6962      	ldr	r2, [r4, #20]
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	429a      	cmp	r2, r3
 8006732:	d004      	beq.n	800673e <__swbuf_r+0x6e>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	07db      	lsls	r3, r3, #31
 8006738:	d5e1      	bpl.n	80066fe <__swbuf_r+0x2e>
 800673a:	2e0a      	cmp	r6, #10
 800673c:	d1df      	bne.n	80066fe <__swbuf_r+0x2e>
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f7ff ff9d 	bl	8006680 <_fflush_r>
 8006746:	2800      	cmp	r0, #0
 8006748:	d0d9      	beq.n	80066fe <__swbuf_r+0x2e>
 800674a:	e7d6      	b.n	80066fa <__swbuf_r+0x2a>

0800674c <__swsetup_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4b29      	ldr	r3, [pc, #164]	@ (80067f4 <__swsetup_r+0xa8>)
 8006750:	4605      	mov	r5, r0
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	460c      	mov	r4, r1
 8006756:	b118      	cbz	r0, 8006760 <__swsetup_r+0x14>
 8006758:	6a03      	ldr	r3, [r0, #32]
 800675a:	b90b      	cbnz	r3, 8006760 <__swsetup_r+0x14>
 800675c:	f7ff fa3c 	bl	8005bd8 <__sinit>
 8006760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006764:	0719      	lsls	r1, r3, #28
 8006766:	d422      	bmi.n	80067ae <__swsetup_r+0x62>
 8006768:	06da      	lsls	r2, r3, #27
 800676a:	d407      	bmi.n	800677c <__swsetup_r+0x30>
 800676c:	2209      	movs	r2, #9
 800676e:	602a      	str	r2, [r5, #0]
 8006770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800677a:	e033      	b.n	80067e4 <__swsetup_r+0x98>
 800677c:	0758      	lsls	r0, r3, #29
 800677e:	d512      	bpl.n	80067a6 <__swsetup_r+0x5a>
 8006780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006782:	b141      	cbz	r1, 8006796 <__swsetup_r+0x4a>
 8006784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006788:	4299      	cmp	r1, r3
 800678a:	d002      	beq.n	8006792 <__swsetup_r+0x46>
 800678c:	4628      	mov	r0, r5
 800678e:	f7ff fb2b 	bl	8005de8 <_free_r>
 8006792:	2300      	movs	r3, #0
 8006794:	6363      	str	r3, [r4, #52]	@ 0x34
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	2300      	movs	r3, #0
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f043 0308 	orr.w	r3, r3, #8
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	b94b      	cbnz	r3, 80067c6 <__swsetup_r+0x7a>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067bc:	d003      	beq.n	80067c6 <__swsetup_r+0x7a>
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f84f 	bl	8006864 <__smakebuf_r>
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	f013 0201 	ands.w	r2, r3, #1
 80067ce:	d00a      	beq.n	80067e6 <__swsetup_r+0x9a>
 80067d0:	2200      	movs	r2, #0
 80067d2:	60a2      	str	r2, [r4, #8]
 80067d4:	6962      	ldr	r2, [r4, #20]
 80067d6:	4252      	negs	r2, r2
 80067d8:	61a2      	str	r2, [r4, #24]
 80067da:	6922      	ldr	r2, [r4, #16]
 80067dc:	b942      	cbnz	r2, 80067f0 <__swsetup_r+0xa4>
 80067de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067e2:	d1c5      	bne.n	8006770 <__swsetup_r+0x24>
 80067e4:	bd38      	pop	{r3, r4, r5, pc}
 80067e6:	0799      	lsls	r1, r3, #30
 80067e8:	bf58      	it	pl
 80067ea:	6962      	ldrpl	r2, [r4, #20]
 80067ec:	60a2      	str	r2, [r4, #8]
 80067ee:	e7f4      	b.n	80067da <__swsetup_r+0x8e>
 80067f0:	2000      	movs	r0, #0
 80067f2:	e7f7      	b.n	80067e4 <__swsetup_r+0x98>
 80067f4:	20000018 	.word	0x20000018

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	@ (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fa fdc4 	bl	8001390 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20012f30 	.word	0x20012f30

08006818 <__swhatbuf_r>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	460c      	mov	r4, r1
 800681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006820:	2900      	cmp	r1, #0
 8006822:	b096      	sub	sp, #88	@ 0x58
 8006824:	4615      	mov	r5, r2
 8006826:	461e      	mov	r6, r3
 8006828:	da0d      	bge.n	8006846 <__swhatbuf_r+0x2e>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006830:	f04f 0100 	mov.w	r1, #0
 8006834:	bf14      	ite	ne
 8006836:	2340      	movne	r3, #64	@ 0x40
 8006838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800683c:	2000      	movs	r0, #0
 800683e:	6031      	str	r1, [r6, #0]
 8006840:	602b      	str	r3, [r5, #0]
 8006842:	b016      	add	sp, #88	@ 0x58
 8006844:	bd70      	pop	{r4, r5, r6, pc}
 8006846:	466a      	mov	r2, sp
 8006848:	f000 f848 	bl	80068dc <_fstat_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	dbec      	blt.n	800682a <__swhatbuf_r+0x12>
 8006850:	9901      	ldr	r1, [sp, #4]
 8006852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800685a:	4259      	negs	r1, r3
 800685c:	4159      	adcs	r1, r3
 800685e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006862:	e7eb      	b.n	800683c <__swhatbuf_r+0x24>

08006864 <__smakebuf_r>:
 8006864:	898b      	ldrh	r3, [r1, #12]
 8006866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006868:	079d      	lsls	r5, r3, #30
 800686a:	4606      	mov	r6, r0
 800686c:	460c      	mov	r4, r1
 800686e:	d507      	bpl.n	8006880 <__smakebuf_r+0x1c>
 8006870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	2301      	movs	r3, #1
 800687a:	6163      	str	r3, [r4, #20]
 800687c:	b003      	add	sp, #12
 800687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006880:	ab01      	add	r3, sp, #4
 8006882:	466a      	mov	r2, sp
 8006884:	f7ff ffc8 	bl	8006818 <__swhatbuf_r>
 8006888:	9f00      	ldr	r7, [sp, #0]
 800688a:	4605      	mov	r5, r0
 800688c:	4639      	mov	r1, r7
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff fb16 	bl	8005ec0 <_malloc_r>
 8006894:	b948      	cbnz	r0, 80068aa <__smakebuf_r+0x46>
 8006896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800689a:	059a      	lsls	r2, r3, #22
 800689c:	d4ee      	bmi.n	800687c <__smakebuf_r+0x18>
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	e7e2      	b.n	8006870 <__smakebuf_r+0xc>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	6020      	str	r0, [r4, #0]
 80068ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068ba:	b15b      	cbz	r3, 80068d4 <__smakebuf_r+0x70>
 80068bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c0:	4630      	mov	r0, r6
 80068c2:	f000 f81d 	bl	8006900 <_isatty_r>
 80068c6:	b128      	cbz	r0, 80068d4 <__smakebuf_r+0x70>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	431d      	orrs	r5, r3
 80068d8:	81a5      	strh	r5, [r4, #12]
 80068da:	e7cf      	b.n	800687c <__smakebuf_r+0x18>

080068dc <_fstat_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d07      	ldr	r5, [pc, #28]	@ (80068fc <_fstat_r+0x20>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	f7fa fd28 	bl	800133e <_fstat>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d102      	bne.n	80068f8 <_fstat_r+0x1c>
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	b103      	cbz	r3, 80068f8 <_fstat_r+0x1c>
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
 80068fa:	bf00      	nop
 80068fc:	20012f30 	.word	0x20012f30

08006900 <_isatty_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d06      	ldr	r5, [pc, #24]	@ (800691c <_isatty_r+0x1c>)
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fa fd27 	bl	800135e <_isatty>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_isatty_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_isatty_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20012f30 	.word	0x20012f30

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
